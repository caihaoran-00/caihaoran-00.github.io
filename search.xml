<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASR+LLM+TTS构建智能语音对话机器人</title>
    <url>/2025/02/08/ASR-LLM-TTS%E6%9E%84%E5%BB%BA%E6%99%BA%E8%83%BD%E8%AF%AD%E9%9F%B3%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间通过<strong>sensevoice + Qwen2.5 7b + GSV</strong>做了个智能语音对话机器人，现在公司想将其做成个产品，原先的方案不太适用，本文记录方案选择、实现过程和最终结果。</p>
<span id="more"></span>

<hr>
<h2 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h2><p>首先，我打算的是vad要运行在客户端，发送语音段到服务端，这里的方案选择指的是<strong>sensevoice + Qwen2.5 7b + GSV</strong>之间程序</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>ASR</tag>
        <tag>LLM</tag>
        <tag>TTS</tag>
        <tag>funasr</tag>
        <tag>Qwen2.5</tag>
        <tag>GSV</tag>
        <tag>GPT SOVITS</tag>
        <tag>Sensevoice</tag>
      </tags>
  </entry>
  <entry>
    <title>AudioSet数据集介绍</title>
    <url>/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在找狗叫数据集，发现<a href="https://research.google.com/audioset///dataset/index.html">AuidoSet</a>数据集。这是google在2017年推出的用于<em><strong>音频事件</strong></em>研究的大规模手动注释音频事件数据集。其中包含632个音频事件类别以及从<em><strong>YouTube视频</strong></em>中提取的2,084,320个人工标记的10秒声音片段集合（527个标签），google期望通过发布AudioSet为音频事件检测提供一个通用的、符合实际规模（与现实相符）的评估任务，并为全面的声音事件词汇表提供一个起点。</p>
<hr>
<span id="more"></span>

<h2 id="本体（Ontology）"><a href="#本体（Ontology）" class="headerlink" title="本体（Ontology）"></a>本体（Ontology）</h2><p>​		AudioSet 本体是按层次结构组织的声音事件的集合。该本体涵盖了各种日常声音，从人类和动物的声音到自然和环境声音，再到音乐和其他声音。这也解释了为什么AudioSet的音频事件类别是632个，而标签个数是527，因为分层结构导致的类别比标签多。</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/%E6%9C%AC%E4%BD%93En.jpg" class="" title="AudioSet本体顶层的两层 AudioSet本体顶层的两层">



<center>图 1: AudioSet本体顶层的两层</center>

<p>​		图1给出了AudioSet数据集本体顶层的两层分类，下一层还有更小的分类。</p>
<hr>
<h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>​		所有数据集的详细分类可在<a href="https://research.google.com/audioset///dataset/index.html">此页面</a>查询，数据集分为三个不相交的集合：平衡评估集、平衡训练集和不平衡训练集。平衡集中每个类别具有相同数量的示例，不平衡训练集包含其余（除Evaluation和Balanced train外）的带注释片段。</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/dog.jpg" class="" title="Dog数据集的详细信息 Dog数据集的详细信息">

<center>图 2: Dog数据集的详细信息</center>

<p>​		图2给出便签中包含狗的数据集的详细信息，以Dog标签为例，可看出：<br>$$<br>totals&#x3D;Evalution+Balanced train+Unbalanced train<br>$$<br>​		注意，非平衡训练集的标签可能会很不准确，即视频的标定10秒段内并没有出现对应标签的声音事件，使用时需筛选。</p>
<h2 id="数据集下载"><a href="#数据集下载" class="headerlink" title="数据集下载"></a>数据集下载</h2><p>2017年发布的AudioSet数据集版本提供两种格式：</p>
<ol>
<li>文本（csv）文件提供描述每个片段的YouTube视频 ID、开始时间、结束时间以及一个或多个标签。</li>
<li>以 1Hz 提取的 128 维音频特征。音频特征是使用Hershey 等人描述的 VGG 启发式声学模型提取的，该模型在<a href="https://research.google.com/youtube8m/index.html">YouTube-8M</a>的初步版本上进行训练。这些特征经过 PCA 处理并量化，以与 YouTube-8M 提供的音频特征兼容。它们存储为 TensorFlow Record 文件。用于生成特征的模型可在<a href="https://github.com/tensorflow/models/tree/master/research/audioset">TensorFlow 模型 GitHub 存储库</a>中找到。</li>
</ol>
<p>我们仅关注第一种格式，csv下载链接如下：</p>
<ul>
<li>Evaluation - <a href="http://storage.googleapis.com/us_audioset/youtube_corpus/v1/csv/eval_segments.csv">eval_segments.csv</a></li>
<li>Balanced train - <a href="http://storage.googleapis.com/us_audioset/youtube_corpus/v1/csv/balanced_train_segments.csv">balanced_train_segments.csv</a></li>
<li>Unbalanced train - <a href="http://storage.googleapis.com/us_audioset/youtube_corpus/v1/csv/unbalanced_train_segments.csv">unbalanced_train_segments.csv</a></li>
</ul>
<h3 id="CSV文件格式"><a href="#CSV文件格式" class="headerlink" title="CSV文件格式"></a>CSV文件格式</h3><p>每个CSV文件都有一个三行的标题，每行以<code>#</code>开头，前两行表示创建时间和一般统计信息，本节以<code>eval_segments.csv</code>说明：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Segments csv created Sun Mar  <span class="number">5</span> <span class="number">10</span>:<span class="number">54</span>:<span class="number">25</span> <span class="number">2017</span></span><br><span class="line"># num_ytids=<span class="number">20371</span>, num_segs=<span class="number">20371</span>, num_unique_labels=<span class="number">527</span>, num_positive_labels=<span class="number">51804</span></span><br><span class="line"># YTID, start_seconds, end_seconds, positive_labels</span><br></pre></td></tr></table></figure>

<p>后续表格即为标头定义的列，包括视频ID（YTID），起始时间（start_seconds），结束时间（end_seconds），目标标签（positive_labels），如：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">-<span class="number">0</span>RWZT-miFs, <span class="number">420</span>.<span class="number">000</span>, <span class="number">430</span>.<span class="number">000</span>, &quot;/m/<span class="number">03</span>v3yw,/m/<span class="number">0</span>k4j&quot;</span><br></pre></td></tr></table></figure>

<p>表示<a href="https://www.youtube.com/watch?v=-0RWZT-miFs&t=420s">Youtube视频</a><code>-0RWZT-miFs</code>的10秒声音事件段开始于420秒，结束于430秒，标注人员确认这10秒内存在&#x2F;m&#x2F;03v3yw（“钥匙叮当声”）和 &#x2F;m&#x2F;0k4j（“汽车声”），关于positive_labels的具体意义，请参与<a href="https://github.com/audioset/ontology/blob/master/ontology.json">ontology.json</a>，例如：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/ontology.jpg" class="" title="&#x2F;m&#x2F;03v3yw本体 &#x2F;m&#x2F;03v3yw本体">

<center>图 3: /m/03v3yw本体</center>

<h3 id="YouTube视频链接格式"><a href="#YouTube视频链接格式" class="headerlink" title="YouTube视频链接格式"></a>YouTube视频链接格式</h3><p>以<code>https://www.youtube.com/watch?v=-0RWZT-miFs&amp;t=30s</code>为例，其中：</p>
<ul>
<li><code>https://www.youtube.com/watch?v=</code>是标准的视频播放链接前缀</li>
<li><code>v=</code>后面的部分是视频的唯一标识符（Video ID or YTID)，通常是11个字符，如这里的<code>-0RWZT-miFs</code></li>
<li><code>&amp;t</code>表示视频的开始时间，可选，并且s可以省略</li>
</ul>
<h3 id="YouTube视频下载"><a href="#YouTube视频下载" class="headerlink" title="YouTube视频下载"></a>YouTube视频下载</h3><p>目前（2025-1-17），下载YouTube视频的主流方式是使用<a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a>，yt-dlp 是一款功能丰富的命令行音频&#x2F;视频下载器，支持<a href="https://github.com/yt-dlp/yt-dlp/blob/master/supportedsites.md">数千个网站</a>。该项目是基于已停用的<a href="https://github.com/blackjack4494/yt-dlc">youtube-dlc</a>的 <a href="https://github.com/ytdl-org/youtube-dl">youtube-dl</a>分支.</p>
<h4 id="yt-dlp安装"><a href="#yt-dlp安装" class="headerlink" title="yt-dlp安装"></a>yt-dlp安装</h4><p>yt-dlp官方推荐使用已编译的<a href="https://github.com/yt-dlp/yt-dlp?tab=readme-ov-file#release-files">二进制</a>文件，下文介绍Win10电脑上二进制（命令行）方式和python脚本方式实现相同功能。</p>
<h5 id="二进制文件方式"><a href="#二进制文件方式" class="headerlink" title="二进制文件方式"></a>二进制文件方式</h5><ul>
<li><p>点击<a href="https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe">yt-dlp.exe</a>下载yt-dlp.exe</p>
</li>
<li><p><strong>ffmpeg</strong> and <strong>ffprobe</strong></p>
<p><code>yt-dlp</code>依赖<code>ffmpeg</code>和<code>ffprobe</code>，点击<a href="https://www.ffmpeg.org/">ffmpeg</a>按下述图文操作安装即可：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/ffmpeg1.jpg" class=""></li>
</ul>
<p>点击链接后，按上图点击顺序操作，随后下滑到release builds，点击下图所示zip压缩文件进行下载：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/ffmpeg2.jpg" class="">

<p>解压后得到：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/ffmpeg3.jpg" class="">

<p>在<code>bin</code>文件夹下可看到：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/ffmpeg4.jpg" class="">

<p><code>bin</code>目录下打开<code>cmd</code>，输入<code>ffmpeg</code>，可看到下图输出信息：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/ffmpeg5.jpg" class="">

<p>但是在其他路径下运行<code>ffmpeg</code>命令会提示：<code>&#39;ffmpeg&#39; 不是内部或外部命令，也不是可运行的程序 或批处理文件。</code>是因为我们没有把可执行文件添加到系统路径中，打开系统环境变量，将刚才的<code>bin</code>目录路径添加到用户变量或系统变量的<code>Path</code>中即可，如：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/ffmpeg6.jpg" class="">

<p>设置好环境变量后，新起一个<code>cmd</code>窗口，即可在任意路径调用<code>ffmpeg</code>命令。</p>
<ul>
<li><p>万事具备！开始展示！到你<code>yt-dlp.exe</code>所在的文件夹打开<code>cmd</code>，先下载个视频试试效果，运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp.exe https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>这个时候如果没有魔法上网，将会一直超时重试：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/retry.jpg" class="">

<p>打开魔法上网，注意想在<code>cmd窗口</code>使用代理，需要如下图配置下（配置后别忘了重新开一个cmd窗口）：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/clash.jpg" class="">

<p>重新在<code>yt-dlp.exe</code>所在的文件夹打开<code>cmd</code>，再次运行上述命名，你将会看到：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/error1.jpg" class="">

<p>这是<code>yt-dlp</code>在下载指定<code>YouTube</code>视频时遇到了需要登录验证的问题，如果在你的浏览器上已经登陆了（或者登录过且Cookies没过期）<code>YouTube</code>，（以chrome谷歌浏览器举例)那么可以添加<code>--cookies-from-browser chrome</code>参数，如果没登录过，可以去登录下，如果这个方式行不通，就需要使用<code>--cookies</code>参数指定你自己导出的<code>Cookies</code>文件（下面会讲）。</p>
<p>运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies-from-browser chrome https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>出现：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/error2.jpg" class="">

<p>关闭你的chrome浏览器，再运行上述命令，得到：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/error3.jpg" class="">

<p>害，只能使用插件导出<code>Cookies</code>文件了，去安装<a href="https://chromewebstore.google.com/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc">Get cookies.txt LOCALLY</a><code>Chrome</code>插件后，按顺序点击：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/chrome.jpg" class="">

<p>然后，打开<a href="https://www.youtube.com/">youtube</a>首页，再按顺序点击：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/chrome2.jpg" class="">

<p>即会下载<code>www.youtube.com_cookies.txt</code>，将其放在<code>yt-dlp.exe</code>同级目录下，运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies www.youtube.com_cookies.txt https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p><b>OK!</b>下载成功：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/down1.jpg" class="">

<p>从打印信息可看出，实际上是下载了两个东西，首先是<code>Corgi Cuteness with Puppy Growl! [0Wkk9iNzA9c].f135.mp4</code>视频文件，然后是<code>Corgi Cuteness with Puppy Growl! [0Wkk9iNzA9c].f140.m4a</code>音频文件，然后将这两个文件合并成<code>Corgi Cuteness with Puppy Growl! [0Wkk9iNzA9c].mp4</code>视频文件，最后是将两个单独的文件删除。</p>
<p>运行下面命令以：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies www.youtube.com_cookies.txt --list-formats https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>铛铛铛铛，又出问题了：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/error4.jpg" class="">

<p>打开你的<code>www.youtube.com_cookies.txt</code>，搜索<code>LOGIN_INFO</code>和<code>SAPISID</code>，是不是发现没有这两个关键词，哦原来是我们在生成cookies的网页上没有做登录<code>Youtube</code>的操作，让我们重新操作下，先把已登录的<code>Youtube</code>账号退掉，再打开一个新网页登录<code>Youtube</code>账号，后续生成<code>cookies</code>的操作和之前介绍一致，再次运行上述命令：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/list.jpg" class="">

<p>好，我们看到一些格式信息，上面的<code>f135</code>就对应这里的<code>ID:135</code>，是<code>video only</code>，也就是不包含音频，<code>f140</code>对应<code>ID:140</code>，是<code>audio only</code>，也就是不包含视频。</p>
<p>我只需要音频，并不需要视频该怎么做呢，聪明的你可能大概想到了，通过<code>-f</code>指定<code>ID</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies www.youtube.com_cookies.txt -f <span class="number">140</span> https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>下载的音频文件为<code>Corgi Cuteness with Puppy Growl! [0Wkk9iNzA9c].m4a</code>，格式为<code>2通道</code>，<code>44100Hz</code>，如果每次下载音频都需要先查询<code>--list-formats</code>有些太麻烦了，有没有简便方法？有，通过<code>-f</code>参数指定：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies www.youtube.com_cookies.txt -f ba https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>这里的<code>ba</code>是<code>bestaudio</code>的缩写，使用<code>bestaudio</code>效果一样，那如果我想对原始音频格式做一些修改呢？比如<code>单通道</code>，<code>32k</code>采样率，<code>16位</code>位深，通过<code>ExtractAudio:-ac 1 -ar 32000 -sample_fmt s16</code>实现如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies www.youtube.com_cookies.txt -f ba -x --audio-<span class="built_in">format</span> wav --postprocessor-args &quot;ExtractAudio:-ac <span class="number">1</span> -ar <span class="number">32000</span> -sample_fmt s16&quot; https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>不写<code>FFmpegExtractAudio:</code>会出个<code>WARNING: Post-Processor arguments given without specifying name. The arguments will be given to all post-processors</code>的警告，现在我们实现了从某个<code>Youtube</code>的<code>url</code>只获取音频，并且对其进行<code>重采样</code>，那么如果想只获取某个时间段的音频，怎么办？通过<code>-ss</code>和<code>-to</code>指定：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies www.youtube.com_cookies.txt -f ba -x --audio-<span class="built_in">format</span> wav --postprocessor-args &quot;ExtractAudio:-ss <span class="number">00</span>:<span class="number">00</span>:<span class="number">29</span> -to <span class="number">00</span>:<span class="number">00</span>:<span class="number">38</span> -ac <span class="number">1</span> -ar <span class="number">32000</span> -sample_fmt s16&quot; https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>这种方法是先下载整段音频，再对整段音频进行重采样和剪切（我看可以使用–download-sections分段下载，但是我试下来不行，后续再研究）。</p>
<p>好，还差最后一步，默认的下载文件名是<code>video title[&lt;video ID&gt;].&lt;file extension&gt;</code>，如果想更改输出的文件名，比如输出文件名格式为<code>videi ID.&lt;file extension&gt;</code>怎么办?通过<code>-o</code>参数指定：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">yt-dlp --cookies www.youtube.com_cookies.txt -f ba -x --audio-<span class="built_in">format</span> wav --postprocessor-args &quot;ExtractAudio:-ss <span class="number">00</span>:<span class="number">00</span>:<span class="number">29</span> -to <span class="number">00</span>:<span class="number">00</span>:<span class="number">38</span> -ac <span class="number">1</span> -ar <span class="number">32000</span> -sample_fmt s16&quot; -o &quot;<span class="variable">%(id)s.%</span>(ext)s&quot; https://www.youtube.com/watch?v=<span class="number">0</span>Wkk9iNzA9c</span><br></pre></td></tr></table></figure>

<p>好好好，现在实现了命令行方式从<code>Youtube</code>的指定<code>url</code>下载指定片段的音频，并进行重采样，最后重命名。</p>
</li>
</ul>
<h5 id="pip方式"><a href="#pip方式" class="headerlink" title="pip方式"></a>pip方式</h5><p>（TODO…）</p>
<hr>
<h4 id="视频下载"><a href="#视频下载" class="headerlink" title="视频下载"></a>视频下载</h4><p>前面都是准备工作，下面才是正式下载。由前文可知我们需要狗叫的<code>开始时间</code>和<code>结束时间</code>，以及<code>url</code>才能下载目标片段，由于平衡集的数量相对较少，非平衡训练集的标签质量较低，故还是需要人为筛选。先去<a href="https://github.com/audioset/ontology/blob/master/ontology.json">ontology</a>查询下与狗相关的编号标签，经查询，原版摘录：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&quot;id&quot;: &quot;/m/<span class="number">0</span>bt9lr&quot;,</span><br><span class="line"></span><br><span class="line">&quot;name&quot;: &quot;Dog&quot;,</span><br><span class="line"></span><br><span class="line">&quot;description&quot;: &quot;Any sounds coming from the familiar domesticated canid which has been selectively bred over millennia <span class="keyword">for</span> companionship, protection, as well as <span class="keyword">for</span> superior sensory capabilities, and other useful behaviors.&quot;,</span><br><span class="line"></span><br><span class="line">&quot;child_ids&quot;: [&quot;/m/<span class="number">05</span>tny_&quot;, &quot;/m/<span class="number">07</span>r_k2n&quot;, &quot;/m/<span class="number">07</span>qf0zm&quot;, &quot;/m/<span class="number">07</span>rc7d9&quot;, &quot;/m/<span class="number">0</span>ghcn6&quot;, &quot;/t/dd00136&quot;, &quot;/m/<span class="number">07</span>srf8z&quot;],</span><br></pre></td></tr></table></figure>

<p>翻译：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&quot;id&quot;: &quot;/m/<span class="number">0</span>bt9lr&quot;,</span><br><span class="line"></span><br><span class="line">&quot;name&quot;: &quot;Dog&quot;,</span><br><span class="line"></span><br><span class="line">&quot;描述&quot;: &quot;任何来自熟悉的家养犬的声音，这种犬在数千年的选择性繁育中被培育用于陪伴、保护，以及卓越的感官能力和其他有用的行为。&quot;,</span><br><span class="line"></span><br><span class="line">&quot;child_ids&quot;: [&quot;/m/<span class="number">05</span>tny_&quot;, &quot;/m/<span class="number">07</span>r_k2n&quot;, &quot;/m/<span class="number">07</span>qf0zm&quot;, &quot;/m/<span class="number">07</span>rc7d9&quot;, &quot;/m/<span class="number">0</span>ghcn6&quot;, &quot;/t/dd00136&quot;, &quot;/m/<span class="number">07</span>srf8z&quot;],</span><br></pre></td></tr></table></figure>

<p>可见<code>Dog</code>标签是一个上层标签，子标签介绍如下，原版摘录：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&quot;id&quot;: &quot;/m/<span class="number">05</span>tny_&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Bark&quot;,</span><br><span class="line">&quot;description&quot;: &quot;Principal communication sound produced by dogs. Often transliterated as woof, especially <span class="keyword">for</span> large dogs.&quot;</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>r_k2n&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Yip&quot;,</span><br><span class="line">&quot;description&quot;: &quot;A sharp high-pitched bark or cry, typically from a miniature dog.&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>qf0zm&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Howl&quot;,</span><br><span class="line">&quot;description&quot;: &quot;The long plaintive cry of a dog, wolf, or other canidae.&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>rc7d9&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Bow-wow&quot;,</span><br><span class="line">&quot;description&quot;: &quot;Dog communication sound that is <span class="built_in">more</span> tonal and less abrupt than a classic bark.&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">0</span>ghcn6&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Growling&quot;,</span><br><span class="line">&quot;description&quot;: &quot;A low, guttural vocalization produced by animals as a warning, a sign of aggression, or to express anger.&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/t/dd00136&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Whimper (dog)&quot;,</span><br><span class="line">&quot;description&quot;: &quot;Muted dog vocalization indicating submission, fear, or pain.&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>srf8z&quot;,</span><br><span class="line">&quot;name&quot;: &quot;Bay&quot;,</span><br><span class="line">&quot;description&quot;: &quot;The sound made by a hound on the scent.&quot;,</span><br></pre></td></tr></table></figure>

<p>翻译：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&quot;id&quot;: &quot;/m/<span class="number">05</span>tny_&quot;,</span><br><span class="line">&quot;name&quot;: &quot;吠声&quot;,</span><br><span class="line">&quot;description&quot;: &quot;狗发出的主要交流声音，常被音译为“汪”，特别是对于大型犬。&quot;</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>r_k2n&quot;,</span><br><span class="line">&quot;name&quot;: &quot;尖叫&quot;,</span><br><span class="line">&quot;description&quot;: &quot;一种尖锐的高音吠声或叫声，通常来自迷你犬。&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>qf0zm&quot;,</span><br><span class="line">&quot;name&quot;: &quot;嚎叫&quot;,</span><br><span class="line">&quot;description&quot;: &quot;狗、狼或其他犬科动物发出的悠长哀鸣。&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>rc7d9&quot;,</span><br><span class="line">&quot;name&quot;: &quot;汪汪声&quot;,</span><br><span class="line">&quot;description&quot;: &quot;一种狗的交流声音，比经典的吠声更具音调感且不那么突然。&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">0</span>ghcn6&quot;,</span><br><span class="line">&quot;name&quot;: &quot;低吼&quot;,</span><br><span class="line">&quot;description&quot;: &quot;一种低沉、喉音的发声，由动物发出以示警告、表现攻击性或表达愤怒。&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/t/dd00136&quot;,</span><br><span class="line">&quot;name&quot;: &quot;呻吟 (dog)&quot;,</span><br><span class="line">&quot;description&quot;: &quot;低声的狗叫，表示顺从、恐惧或疼痛。&quot;,</span><br><span class="line"></span><br><span class="line">&quot;id&quot;: &quot;/m/<span class="number">07</span>srf8z&quot;,</span><br><span class="line">&quot;name&quot;: &quot;嗥声&quot;,</span><br><span class="line">&quot;description&quot;: &quot;猎犬追踪气味时发出的声音。&quot;,</span><br></pre></td></tr></table></figure>

<p>好，现在知道这些对应信息了，那怎么获取Youtube视频ID呢？两种方式：</p>
<ul>
<li><p>在这个页面直接搜，比如<code>bark</code>：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/bark.jpg" class="">

<p>点击进去可以看到一些有用信息：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/bark1.jpg" class="">

<p>再往下拉会看到一系列视频，以第一视频为例：</p>
<img src="/2025/01/16/AudioSet%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/bark2.jpg" class="">

<p>可以看到下方有一系列标签，视频的播放位置也是人为标定的开始点，直接右键<code>复制视频的url</code>即得到了<code>url</code>，开始时间为<code>10s</code>结束时间为<code>19s</code>，但这种方式只适合获取少量音频，如果下载大量数据会极大的浪费人力。</p>
</li>
<li><p>使用上文提到的<code>csv文件</code>，配合python脚本批量下载。</p>
<p>我打算使用这个方案下载<code>Dog</code>标签的音频，实际使用时，非平衡训练集需要人为重新筛选。</p>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://research.google/blog/announcing-audioset-a-dataset-for-audio-event-research/">https://research.google/blog/announcing-audioset-a-dataset-for-audio-event-research/</a></li>
<li><a href="https://research.google.com/audioset///dataset/index.html">https://research.google.com/audioset///dataset/index.html</a></li>
<li><a href="https://research.google.com/audioset/">https://research.google.com/audioset/</a></li>
<li><a href="https://research.google.com/audioset///ontology/index.html">https://research.google.com/audioset///ontology/index.html</a></li>
<li><a href="https://research.google.com/audioset///download.html">https://research.google.com/audioset///download.html</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp">https://github.com/yt-dlp/yt-dlp</a></li>
<li><a href="https://github.com/yt-dlp/yt-dlp/issues/10927">https://github.com/yt-dlp/yt-dlp/issues/10927</a></li>
<li><a href="https://www.bilibili.com/opus/976869609795747864">https://www.bilibili.com/opus/976869609795747864</a></li>
</ol>
]]></content>
      <categories>
        <category>dataset</category>
      </categories>
      <tags>
        <tag>classification</tag>
        <tag>dataset</tag>
      </tags>
  </entry>
  <entry>
    <title>LSTM-FCN论文总结</title>
    <url>/2025/01/14/LSTM-FCN/</url>
    <content><![CDATA[<p><em><strong>论文名：LSTM Fully Convolutional Networks for Time Series Classification</strong></em></p>
<p><em><strong>作者：Fazle Karim1 , Somshubra Majumdar2 , Houshang Darabi1 and Shun Chen</strong></em></p>
<p><em><strong>年份：2017</strong></em></p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><b>全卷积神经网络（FCN）</b>已经被证明在分类时间序列的任务上可取得最先进的性能。我们提出了利用<strong>LSTM</strong>子模块来增强<strong>FCN</strong>以进行时间序列分类。我们提出的方法显著增加了<strong>FCN</strong>的表现，模型大小只增加了一点，并且仅需对数据集进行很小的预处理。与其他算法相比，<strong>LSTM-FCN</strong>取得了最先进的性能。我们还使用<strong>注意长短期记忆全卷积网络（ALSTM-FCN）<strong>探索注意力机制在时序分类上的表现。通过注意力机制，人们可以可视化</strong>LSTM</strong>记忆单元的决策过程。此外，我们提出微调作为提升已训练好模型表现的一种方式。最后对我们的模型进行了整体表现的分析并与其他技术进行比较。</p>
<p><em><strong>Keywords：</strong></em> <em><strong>CNN</strong></em>, <em><strong>LSTM</strong></em>, <em><strong>RNN</strong></em>, <em><strong>时序分类</strong></em></p>
<hr>
<span id="more"></span>

<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​		在过去的十年里，人们对时间序列分类的兴趣越来越大。时间序列数据无处不在，存在于天气读数、财务记录、工业观察和心理信号[1]中。本文提出了两种深度学习模型来分类时间序列数据集，它们的性能都优于现有的最先进的模型。</p>
<p>​		大量的研究已经使用基于特征的方式或方法来提取一组代表时间序列模式的特征。Bag-of-Words（BoW）[2]，Bag-of-features（TSBF）[3]，Bag-of-SFA-Symbols（BOSS）[4]，BOSSVS [5]，Word提取时间序列分类（WEASEL）[6]，已经在该领域取得了良好的结果。Bag-of-words量化提取的特征，并将BoW输入分类器。TSBF提取随机局部信息的多个子序列，由监督学习者将其压缩成一本用于预测时间序列标签的食谱。BOSS引入了一个基于距离的分类器和直方图的组合。直方图代表了使用符号傅里叶近似创建的时间序列的子结构。BOSSVS扩展了这种方法，提出了一个向量空间模型，在保持性能的同时降低了时间复杂度。WEASEL利用滑动窗口将时间序列转换为特征向量。机器学习算法利用这些特征向量来检测和分类时间序列。所有这些分类器都需要大量的特征提取和特征工程。</p>
<p>​		集成算法在时序分类问题上也取得了先进的性能表现。三种最成功的集成算法合并时间序列的各种特征，Elastic Ensemble (PROP)[7]是一种使用加权集成方法集成了11个时间序列分类器的模型，Shapelet ensemble (SE) [8]是一种将异构集合应用于变换后的形状集的模型，flat collective of transform based ensembles (COTE) [8]是一种融合35种不同分类器到一个分类器的模型。</p>
<p>​		最近，深度神经网络被用于时间序列分类任务。多尺度卷积神经网络（MCNN）[9]、全卷积网络（FCN）[10]和残差网络（ResNet）[10]是利用卷积神经网络（CNN）对单变量时间序列进行端到端分类的深度学习方法。MCNN使用降采样、跳过采样和滑动窗口对数据进行预处理。MCNN分类器的性能高度依赖于应用于数据集的预处理和对该模型的大量超参数集的调整。另一方面，FCN和ResNet不需要对数据或特征工程进行任何繁重的预处理。在本文中，我们通过扩张FCN模块的方式来提高FCN的性能，扩张FCN模块的方式为长短期递归神经网络（LSTM RNN）子模块LSTM-FCN或称为ALSTM-FCN的结合注意力机制的LSTM RNN。与FCN类似，所提出的两个模型都可以用于可视化卷积层的类激活图（CAM），以检测贡献于类标签的区域。此外，ALSTM还可以通过Attention LSTM单元的上下文向量来检测输入序列中贡献于类标签的区域。LSTM-FCN和ALSTM-FCN模型的一个主要优点是，它不需要大量的预处理或特征工程。结果表明，新提出的模型，LSTM-FCN和ALSTMFCN，显著提高了加州大学河滨分校（UCR）基准数据集[11]的性能。在大多数UCR基准数据集上，LSTMFCN和ALSTM-FCN比几种最先进的集成算法产生更好的结果。</p>
<p>​		本文提出了两种端端时间序列分类的深度学习模型。所提出的模型不需要对数据或特征工程进行大量的预处理。这两种模型都在所有85个UCR时间序列基准测试上进行了测试，其性能优于大多数最先进的模型。本文的其余部分组织如下。第二节回顾了背景工作。第三节介绍了所提出的模型的体系结构。第四节，对上述实验结果进行了分析和讨论。最后，在第五节中得出了结论。</p>
<hr>
<h2 id="背景工作"><a href="#背景工作" class="headerlink" title="背景工作"></a>背景工作</h2><h3 id="A-时域卷积"><a href="#A-时域卷积" class="headerlink" title="A 时域卷积"></a>A 时域卷积</h3><p>​		我们使用时域卷积网络作为一个全卷积网络（FCN）分支中的特征提取模块。基本卷积块由卷积层组成，然后是批归一化[13]，然后是激活函数，它可以是校正线性单元（ReLU）或参数校正线性单元（PRELU）[14]。</p>
<h3 id="B-RNNs"><a href="#B-RNNs" class="headerlink" title="B RNNs"></a>B RNNs</h3><p>…</p>
<h3 id="C-LSTM"><a href="#C-LSTM" class="headerlink" title="C LSTM"></a>C LSTM</h3><p>​		虽然lstm具有学习序列中的时间依赖的能力，但它们在长序列中难以学习长期依赖。通过学习这些依赖关系而提出的注意机制[18]可以帮助LSTM学习长期依赖。</p>
<h3 id="D-注意力机制"><a href="#D-注意力机制" class="headerlink" title="D 注意力机制"></a>D 注意力机制</h3><p>…</p>
<blockquote>
<p>此处原理部分后续博客进行图文讲解。</p>
</blockquote>
<hr>
<h2 id="LSTM-FCN"><a href="#LSTM-FCN" class="headerlink" title="LSTM-FCN"></a>LSTM-FCN</h2><h3 id="A-网络架构"><a href="#A-网络架构" class="headerlink" title="A.网络架构"></a>A.网络架构</h3><p>​		时域卷积已被证明是解决时间序列分类问题[10]的一种有效的学习模型。由时域卷积组成的全卷积网络通常被用作特征提取器，全局平均池[19]用于在分类前减少模型中的参数量。在所提出的模型中，全卷积块增加了一个LSTM块，然后是dropout[20]，如图1所示。</p>
<img src="/2025/01/14/LSTM-FCN/tu1.jpg" class="" title="LSTM-FCN architecture LSTM-FCN architecture">

<p>​		全卷积块由三个堆叠的时域卷积块组成，滤波器大小分别为128、256和128。每个卷积块都与Wang等人[10]提出的CNN体系结构中的卷积块相同。每个块由一个时域卷积层组成，它伴随着批归一化[13]（动量momentum为0.99，速度epsilon为0.001），然后是一个ReLU激活函数。最后，在最终的卷积块之后应用全局平均池化。</p>
<p>​		同时，时间序列输入被传递到一个维度洗牌层（在III-B节中解释）。然后将从维度洗牌转换后的时间序列传递到LSTM块中。LSTM块包括一个一般的LSTM层或一个注意的LSTM层，然后是一个dropout。全局池化层和LSTM块的输出被连接并传递到一个softmax分类层。</p>
<h3 id="B-网络输入"><a href="#B-网络输入" class="headerlink" title="B.网络输入"></a>B.网络输入</h3><p>​		全卷积块和LSTM块在两个不同的视图中感知相同的时间序列输入。全卷积块将时间序列视为具有多个时间步长的单变量时间序列。如果有一个长度为N的时间序列，则全卷积块将以N个时间步长接收数据。</p>
<p>​		相反，该架构中的LSTM块接收输入的时间序列作为一个具有单个时间步长的多元时间序列。这是通过维度洗牌层来完成的，它改变了时间序列的时间维度。一个长度为N的单变量时间序列，经过变换后，将被视为一个具有单一时间步长的多元时间序列（有N个变量）。</p>
<p>​		这种方法是提高所提体系架构的性能表现的关键。相比之下，当LSTM块接收到具有N个时间步长的单变量时间序列时，由于对小的短序列UCR数据集的快速过拟合以及在较大的长序列UCR数据集中无法学习长期依赖关系，性能显著降低。</p>
<h3 id="C-模型的微调"><a href="#C-模型的微调" class="headerlink" title="C.模型的微调"></a>C.模型的微调</h3><p>​		迁移学习是一种技术，在另一个数据集上训练模型时，在数据集上训练模型所获得的知识可以重用，这样新数据集的域与先验域[21]有一定的相似性。类似地，微调可以被描述为在同一数据集上的迁移学习。</p>
<p>​		因此，训练过程可以分为两个不同的阶段。在初始阶段，为给定的数据集选择模型的最优超参数。然后使用这些超参数设置在给定的数据集上训练模型。在第二步中，我们对这个初始模型应用微调。</p>
<p>​		使用原始数据集，在微调阶段迭代迁移学习的过程。每次重复都使用上一次迭代的模型权重进行初始化。在每次迭代中，学习率都会减半。此外，每次迭代将批量大小减半。这样做，直到初始学习速率是1e−4，批处理大小是32。这个过程重复K次，其中K是一个任意的常数，一般设为5。</p>
<img src="/2025/01/14/LSTM-FCN/table1.jpg" class="" title="Fine-tuning algorithm Fine-tuning algorithm">

<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>​		该模型已在所有85个UCR时间序列数据集[11]上进行了测试。在所有实验中，FCN块都保持不变。通过对8~128个记忆单元的超参数搜索，得到了LSTM记忆单元cell的最佳数量。训练期的数量通常在2000个epochs保持不变，但在算法需要更长时间才能收敛的数据集上会增加epochs。初始batch size为128，在微调算法的每次连续迭代时减半。在使用LSTM或ALSTM层后，使用80%的高dropout来防止过拟合。类别不平衡问题通过一个受King等人[22]启发的类别加权方案进行处理。</p>
<p>​		所有模型均通过Adam优化器[23]进行训练，初始学习率为1e−3，最终学习率为1e−4。所有的卷积内核都用由He等人. [24]提出的初始化方法。如果验证得分没有提高，那么每100个epoches让学习率lr降低$1&#x2F;\sqrt[3]{2}$，直到达到最终的学习率。没有对UCR数据集进行额外的预处理，因为它们接近0均值和单位方差。所有模型都进行了微调，表I中所述的分数是指模型在微调前后获得的分数。</p>
<h3 id="A-评价指标"><a href="#A-评价指标" class="headerlink" title="A.评价指标"></a>A.评价指标</h3><p>​		在本文中，我们使用Wang等人[10]所述的精度、基于秩的统计数据和每类误差的平均值来对该模型进行了评估。</p>
<p>​		使用的基于秩的评估是算术秩、几何秩和威尔克森符号秩检验。算术秩是数据集的秩的算术平均值。几何秩是每个数据集的秩的几何平均值。采用威尔科克森符号秩检验来比较所提模型与现有模型的最先进模型的中值秩。原假设和备择假设如下：<br>$$<br>H_o: \text{Median}<em>{\text{proposed model}} &#x3D; \text{Median}</em>{\text{state-of-the-art model}} \<br>H_a: \text{Median}<em>{\text{proposed model}} \neq \text{Median}</em>{\text{state-of-the-art model}}<br>$$<br>​		平均每类误差（Mean Per Class Error，MPCE）定义为每类误差（PCE）的算术平均值，<br>$$<br>PCE_k &#x3D; \frac{1 - \text{accuracy}}{\text{number of unique classes}} \<br>MPCE &#x3D; \frac{1}{K} \sum PCE_k.<br>$$</p>
<h3 id="B-Results"><a href="#B-Results" class="headerlink" title="B. Results"></a>B. Results</h3><p>​		图2是在“CBF”数据集上的ALSTM记忆单元的可视化表示的一个例子。图中序列被“压缩”在一起的点是所有类具有相同权重的点。这些是时间序列中注意力LSTM可以正确识别类的点。通过对实际时间序列的目视检查，进一步支持了这一点。挤压点是每个类可以相互区分的点，如图2所示。</p>
<p>​		表i总结了UCR数据集上的性能。彩色单元格是优于该数据集的最先进模型的单元格。所提出的模型，ALSTM-FCN模型和LSTMFCN模型，在两个阶段，没有微调（阶段1）和微调（阶段2），在至少43个数据集上优于最先进的模型。图3中的平均算术排名表明了我们提出的模型优于现有的最先进的模型。使用Wilcoxon符号秩检验进一步验证了这一点，其中与现有的最先进的模型相比，每个提出的模型的p值都小于0.05，表2。</p>
]]></content>
      <categories>
        <category>theory</category>
      </categories>
      <tags>
        <tag>classification</tag>
      </tags>
  </entry>
  <entry>
    <title>LSTM-FCN代码解析</title>
    <url>/2025/01/22/LSTM-FCN%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://caihaoran-00.github.io/2025/01/14/LSTM-FCN/">前面</a>我们介绍了<a href="https://arxiv.org/abs/1709.05206">LSTM-FCN</a>的论文内容，本文我们开始代码撰写和介绍。</p>
<span id="more"></span>

<hr>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，从<code>Github</code>搜索<code>LSTM-FCN</code>，会看到一系列与之相关的结果，第一个就是<a href="https://github.com/titu1994/LSTM-FCN">官方实现</a>，但其是基于<code>keras</code>的，我喜欢使用<code>pytorch</code>，向下翻一翻，看到两个<code>pytorch</code>的实现，<a href="https://github.com/roytalman/LSTM-FCN-Pytorch">roytalman&#x2F;LSTM-FCN-Pytorch</a>和<a href="https://github.com/flaviagiammarino/lstm-fcn-pytorch">flaviagiammarino&#x2F;lstm-fcn-pytorch</a>，下面就参考这三个实现用pytorch进行LSTM-FCN的实现。</p>
<p>第一步还是先跑通官方的实现吧，先更改下<code>requirement.txt</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">tensorflow</span><br><span class="line">keras</span><br><span class="line">scipy</span><br><span class="line">numpy</span><br><span class="line">pandas</span><br><span class="line">scikit-learn</span><br><span class="line">h5py</span><br><span class="line">matplotlib</span><br><span class="line">joblib</span><br></pre></td></tr></table></figure>

<p>然后依次运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/titu1994/LSTM-FCN.git</span><br><span class="line"></span><br><span class="line">conda create -n LSTM_FCN python=3.8</span><br><span class="line"></span><br><span class="line">conda activate LSTM_FCN</span><br><span class="line"></span><br><span class="line">pip install -r requirement.txt</span><br></pre></td></tr></table></figure>

<p>然后下载官方所用的<a href="https://www.cs.ucr.edu/%7Eeamonn/time_series_data_2018/">UCR2018版</a>，这个（2015版）压缩包的解压密码是<code>attempttoclassify</code>，运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">unzip UCRArchive_2018.zip</span><br></pre></td></tr></table></figure>

<p>这时候会让你输入密码，输入：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">someone</span><br></pre></td></tr></table></figure>

<p>即可解压，如果下载的是<a href="https://www.cs.ucr.edu/~eamonn/time_series_data/">UCR2015版</a>，<strong>删除重下!</strong>（手动狗头），如果你想看看2015版的内容，上面的两行命令替换成：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">unzip UCR_TS_Archive_2015.zip</span><br><span class="line"></span><br><span class="line">attempttoclassify</span><br></pre></td></tr></table></figure>

<p>然后，将<code>LSTM-FCN/utils</code>目录下的<code>extract_all_datasets.py</code>复制到你解压后的文件夹中，运行这个文件:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">python extract_all_datasets.py</span><br></pre></td></tr></table></figure>

<p>即可提取文本：</p>
<p>在你的解压后的文件夹中会多一个<code>_data</code>目录，这就是提取出来的文本：</p>
<p>将提取出来的全部文本放在<code>LSTM-FCN/Data</code>目录下就做完了准备工作。</p>
<hr>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>打开<code>LSTM-FCN/all_datasets_training.py</code>，开炮！好的，哑火了，先看看代码吧：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install scikit-image</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/titu1994/LSTM-FCN">https://github.com/titu1994/LSTM-FCN</a></li>
<li><a href="https://github.com/roytalman/LSTM-FCN-Pytorch">https://github.com/roytalman/LSTM-FCN-Pytorch</a></li>
<li><a href="https://github.com/flaviagiammarino/lstm-fcn-pytorch">https://github.com/flaviagiammarino/lstm-fcn-pytorch</a></li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>classification</tag>
      </tags>
  </entry>
  <entry>
    <title>MobaXterm连接公司服务器部署ASR环境</title>
    <url>/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于目前ASR服务是部署在我的ubuntu主机上的，我司的测试人员已完成基本的功能测试，接下来要进行压力测试，故需要在压测环境（与线上正式环境配置一致）上部署该服务，很多年前用的是Xshell，搜了下SSH工具，现在貌似<strong>MobaXterm</strong>较为主流，看看这个工具怎么样吧。本文介绍使用MobaXterm连接公司服务器部署FunASR环境。</p>
<span id="more"></span>

<hr>
<h2 id="MobaXterm安装"><a href="#MobaXterm安装" class="headerlink" title="MobaXterm安装"></a><strong>MobaXterm</strong>安装</h2><ol>
<li><p>打开<a href="https://github.com/RipplePiam/MobaXterm-Chinese-Simplified/releases">这个页面</a></p>
</li>
<li><p>下拉到这个位置，点击如图箭头所示</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250217191454432.png" class="" title="image-20250217191454432">
</li>
<li><p>下载完成后，解压，点击解压后的文件夹中的.exe</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250217191613244.png" class="" title="image-20250217191613244">
</li>
<li><p>你将会看到这个页面</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250217191716869.png" class="" title="image-20250217191716869"></li>
</ol>
<hr>
<h2 id="MobaXterm使用"><a href="#MobaXterm使用" class="headerlink" title="MobaXterm使用"></a>MobaXterm使用</h2><ol>
<li><p>双击箭头所示<strong>User sessions</strong></p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250217194559990.png" class="" title="image-20250217194559990">
</li>
<li><p>点击<strong>SSH</strong>，输入你的<strong>远程主机IP</strong>和<strong>用户名（可选）</strong>,点击<strong>OK</strong></p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218100113480.png" class="" title="image-20250218100113480">
</li>
<li><p>会提示你是第一次连接这个服务器，勾选<strong>不再显示此消息</strong>，再点击<strong>Accept</strong></p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218100317993.png" class="" title="image-20250218100317993">
</li>
<li><p>输入密码</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/1739844404437.jpg" class="" width="1739844404437">
</li>
<li><p>保存密码</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/1739844573632.png" class="" width="1739844573632">
</li>
<li><p>保存存储的密码，暂时不知道什么地方会用到，先设置上吧</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218112948823.png" class="" title="image-20250218112948823">
</li>
<li><p>现在就进去服务器了，可按你的自身需求操作了</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218113108960.png" class="" title="image-20250218113108960"></li>
</ol>
<hr>
<h2 id="安装FunASR"><a href="#安装FunASR" class="headerlink" title="安装FunASR"></a>安装FunASR</h2><p><a href="https://github.com/modelscope/FunASR/blob/main/runtime/docs/SDK_advanced_guide_online_zh.md">参考</a></p>
<ul>
<li><p>进入服务器的&#x2F;opt，运行<code>docker --version</code>查看有没有安装docker</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218113940922.png" class="" title="image-20250218113940922">
</li>
<li><p>先通过<code>docker --version</code>确认服务器上有没有安装docker（一般都有），（如果没有就安装下）再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker pull \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/funasr_repo/funasr:funasr-runtime-sdk-online-cpu-0.1.12</span><br></pre></td></tr></table></figure>

<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218115349721.png" class="" title="image-20250218115349721">
</li>
<li><p>运行<code>sudo docker images</code>查看是否有这个镜像</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218115509797.png" class="" title="image-20250218115509797">
</li>
<li><p>依次运行下面两条命令进入docker内部：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ./funasr-runtime-resources/models</span><br><span class="line"><span class="built_in">sudo</span> docker run -p 10096:10095 -it --privileged=<span class="literal">true</span> \</span><br><span class="line">  -v <span class="variable">$PWD</span>/funasr-runtime-resources/models:/workspace/models \</span><br><span class="line">  registry.cn-hangzhou.aliyuncs.com/funasr_repo/funasr:funasr-runtime-sdk-online-cpu-0.1.12 </span><br></pre></td></tr></table></figure>

<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218120001291-1739851203375-3.png" class="" title="image-20250218120001291">
</li>
<li><p>依次运行下面两条命令启动<code>funasr-wss-server-2pass</code>服务程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> FunASR/runtime</span><br><span class="line"></span><br><span class="line"><span class="built_in">nohup</span> bash run_server_2pass.sh \</span><br><span class="line">  --certfile 0 \</span><br><span class="line">  --download-model-dir /workspace/models \</span><br><span class="line">  --vad-dir damo/speech_fsmn_vad_zh-cn-16k-common-onnx \</span><br><span class="line">  --model-dir damo/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-onnx  \</span><br><span class="line">  --online-model-dir damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-online-onnx  \</span><br><span class="line">  --punc-dir damo/punc_ct-transformer_zh-cn-common-vad_realtime-vocab272727-onnx \</span><br><span class="line">  --lm-dir damo/speech_ngram_lm_zh-cn-ai-wesp-fst \</span><br><span class="line">  --itn-dir thuduj12/fst_itn_zh \</span><br><span class="line">  --hotword /workspace/models/hotwords.txt &gt; log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>想实时查看<code>log.txt</code>可运行<code>tail -f log.txt</code>实时查看日志信息。</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218141211559.png" class="" title="image-20250218141211559">

<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218142324573.png" class="" title="image-20250218142324573">

<p>到这里FunASR服务端就启动好了，下面用官方提供的客户端连接看下效果。</p>
</li>
</ul>
<hr>
<h2 id="FunASR客户端连接"><a href="#FunASR客户端连接" class="headerlink" title="FunASR客户端连接"></a>FunASR客户端连接</h2><p>点击<a href="https://github.com/modelscope/FunASR/blob/main/runtime/docs/SDK_tutorial_online_zh.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3">这里</a>下载示例客户端，下面以html网页版为例：</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218142549399.png" class="" title="image-20250218142549399">

<p>注意事项：</p>
<ul>
<li><p>nohup启动FunASR服务时如果指定了<code>--certfile 0</code>，即关闭ssl，那么asr服务器地址就以ws开头，否则以wss开头</p>
</li>
<li><p>端口（10096）是<code>docker run -p</code>启动docker镜像时指定的端口</p>
</li>
<li><p>2pass是指先进行实时语音识别，VAD检测到一小段结束后，就用非实时语音识别再做一次语音识别，用该结果替换掉原实时语音识别的结果，以兼顾实时性和准确性</p>
</li>
<li><p>ITN旨在将识别到的文本转换成一个更加标准化、可读的形式，特别是在处理数字、日期、时间、货币等信息时。</p>
</li>
<li><p>设置完之后点击连接，再点击开始，即可通过麦克风实时语音识别，结果在服务器端也有显示</p>
<img src="/2025/02/17/MobaXterm%E8%BF%9E%E6%8E%A5%E5%85%AC%E5%8F%B8%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2ASR%E7%8E%AF%E5%A2%83/image-20250218143446847.png" class="" title="image-20250218143446847">
</li>
<li><p>这种方式启动的docker容器，无论是关掉SSH连接还是exit退出容器，都会停止掉docker容器，即会停掉服务，想关掉SSH连接或exit退出容器，但容器不停止怎么做，有个其他事，先忙好再来更：</p>
<p>TODO…</p>
</li>
</ul>
<p>OK，完毕，建议搭配参考链接食用。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://github.com/modelscope/FunASR/blob/main/runtime/docs/SDK_advanced_guide_online_zh.md">https://github.com/modelscope/FunASR/blob/main/runtime/docs/SDK_advanced_guide_online_zh.md</a></li>
</ol>
]]></content>
      <categories>
        <category>code</category>
        <category>theory</category>
      </categories>
      <tags>
        <tag>ASR</tag>
        <tag>MobaXterm</tag>
        <tag>FunASR</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>cursor接入DeepSeek-R1和DeepSeek-V3教程</title>
    <url>/2025/02/06/cursor%E6%8E%A5%E5%85%A5DeepSeek-R1%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前（2025&#x2F;2&#x2F;6），deepseek大火，超低训练成本取得了超高的性能表现，且cursor现已不能无限白嫖（锁机器码），想充值cursor还要申请个海外信用卡，本人对信用卡比较抵触，遂还是使用deepseek接入的方式吧。想申请海外信用卡的小友可参考<a href="https://www.youtube.com/watch?v=Ag5918UY-CM">这个视频</a>操作。</p>
<span id="more"></span>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><img src="/2025/02/06/cursor%E6%8E%A5%E5%85%A5DeepSeek-R1%E6%95%99%E7%A8%8B/image-20250206141315961.png" class="" title="image-20250206141315961">

<p><a href="https://api-docs.deepseek.com/zh-cn/news/news250120">图片来源</a>，从上图可以看出，<code>DeepSeek-R1</code>拥有比肩<code>OpenAI o1</code>的性能，且比<code>DeepSeek-V3</code>更强些，价格方面：</p>
<img src="/2025/02/06/cursor%E6%8E%A5%E5%85%A5DeepSeek-R1%E6%95%99%E7%A8%8B/image-20250206141754281.png" class="" title="image-20250206141754281">

<p><a href="https://api-docs.deepseek.com/zh-cn/quick_start/pricing">图片来源</a>，但是<code>DeepSeek-V3</code>比<code>DeepSeek-R1</code>价格要便宜的多，所以我打算两种模型都接入<code>cursor</code>实验效果。</p>
<p>好，开始操作：</p>
<img src="/2025/02/06/cursor%E6%8E%A5%E5%85%A5DeepSeek-R1%E6%95%99%E7%A8%8B/image-20250206142750109.png" class="" title="image-20250206142750109">

<p><a href="https://api-docs.deepseek.com/zh-cn/">图片来源</a></p>
<ul>
<li><p>打开<code>cursor设置</code>-&gt;<code>Models</code>-&gt;取消掉所有模型的勾选</p>
</li>
<li><p>点击<code>Model Names</code>栏最下面的<code>+Add model</code>，先添加<code>DeepSeek-V3</code>，输出<code>deepseek-chat</code></p>
</li>
<li><p>点击上方图片所示的<code>API key</code>-&gt;<code>创建API key</code>-&gt;<code>输入名称：deepseek-chat</code>，你将得到<code>API key:sk-xxxx....</code>，复制下来</p>
</li>
<li><p>在下方的<code>Override OpenAI Base URL(when using key)</code>栏中输入：<code>https://api.deepseek.com/v1</code></p>
</li>
<li><p>点击<code>Override OpenAI Base URL(when using key)</code>栏右方的<code>Save</code>，点击<code>OpenAI API Key</code>右方的<code>Verify</code>，你将看到：</p>
<img src="/2025/02/06/cursor%E6%8E%A5%E5%85%A5DeepSeek-R1%E6%95%99%E7%A8%8B/image-20250206143959966.png" class="" title="image-20250206143959966"></li>
</ul>
<p>好，实验一下：</p>
<p>不对劲，非常不对劲，由于现在deepseek依旧服务器压力很大（被攻击），后续再试吧。</p>
<p>TODO…</p>
<h2 id="试试魔法："><a href="#试试魔法：" class="headerlink" title="试试魔法："></a>试试魔法：</h2><ul>
<li>点击<a href="https://github.com/bestK/cursor-fake-machine/releases/download/v0.0.2/cursor-fake-machine-0.0.2.vsix">这里</a>下载插件</li>
<li>将下载的插件拖到cursor扩展中</li>
<li><code>ctrl+shift+p</code>输入<code>fake</code>，选择<code>Fake Cursor</code>，会提示你重启<code>cursor</code>，重启之后就能用了</li>
<li>进入<code>C:\Users\chr\AppData\Roaming\Cursor\User\globalStorage</code>文件夹，找到<code>storage.json</code>，右键属性，将其改为只读</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.bilibili.com/video/BV1uVrCYEE1W/?vd_source=075a061948e76c87e2ee8754e264056e">https://www.bilibili.com/video/BV1uVrCYEE1W/?vd_source=075a061948e76c87e2ee8754e264056e</a></li>
<li><a href="https://blog.csdn.net/qq_43592352/article/details/145020410">https://blog.csdn.net/qq_43592352/article/details/145020410</a></li>
</ol>
]]></content>
      <categories>
        <category>theory</category>
      </categories>
      <tags>
        <tag>cursor</tag>
        <tag>deepseek</tag>
      </tags>
  </entry>
  <entry>
    <title>LLamaFactory微调Qwen2.5VL</title>
    <url>/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录在本地ubuntu电脑上（一张4090）用LLamaFactory微调Qwen2.5 VL，用做笔记及分享。</p>
<span id="more"></span>

<hr>
<h2 id="安装LLamaFactory"><a href="#安装LLamaFactory" class="headerlink" title="安装LLamaFactory"></a>安装LLamaFactory</h2><p><a href="https://github.com/hiyouga/LLaMA-Factory/blob/main/README_zh.md#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">参考</a>，运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/hiyouga/LLaMA-Factory.git</span><br><span class="line"><span class="built_in">cd</span> LLaMA-Factory</span><br><span class="line"></span><br><span class="line">conda create -n llamafactory  python=3.10</span><br><span class="line">conda activate llamafactory</span><br><span class="line">pip install -e <span class="string">&quot;.[torch,metrics]&quot;</span></span><br></pre></td></tr></table></figure>

<p>经过漫长等待即可完成环境下载。</p>
<p>注意后面微调时会提示<code>KeyError:&#39;qwen2_5_vl&#39;</code>，解决办法，<a href="https://github.com/hiyouga/LLaMA-Factory/issues/6784#issuecomment-2647135280">参考</a>：</p>
<ol>
<li><p>源码构建方式安装transforms：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install git+https://github.com/huggingface/transformers.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>注释掉src&#x2F;llamafactory&#x2F;extras&#x2F;misc.py的第97行：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># check_version(<span class="string">&quot;transformers&gt;=4.41.2,&lt;=4.48.3,!=4.46.0,!=4.46.1,!=4.46.2,!=4.46.3,!=4.47.0,!=4.47.1,!=4.48.0&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="下载模型文件（使用魔搭方法）"><a href="#下载模型文件（使用魔搭方法）" class="headerlink" title="下载模型文件（使用魔搭方法）"></a>下载模型文件（使用魔搭方法）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://www.modelscope.cn/Qwen/Qwen2.5-VL-7B-Instruct.git</span><br></pre></td></tr></table></figure>

<p>其他模型可在这个<a href="https://modelscope.cn/models">页面</a>查找及下载。下载完成后（漫长等待），打开这个<a href="https://modelscope.cn/models/Qwen/Qwen2.5-VL-7B-Instruct/files">页面</a>肉眼对比下文件数量和大小。</p>
<hr>
<h2 id="原始模型直接推理"><a href="#原始模型直接推理" class="headerlink" title="原始模型直接推理"></a>原始模型直接推理</h2><p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llamafactory-cli webchat examples/inferece/qwen2_5_vl.yaml</span><br></pre></td></tr></table></figure>

<p><code>examples/inference/qwen2_5_vl.yaml</code> 的配置示例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">model_name_or_path: /home/chr/桌面/llamafactory/Qwen2.5-VL-7B-Instruct</span><br><span class="line">template: qwen2_vl</span><br><span class="line">infer_backend: huggingface <span class="comment">#choices： [huggingface, vllm]</span></span><br><span class="line">trust_remote_code: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<img src="/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/direct.png" class="" title="2575232de302bc2a7c3fb9bec121134">

<hr>
<h2 id="自定义数据集"><a href="#自定义数据集" class="headerlink" title="自定义数据集"></a>自定义数据集</h2><p>LLamafactory目前支持alpaca和sharegpt两种格式，以alpaca为例，整个数据集是一个json对象的list，具体数据格式为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户指令（必填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户输入（选填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;模型回答（必填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统提示词（选填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;history&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="string">&quot;第一轮指令（选填）&quot;</span><span class="punctuation">,</span> <span class="string">&quot;第一轮回答（选填）&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="string">&quot;第二轮指令（选填）&quot;</span><span class="punctuation">,</span> <span class="string">&quot;第二轮回答（选填）&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>比如单轮（alpaca_data_zh_51k.json 中的例子, 数据集在data&#x2F;dataset_info.json中注册为alpaca_zh）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;写一个有效的比较语句&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;篮球和足球&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;篮球和足球都是受欢迎的运动。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>和多轮 （oaast_sft_zh.json 中的例子, 数据集在data&#x2F;dataset_info.json中注册为oaast_sft_zh）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;谢谢&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不用谢! 很高兴我提供的信息能够帮助到你! 如果还有什么其他问题也可以向我提问。&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;history&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;请你给我写一个面试准备计划，我想要去面试微软的程序员岗位&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;首先，你可以去微软官网寻找招聘信息并申请面试。\n其次，您可以在社交媒体平台寻找微软公司对程序员的面试问题，并做好准备。\n最后，您可以自己对面试过程进行模拟，熟悉话题并减少紧张感。\n我希望你能面试成功。&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>所以我们训练的数据最好也转换成这种格式，然后在 data&#x2F;dataset_info.json中<strong>进行注册</strong>（如果不做字段名称转换，则需要在注册的时候在 columns字段中做两个数据的映射配置）</p>
<p><strong>接下来，我们使用两个具体的例子来说明数据集的使用</strong></p>
<p>第一个是系统自带的identity.json数据集(已默认在data&#x2F;dataset_info.json 注册为identity)，对应文件已经在data目录下，我们通过操作系统的文本编辑器的替换功能，可以替换其中的NAME 和 AUTHOR ，换成我们需要的内容。如果是linux系统，可以使用<strong>sed</strong> 完成快速替换。比如助手的名称修改为PetNet， 由fy开发：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/&#123;&#123;name&#125;&#125;/PetNet/g&#x27;</span>  data/identity.json </span><br><span class="line">sed -i <span class="string">&#x27;s/&#123;&#123;author&#125;&#125;/fy/g&#x27;</span>  data/identity.json</span><br></pre></td></tr></table></figure>

<p>替换前：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Who are you?&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello! I am &#123;&#123;name&#125;&#125;, an AI assistant developed by &#123;&#123;author&#125;&#125;. How can I assist you today?&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>替换后：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Who are you?&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I am PetNet, an AI assistant developed by fy. How can I assist you today?&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>第二个是一个商品文案生成数据集，<a href="https://cloud.tsinghua.edu.cn/f/b3f119a008264b1cabd1/?dl=1">原始链接</a></p>
<p>原始格式如下，很明显，训练目标是输入content （也就是prompt）, 输出 summary （对应response）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;类型#裤*版型#宽松*风格#性感*图案#线条*裤型#阔腿裤&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;summary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;宽松的阔腿裤这两年真的吸粉不少，明星时尚达人的心头爱。毕竟好穿时尚，谁都能穿出腿长2米的效果宽松的裤腿，当然是遮肉小能手啊。上身随性自然不拘束，面料亲肤舒适贴身体验感棒棒哒。系带部分增加设计看点，还让单品的设计感更强。腿部线条若隐若现的，性感撩人。颜色敲温柔的，与裤子本身所呈现的风格有点反差萌。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>想将该自定义数据集放到我们的系统中使用，则需要进行如下两步操作：</p>
<ol>
<li><p>复制该数据集到 data目录下</p>
</li>
<li><p>修改 data&#x2F;dataset_info.json 新加内容完成注册, 该注册同时完成了3件事</p>
<ul>
<li><p>自定义数据集的名称为adgen_local，后续训练的时候就使用这个名称来找到该数据集</p>
</li>
<li><p>指定了数据集具体文件位置</p>
</li>
<li><p>定义了原数据集的输入输出和我们所需要的格式之间的映射关系</p>
</li>
</ul>
<img src="/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/image-20250219095449804.png" class="" title="image-20250219095449804"></li>
</ol>
<hr>
<h2 id="基于LoRA的sft指令微调"><a href="#基于LoRA的sft指令微调" class="headerlink" title="基于LoRA的sft指令微调"></a>基于LoRA的sft指令微调</h2><p>现在准备好数据集了，可以开始训练了，我们的目的是让原来的Qwen2.5 VL模型学会我们定义的“你是谁”，同时学会我们希望的商品文案的生成。</p>
<p>我们先从命令行版本做训练，以便于学习其中的相关原理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 llamafactory-cli train \</span><br><span class="line">    --stage sft \</span><br><span class="line">    --do_train \</span><br><span class="line">    --model_name_or_path /home/chr/桌面/llamafactory/Qwen2.5-VL-7B-Instruct \</span><br><span class="line">    --dataset alpaca_gpt4_zh,identity,adgen_local \</span><br><span class="line">    --dataset_dir ./data \</span><br><span class="line">    --template qwen2_vl \</span><br><span class="line">    --finetuning_type lora \</span><br><span class="line">    --output_dir ./saves/Qwen2.5-VL-7B-Instruct/lora/sft \</span><br><span class="line">    --overwrite_cache \</span><br><span class="line">    --overwrite_output_dir \</span><br><span class="line">    --cutoff_len 1024 \</span><br><span class="line">    --preprocessing_num_workers 16 \</span><br><span class="line">    --per_device_train_batch_size 2 \</span><br><span class="line">    --per_device_eval_batch_size 1 \</span><br><span class="line">    --gradient_accumulation_steps 8 \</span><br><span class="line">    --lr_scheduler_type cosine \</span><br><span class="line">    --logging_steps 50 \</span><br><span class="line">    --warmup_steps 20 \</span><br><span class="line">    --save_steps 100 \</span><br><span class="line">    --eval_steps 50 \</span><br><span class="line">    --evaluation_strategy steps \</span><br><span class="line">    --load_best_model_at_end \</span><br><span class="line">    --learning_rate 5e-5 \</span><br><span class="line">    --num_train_epochs 5.0 \</span><br><span class="line">    --max_samples 1000 \</span><br><span class="line">    --val_size 0.1 \</span><br><span class="line">    --plot_loss</span><br></pre></td></tr></table></figure>

<img src="/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/e6c1ceaa980c6ca5d13b41f06dafa2f.png" class="" title="e6c1ceaa980c6ca5d13b41f06dafa2f">

<img src="/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/61d444e63e300a4f8e57636aa4aa9e0.png" class="" title="61d444e63e300a4f8e57636aa4aa9e0">

<img src="/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/60c478373b620ec976f2236e553ad14.png" class="" title="60c478373b620ec976f2236e553ad14">

<hr>
<h2 id="动态合并LoRA的推理"><a href="#动态合并LoRA的推理" class="headerlink" title="动态合并LoRA的推理"></a>动态合并LoRA的推理</h2><p>我们基于LoRA的训练进程结束后，想做下动态验证，与上文的原始模型直接推理相比，唯一的区别是需要通过finetuning_type参数告诉系统，我们使用了LoRA训练，然后将LoRA的模型位置通过 adapter_name_or_path参数即可。</p>
<p><code>qwen2_5_vl_lora.yaml</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">model_name_or_path: /home/chr/桌面/llamafactory/Qwen2.5-VL-7B-Instruct</span><br><span class="line">template: qwen2_vl</span><br><span class="line">adapter_name_or_path: ./saves/Qwen2.5-VL-7B-Instruct/lora/sft</span><br><span class="line">finetuning_type: lora</span><br><span class="line">infer_backend: huggingface <span class="comment">#choices： [huggingface, vllm]</span></span><br><span class="line">trust_remote_code: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llamafactory-cli webchat examples/inferece/qwen2_5_vl_lora.yaml</span><br></pre></td></tr></table></figure>

<img src="/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/abda935ed8d70e23525b287792cea49.png" class="" title="abda935ed8d70e23525b287792cea49">

<p>好了，可以看出微调是有效的。</p>
<hr>
<h2 id="数据集解析"><a href="#数据集解析" class="headerlink" title="数据集解析"></a>数据集解析</h2><p>上面略微解释了自定义数据集，本节着重归纳总结下数据集的格式。</p>
<p>首先，看下LLamaFactory官方对<code>dataset_info.json</code>文件的定义规范：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;数据集名称&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;hf_hub_url&quot;</span>: <span class="string">&quot;Hugging Face 的数据集仓库地址（若指定，则忽略 script_url 和 file_name）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ms_hub_url&quot;</span>: <span class="string">&quot;ModelScope 的数据集仓库地址（若指定，则忽略 script_url 和 file_name）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;script_url&quot;</span>: <span class="string">&quot;包含数据加载脚本的本地文件夹名称（若指定，则忽略 file_name）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;file_name&quot;</span>: <span class="string">&quot;该目录下数据集文件夹或文件的名称（若上述参数未指定，则此项必需）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;formatting&quot;</span>: <span class="string">&quot;数据集格式（可选，默认：alpaca，可以为 alpaca 或 sharegpt）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ranking&quot;</span>: <span class="string">&quot;是否为偏好数据集（可选，默认：False）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;subset&quot;</span>: <span class="string">&quot;数据集子集的名称（可选，默认：None）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;split&quot;</span>: <span class="string">&quot;所使用的数据集切分（可选，默认：train）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;folder&quot;</span>: <span class="string">&quot;Hugging Face 仓库的文件夹名称（可选，默认：None）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;num_samples&quot;</span>: <span class="string">&quot;该数据集所使用的样本数量。（可选，默认：None）&quot;</span>,</span><br><span class="line">  <span class="string">&quot;columns（可选）&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prompt&quot;</span>: <span class="string">&quot;数据集代表提示词的表头名称（默认：instruction）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: <span class="string">&quot;数据集代表请求的表头名称（默认：input）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;response&quot;</span>: <span class="string">&quot;数据集代表回答的表头名称（默认：output）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;history&quot;</span>: <span class="string">&quot;数据集代表历史对话的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;messages&quot;</span>: <span class="string">&quot;数据集代表消息列表的表头名称（默认：conversations）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;system&quot;</span>: <span class="string">&quot;数据集代表系统提示的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tools&quot;</span>: <span class="string">&quot;数据集代表工具描述的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;images&quot;</span>: <span class="string">&quot;数据集代表图像输入的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;videos&quot;</span>: <span class="string">&quot;数据集代表视频输入的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;audios&quot;</span>: <span class="string">&quot;数据集代表音频输入的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;chosen&quot;</span>: <span class="string">&quot;数据集代表更优回答的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rejected&quot;</span>: <span class="string">&quot;数据集代表更差回答的表头名称（默认：None）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kto_tag&quot;</span>: <span class="string">&quot;数据集代表 KTO 标签的表头名称（默认：None）&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tags（可选，用于 sharegpt 格式）&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;role_tag&quot;</span>: <span class="string">&quot;消息中代表发送者身份的键名（默认：from）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content_tag&quot;</span>: <span class="string">&quot;消息中代表文本内容的键名（默认：value）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user_tag&quot;</span>: <span class="string">&quot;消息中代表用户的 role_tag（默认：human）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;assistant_tag&quot;</span>: <span class="string">&quot;消息中代表助手的 role_tag（默认：gpt）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;observation_tag&quot;</span>: <span class="string">&quot;消息中代表工具返回结果的 role_tag（默认：observation）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;function_tag&quot;</span>: <span class="string">&quot;消息中代表工具调用的 role_tag（默认：function_call）&quot;</span>,</span><br><span class="line">    <span class="string">&quot;system_tag&quot;</span>: <span class="string">&quot;消息中代表系统提示的 role_tag（默认：system，会覆盖 system column）&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，结合<code>dataset_info.json</code>，学习下<code>dataset_info.json</code>的写法。</p>
<h3 id="一、alpaca-指令监督微调数据集"><a href="#一、alpaca-指令监督微调数据集" class="headerlink" title="一、alpaca 指令监督微调数据集"></a>一、alpaca 指令监督微调数据集</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;identity&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;identity.json&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">identity.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;instruction&quot;</span>: <span class="string">&quot;hi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;output&quot;</span>: <span class="string">&quot;Hello! I am &#123;&#123;name&#125;&#125;, an AI assistant developed by &#123;&#123;author&#125;&#125;. How can I assist you today?&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>归纳：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;数据集名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;instruction&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;input&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> <span class="string">&quot;output&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;history&quot;</span><span class="punctuation">:</span> <span class="string">&quot;history&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类指令（必填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类输入（选填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;模型回答（必填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统提示词（选填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;history&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">[</span><span class="string">&quot;第一轮指令（选填）&quot;</span><span class="punctuation">,</span> <span class="string">&quot;第一轮回答（选填）&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">[</span><span class="string">&quot;第二轮指令（选填）&quot;</span><span class="punctuation">,</span> <span class="string">&quot;第二轮回答（选填）&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>有个问题：人类指令和人类输入的区别和联系是什么：</p>
<ul>
<li>人类指令instruction是任务的核心，决定模型要做什么，通常是明确的操作或目标（必填）</li>
<li>人类输入input是任务的具体内容，为指令提供上下文或详细信息，使模型能针对特定内容生成响应，未填写则回复通用回答（选填）</li>
</ul>
<p>例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">alpaca_zh_demo.json </span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请根据以下文章构建一个需要回答的问题。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我不好意思，您没有提供任何信息或文章来供我根据它构建问题。 请提供相应的文章或信息，以便我能够帮助您构建问题。&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根据下表，将每个句子分类为定义、事实或观点。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;|句子|\n|--------|\n|水果是一种通常甜味且含有种子的食物类别。|\n|苹果是一种水果。|\n|苹果是口感最好的水果。|&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;|句子|分类|\n|--------|-----|\n|水果是一种通常甜味且含有种子的食物类别。|定义|\n|苹果是一种水果。|事实|\n|苹果是口感最好的水果。|观点|&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;写一首四行诗，主题是自然。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;青山绿水美如画，\n晨霞晚霞常换档。\n花香鸟语自然谧，\n四季交替更生长。&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输入三支篮球队的名称并生成一个适当的口号。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输入：俄克拉荷马城雷霆队，芝加哥公牛队，布鲁克林网队。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输出： \&quot;雷霆，公牛和网队：各显神通，角逐群雄!\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;比较以下两位著名人物，使用特征列表并以句子形式提供输出。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人物1：阿尔伯特·爱因斯坦\n人物2：斯蒂芬·霍金\n特征：智力、教育、对世界的影响&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;阿尔伯特·爱因斯坦和斯蒂芬·霍金都是拥有极其出色智力的人物。两人都取得过非常高的教育成就，他们推进了科学发展并在世界范围内产生了深远的影响。爱因斯坦以其相对论和质能关系公式而闻名，而霍金以其关于黑洞和宇宙的发现而著称。两位科学家都以其深厚的学识和非凡的贡献影响了世界。&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生成一个算法，找到并显示两个文本字符串之间的最长公共子串。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;输入：\n字符串1：This is an example\n字符串2：This string should contain the example&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;算法：动态规划\n\n```python\ndef longest_common_substring(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    result = 0\n    end = 0\n    # 创建一个(m+1)x(n+1)的二维数组来表示最长公共子串的长度\n    length = [[0] * (n + 1) for i in range(m + 1)]\n    # 填充数组\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                length[i][j] = length[i - 1][j - 1] + 1\n                if length[i][j] &gt; result:\n                    result = length[i][j]\n                    end = i - 1\n    return s1[end - result + 1:end + 1]\n\n\ns1 = &#x27;This is an example&#x27;\ns2 = &#x27;This string should contain the example&#x27;\nprint(longest_common_substring(s1, s2))\n```\n\n输出：example\n\n解释：\n\n1. 创建一个二维数组，将其所有元素初始化为0。\n2. 通过双层循环遍历两个字符串，当字符相同时在对角线上加1。\n3. 找到最大值，并记录最大值所在的行和列。\n4. 由于我们是从1开始遍历字符串的，所以结果要减一才是真正的索引。\n\n时间复杂度：O(m*n)\n\n空间复杂度：O(m*n)&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="小变体1"><a href="#小变体1" class="headerlink" title="小变体1"></a>小变体1</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;alpaca_en&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_en&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ms_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_en&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;om_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HaM/alpaca_en&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alpaca_zh&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ms_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_zh&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alpaca_gpt4_en&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_gpt4_en&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ms_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_gpt4_en&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alpaca_gpt4_zh&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_gpt4_zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ms_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/alpaca_gpt4_zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;om_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;State_Cloud/alpaca-gpt4-data-zh&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>与第一类类似，只是数据是从网站上下载，而不是从本地加载。</p>
<h4 id="小变体2"><a href="#小变体2" class="headerlink" title="小变体2"></a>小变体2</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;adgen_train&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HasturOfficial/adgen&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ms_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AI-ModelScope/adgen&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;split&quot;</span><span class="punctuation">:</span> <span class="string">&quot;train&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> <span class="string">&quot;summary&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;adgen_eval&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HasturOfficial/adgen&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ms_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AI-ModelScope/adgen&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;split&quot;</span><span class="punctuation">:</span> <span class="string">&quot;validation&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;response&quot;</span><span class="punctuation">:</span> <span class="string">&quot;summary&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>使用split参数指定所使用的数据集切分（可选，默认：train）。</p>
<hr>
<h3 id="二、sharegpt-指令监督微调数据集"><a href="#二、sharegpt-指令监督微调数据集" class="headerlink" title="二、sharegpt 指令监督微调数据集"></a>二、sharegpt 指令监督微调数据集</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;glaive_toolcall_zh_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;glaive_toolcall_zh_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>相当于:</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;glaive_toolcall_zh_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;glaive_toolcall_zh_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;from&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;user_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assistant_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;observation_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;observation&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;function_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function_call&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;system_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">glaive_toolcall_zh_demo.json</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;conversations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我需要为John Doe生成一张发票。他购买了2个苹果，每个$1，以及3根香蕉，每根$0.5。&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function_call&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;name\&quot;: \&quot;generate_invoice\&quot;, \&quot;arguments\&quot;: &#123;\&quot;customer_name\&quot;: \&quot;约翰·多伊\&quot;, \&quot;items\&quot;: [&#123;\&quot;name\&quot;: \&quot;苹果\&quot;, \&quot;quantity\&quot;: 2, \&quot;price\&quot;: 1&#125;, &#123;\&quot;name\&quot;: \&quot;香蕉\&quot;, \&quot;quantity\&quot;: 3, \&quot;price\&quot;: 0.5&#125;]&#125;&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;observation&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;invoice_id\&quot;: \&quot;INV12345\&quot;, \&quot;customer_name\&quot;: \&quot;约翰·多伊\&quot;, \&quot;items\&quot;: [&#123;\&quot;name\&quot;: \&quot;苹果\&quot;, \&quot;quantity\&quot;: 2, \&quot;price\&quot;: 1, \&quot;total\&quot;: 2&#125;, &#123;\&quot;name\&quot;: \&quot;香蕉\&quot;, \&quot;quantity\&quot;: 3, \&quot;price\&quot;: 0.5, \&quot;total\&quot;: 1.5&#125;], \&quot;total\&quot;: 3.5, \&quot;status\&quot;: \&quot;生成\&quot;&#125;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发票已成功生成。发票编号为INV12345。约翰·多伊的总金额为$3.5。发票包含2个苹果，总金额为$2，以及3根香蕉，总金额为$1.5。&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[&#123;\&quot;name\&quot;: \&quot;generate_invoice\&quot;, \&quot;description\&quot;: \&quot;生成发票\&quot;, \&quot;parameters\&quot;: &#123;\&quot;type\&quot;: \&quot;object\&quot;, \&quot;properties\&quot;: &#123;\&quot;customer_name\&quot;: &#123;\&quot;type\&quot;: \&quot;string\&quot;, \&quot;description\&quot;: \&quot;客户名称\&quot;&#125;, \&quot;items\&quot;: &#123;\&quot;type\&quot;: \&quot;array\&quot;, \&quot;items\&quot;: &#123;\&quot;type\&quot;: \&quot;object\&quot;, \&quot;properties\&quot;: &#123;\&quot;name\&quot;: &#123;\&quot;type\&quot;: \&quot;string\&quot;, \&quot;description\&quot;: \&quot;The item name\&quot;&#125;, \&quot;quantity\&quot;: &#123;\&quot;type\&quot;: \&quot;integer\&quot;, \&quot;description\&quot;: \&quot;The quantity of the item\&quot;&#125;, \&quot;price\&quot;: &#123;\&quot;type\&quot;: \&quot;number\&quot;, \&quot;description\&quot;: \&quot;The price per unit\&quot;&#125;&#125;, \&quot;required\&quot;: [\&quot;name\&quot;, \&quot;quantity\&quot;, \&quot;price\&quot;]&#125;&#125;&#125;, \&quot;required\&quot;: [\&quot;customer_name\&quot;, \&quot;items\&quot;]&#125;&#125;, &#123;\&quot;name\&quot;: \&quot;generate_password\&quot;, \&quot;description\&quot;: \&quot;生成随机密码\&quot;, \&quot;parameters\&quot;: &#123;\&quot;type\&quot;: \&quot;object\&quot;, \&quot;properties\&quot;: &#123;\&quot;length\&quot;: &#123;\&quot;type\&quot;: \&quot;integer\&quot;, \&quot;description\&quot;: \&quot;密码的长度\&quot;&#125;&#125;, \&quot;required\&quot;: [\&quot;length\&quot;]&#125;&#125;]&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;conversations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;假设你有一个需要随机数的Java程序，范围在0到10之间。你可以使用什么代码片段来生成这样的数字？\n\n下面是一个示例代码片段，它使用Math.random()方法来生成一个在0到1之间的随机数，然后缩放并四舍五入结果，得到一个在0到10之间的随机数：\n\n```java\nint randomNumber = (int) (Math.random() * 11);\n```\n\n在Java中是否有更有效的方法来生成随机数？你会如何修改代码以生成具有不同范围或分布的随机数？&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;您提供的代码片段是Java中生成随机数的一种常见且高效的方法。然而，如果您需要对随机数生成有更多的控制，您可以使用java.util.Random类，它提供了更多生成随机数的选项。\n\n要生成一个在不同范围内的随机数，您可以修改代码以调整缩放因子。例如，要生成一个在1到10之间的随机数，您可以使用以下代码：\n\nint randomNumber = (int) (Math.random() * 10) + 1;\n\n要生成具有不同分布的随机数，您可以使用各种技术，如正态分布、指数分布或自定义分布。生成正态分布的一种方法是使用Box-Muller变换。这里有一个代码示例，它生成具有正态分布的随机数：\n\nRandom random = new Random();\ndouble u1 = random.nextDouble();\ndouble u2 = random.nextDouble();\ndouble z = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\ndouble mean = 5;\ndouble stdDev = 2;\nint randomNumber = (int) (z * stdDev + mean);\n\n这段代码生成一个具有均值5和标准差2的正态分布随机数。您可以调整均值和标准差来生成具有不同分布的随机数。&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你能解释一下算法分析中的大O记法概念吗？&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;是的，大O表示法是一种描述算法性能随输入数据大小增加的方法。它用于估计算法在最坏情况下的时间复杂度或空间复杂度。大O中的“O”代表“数量级”，这意味着随着输入大小的增加，算法所需的操作数以一定的速率增长。\n\n例如，如果我们有一个需要n步才能解决大小为n的问题的算法，那么时间复杂度可以表示为O(n)，这意味着操作数随着输入大小线性增长。如果我们有一个需要n^2步才能解决大小为n的问题的算法，那么时间复杂度可以表示为O(n^2)，这意味着操作数随着输入大小二次方增长。\n\n还有其他几种大O表示法，如O(log n)、O(n log n)、O(2^n)等，它们代表了随着输入大小增加的不同操作数增长速率。通过分析算法的大O表示法，我们可以比较不同算法的性能，并选择给定问题最有效的算法。\n\n您是否有关于大O表示法或算法分析的特定问题？&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[]&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p><strong>归纳：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;数据集名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;conversations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类指令&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;function_call&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具参数&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;observation&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具结果&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;模型回答&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统提示词（选填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工具描述（选填）&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h4 id="小变体1-1"><a href="#小变体1-1" class="headerlink" title="小变体1"></a>小变体1</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;mllm_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mllm_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;messages&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;role&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;user_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assistant_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mllm_audio_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mllm_audio_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;messages&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;audios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;audios&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;role&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;user_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assistant_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mllm_video_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mllm_video_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;messages&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;videos&quot;</span><span class="punctuation">:</span> <span class="string">&quot;videos&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;role&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;user_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assistant_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">mllm_demo.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;image&gt;Who are they?&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;They&#x27;re Kane and Gretzka from Bayern Munich.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;What are they doing?&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;They are celebrating on the soccer field.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;mllm_demo_data/1.jpg&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">mllm_audio_demo.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;audio&gt;What&#x27;s that sound?&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;It is the sound of glass shattering.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;audios&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;mllm_demo_data/1.mp3&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">mllm_video_demo.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;video&gt;Why is this video funny?&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Because a baby is reading, and he is so cute!&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;videos&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;mllm_demo_data/1.mp4&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>此类与第二类的区别有：</p>
<ul>
<li>conversations-&gt;messages</li>
<li>没有tools，但有audio&#x2F;imag&#x2F;video</li>
<li>tag标签，role_tag默认为from，所以第二类缺省，第三类需对应<code>role</code>（其余同理）。</li>
</ul>
<h4 id="小变体2-1"><a href="#小变体2-1" class="headerlink" title="小变体2"></a>小变体2</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json </span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;glaive_toolcall_en&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/glaive_toolcall_en&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;glaive_toolcall_zh&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/glaive_toolcall_zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lima&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/lima&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>与前文类似，只是数据是从网上下载。</p>
<h4 id="小变体3"><a href="#小变体3" class="headerlink" title="小变体3"></a>小变体3</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;llava_1k_en&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BUAADreamer/llava-en-zh-2k&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;messages&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;role&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;user_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assistant_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;llava_1k_zh&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;BUAADreamer/llava-en-zh-2k&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;messages&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="string">&quot;images&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;role&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;user_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assistant_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>通过subset选择数据集子集。</p>
<hr>
<h3 id="三、sharegpt-偏好数据集"><a href="#三、sharegpt-偏好数据集" class="headerlink" title="三、sharegpt 偏好数据集"></a>三、sharegpt 偏好数据集</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;dpo_zh_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dpo_zh_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ranking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chosen&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rejected&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dpo_zh_demo.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;conversations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请提供一下对香港银行业的分析以及目前面临的挑战。&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;香港银行业长期以来一直是该城市金融服务业和整体经济的重要组成部分。其特点是健全的监管框架、大量银行和资本流动的便利。以下分析涵盖了该行业面临的一些关键因素和当前挑战：\n\n1. 市场结构：香港银行业包括三类机构：持牌银行、受限牌照银行和接受存款公司。截至2021年4月，香港有160家持牌银行、19家受限牌照银行和13家接受存款公司。该行业由几家主要银行主导，汇丰银行、恒生银行、中国银行（香港）和渣打银行占据最大的市场份额。\n\n2. 监管框架：香港金融管理局负责监督银行体系的正常运作、稳定性和完整性。它通过实施法规和指导方针、监督持牌机构，并确保符合巴塞尔III等国际标准。\n\n3. 资本和流动性：香港银行保持强大的资本和流动性状况，资本比率远高于巴塞尔III标准设定的最低要求。这有助于该行业对经济冲击的稳定性和抵御能力。\n\n尽管具有这些优势，香港银行业目前面临着几个挑战：\n\n1. 经济放缓和中美贸易紧张局势：香港经济高度依赖贸易，受到中国内地经济放缓和中美贸易冲突的负面影响。这可能影响银行的贷款组合、信用质量和整体盈利能力。\n\n2. 低利率环境：由于全球经济衰退，世界各国央行一直采取宽松的货币政策，降低利率。香港银行受到影响，因为该市与美元挂钩的汇率制度导致净利差收窄和盈利能力降低。\n\n3. 地缘政治风险：香港实施国家安全法和美中紧张局势加剧引发了对该市银行业潜在影响的担忧，如制裁或国际银行撤离。\n\n4. 技术颠覆：金融科技和数字银行的兴起为香港银行业带来机遇和挑战。传统银行需要增强数字能力，投资创新技术以与新兴金融科技公司和虚拟银行竞争。\n\n5. 合规和监管变化：随着国际法规的演变，香港银行必须不断适应并遵守新规定，这可能耗时且成本高昂。此外，他们需要管理与反洗钱（AML）和打击恐怖融资（CFT）法规相关的风险。\n\n总之，香港银行业仍具有强大的基本面，但需要解决上述挑战，以在不断变化的全球格局中保持竞争力和稳定性。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;香港的银行业面临着诸多挑战，如低利率、高房价和经济疲软。新冠疫情也给该行业带来了压力，企业和消费者都在艰难度日。一些分析师建议政府可能需要采取措施，如降低贷款利率或向陷入困境的企业提供财政援助。\n\n尽管面临这些挑战，香港的银行业仍受到良好监管，消费者和企业对其信任度高。该行业还以其强调创新和采用新技术，如移动银行和数字支付而闻名。总体而言，香港银行业的前景仍然积极，但需要谨慎管理和关注持续发展。&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>这种是sharegpt格式的偏好数据集，偏好数据集用于奖励模型训练、DPO训练、ORPO训练和SimPO训练。</p>
<p>需要在chosen列中提供更优的消息，并在rejected列中提供更差的消息。</p>
<p>归纳：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;数据集名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ranking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chosen&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rejected&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;conversations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类指令&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;模型回答&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类指令&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;优质回答&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;劣质回答&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h3 id="四、alpaca-偏好数据集"><a href="#四、alpaca-偏好数据集" class="headerlink" title="四、alpaca 偏好数据集"></a>四、alpaca 偏好数据集</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;ultrafeedback&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hf_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/ultrafeedback_binarized&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ms_hub_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;llamafactory/ultrafeedback_binarized&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ranking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;instruction&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chosen&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rejected&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;In this task, you are given a second sentence. Your task is to generate the first sentence on the same topic but incoherent and inconsistent with the second sentence.\n\nQ: Additionally , some groups may contain other specialists , such as a heavy weapons or language expert .\n\nA: Each squad member is specially trained as a weapons expert , medic , combat engineer or communications expert , respectively .\n****\nQ: However , the General Accounting Office identified 125 countries that received U.S. training and assistance for their police forces during fiscal year 1990 at a cost of at least $117 million .\n\nA: No government agency is in charge of calculating the cost .\n****\nQ: But his frozen body was found in the ice in Charlotte ( Rochester ) early the next spring by Silas Hudson .\n\nA:&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Could you provide some context or information about what you are looking for or any particular questions you have, so I can assist better?&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;As an AI assistant, it&#x27;s essential to generate the first sentence on the same topic that may seem unrelated or inconsistent with the second sentence. Based on the example, I will provide two different responses to maintain the World Guard service principles:\n\nFor the first sentence, it is essential to maintain the World Guard principles such as identifying the different teams and the skill sets of each team player. The first sentence would be:\n\n\&quot;Intelligence gathering and operation teams consist of specialized personnel, including ghost operatives proficient in combat, communications, and espionage.\&quot;\n\nFor the second sentence, the inconsistency lies in the context of fiscal year and police training. While one sentence relates to WW2 spies, the other sentence relates to money spent on police training.\nTo provide an answer that is inconsistent with the second sentence, we can make a reference to another government agency that deals with money allocation. Thus, the WW2 spies sentence would be:\n\n\&quot;After the famous World War II event, during which spies called themselves &#x27;The World Guard,&#x27; the USA created a government agency called &#x27;The Department of Finance.&#x27; Their sole purpose was to monitor, regulate and control the fiscal year expenses made on various training and assistance programs, which help expand national capacities.\&quot;\n\nPlease let me know if you need any further assistance, and I would be happy to help!&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>这是alpaca格式的偏好数据集，归纳：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;数据集名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ranking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;instruction&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;input&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chosen&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rejected&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;instruction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类指令（必填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类输入（选填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chosen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;优质回答（必填）&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rejected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;劣质回答（必填）&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h3 id="五、sharegpt-KTO数据集"><a href="#五、sharegpt-KTO数据集" class="headerlink" title="五、sharegpt KTO数据集"></a>五、sharegpt KTO数据集</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;kto_en_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kto_en_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;messages&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;kto_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;label&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;role&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;content&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;user_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assistant_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The Federal Trade Commission is going after spyware, bits of computer code that install themselves on the computers of Internet users to track or disrupt their online activities.\nQ: Which is the best summary of this article?\nPick your answer from:\n(A). World\n(B). Sports\n(C). Business\n(D). Science/Tech\nI think the answer is&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ooh ooh ah ah! *giggle* Let me think... Ooh ooh ah ah! *giggle* The best summary of this article is... *drumroll*... D! Science/Tech! Yay! *confetti* The Federal Trade Commission is talking about spyware, which is like a little computer bug that can watch what you do on your computer without you knowing. It&#x27;s like a secret agent, but not a nice one! *gasp* The FTC wants to stop the spyware from doing its thing, so they&#x27;re going after it! *cheer* Woohoo!&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Compare and contrast the roles of the hippocampus and the prefrontal cortex in the human brain, discussing their involvement in memory processing and decision making.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The human brain is a highly complex organ, responsible for a myriad of cognitive functions, including memory processing and decision making. Two critical regions implicated in these processes are the hippocampus and the prefrontal cortex. While both structures play significant roles in these cognitive domains, they each contribute distinct functions that work in concert to facilitate our ability to navigate the world and make informed choices.\n\nThe hippocampus, located within the medial temporal lobe, is predominantly associated with the formation, consolidation, and retrieval of memories. Specifically, it plays a crucial role in episodic memory, which encompasses the storage and recollection of autobiographical events, as well as spatial memory, which pertains to the encoding and retrieval of spatial information. The hippocampus is vital for the formation of new memories and the integration of these memories into existing knowledge structures. It has been demonstrated that damage to the hippocampus can result in anterograde amnesia, a condition characterized by an inability to form new memories, while leaving previously consolidated memories intact.\n\nIn contrast, the prefrontal cortex, situated in the anterior portion of the frontal lobes, is primarily involved in executive functions, which include higher-order cognitive processes such as decision making, planning, reasoning, and inhibitory control. The prefrontal cortex is responsible for integrating information from various sources, evaluating potential outcomes, and selecting the most advantageous course of action. It is also implicated in working memory, which refers to the temporary storage and manipulation of information necessary for complex cognitive tasks. Damage to the prefrontal cortex can result in deficits in decision making, impulsivity, and poor judgment.\n\nWhile the hippocampus and prefrontal cortex have distinct roles, they are interconnected and work synergistically to facilitate memory processing and decision making. The hippocampus provides the prefrontal cortex with contextual information and episodic memories that inform decision-making processes. Conversely, the prefrontal cortex can modulate the hippocampus&#x27;s activity during memory encoding and retrieval, influencing the salience and organization of memories. This dynamic interplay between the two regions enables individuals to adapt their decision-making strategies based on past experiences and contextual information.\n\nIn summary, the hippocampus and prefrontal cortex are integral to memory processing and decision making, albeit with distinct contributions. The hippocampus is primarily implicated in the formation, consolidation, and retrieval of episodic and spatial memories, while the prefrontal cortex is responsible for executive functions, including decision making, planning, and working memory. The interplay between these two regions allows for the integration of past experiences and contextual information in guiding informed decision making and shaping our behavior.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Discuss the mechanisms through which the prefrontal cortex modulates the hippocampus&#x27;s activity during memory encoding and retrieval.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The prefrontal cortex (PFC) and the hippocampus have a dynamic relationship that allows for the modulation of memory encoding and retrieval. This interaction is facilitated by direct and indirect neural pathways that connect the two regions, allowing for bidirectional communication.\n\nDuring memory encoding, the PFC is thought to modulate hippocampal activity through top-down control. The PFC can selectively enhance or suppress the processing of sensory information in the hippocampus based on its relevance to the task at hand. This process, known as &#x27;attentional modulation&#x27;, allows the PFC to guide the hippocampus in encoding memories that are relevant and suppressing those that are not. This is crucial for the formation of goal-directed behaviors and for the efficient use of cognitive resources.\n\nIn addition to attentional modulation, the PFC also influences the hippocampus through &#x27;working memory&#x27; operations. Working memory, a temporary storage system for information, is largely mediated by the PFC. During memory encoding, the PFC can use this working memory to provide the hippocampus with a &#x27;preview&#x27; of the information that is to be encoded, allowing the hippocampus to prepare for the incoming information and encode it more efficiently.\n\nDuring memory retrieval, the PFC again plays a modulatory role. It is thought that the PFC can initiate the retrieval process by sending a &#x27;retrieval cue&#x27; to the hippocampus. This cue triggers the reactivation of the neural patterns associated with the memory, allowing for its retrieval. The PFC can also influence the focus of retrieval, determining whether the retrieval is broad (i.e., recalling the general gist of an event) or specific (i.e., recalling specific details).\n\nFurthermore, the PFC can modulate the emotional intensity of retrieved memories through its connections with the amygdala, a region involved in emotional processing. This can influence the subjective experience of the memory, affecting how it is perceived and responded to.\n\nIn summary, the PFC modulates hippocampal activity during memory encoding and retrieval through a variety of mechanisms, including attentional modulation, working memory operations, retrieval initiation, and emotional modulation. These processes allow the PFC to guide the hippocampus in encoding and retrieving memories in a way that is adaptive and efficient.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Can you elaborate on the role of the amygdala in modulating the emotional intensity of retrieved memories, and how this interaction with the prefrontal cortex influences our perception and response to these memories?&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The amygdala plays a crucial role in the emotional processing of stored memories. It is a small almond-shaped structure situated deep within the medial temporal lobes that consists of multiple nuclei involved in different aspects of emotional processing, including the establishment of emotional associations and hedonic reactions to stimuli. The amygdala interacts extensively with both the hippocampus and the prefrontal cortex (PFC) to modulate emotional responses to retrieved memories.\n\nThe emotional component of a memory is largely encoded through the amygdala&#x27;s interaction with the hippocampus during memory formation. When an emotionally significant event occurs, the hippocampus provides contextual and spatial aspects of the memory, while the amygdala assigns an emotional value or salience to the memory. The solidification of these emotional associations ensures that emotional information associated with a given memory is readily reactivated during memory retrieval.\n\nDuring memory retrieval, the PFC receives information about the emotional intensity of the memory through reciprocal connections with the amygdala. The PFC can then modulate the impact of emotional memories on behavior and cognitive processes by using top-down control. This regulation can influence how we experience and respond to retrieved memories.\n\nFor example, the PFC can enhance or diminish the emotional intensity associated with a retrieved memory. This modulation can result in increased or decreased arousal, as well as altered subjective feelings of pleasure, discomfort, or despair. Additionally, PFC involvement can affect the context in which a memory is reactivated, leading to changes in the emotional response. The PFC can prioritize and filter information based on the current context or goal, which may result in more suitable emotional responses or the suppression of inappropriate emotional reactions.\n\nMoreover, the amygdala, PFC, and hippocampus work together in the process of emotion regulation. The anterior cingulate cortex (ACC), a region that lies within the PFC, often interacts with the amygdala to create a \&quot;circuit breaker\&quot; for emotional responses. The ACC receives input from the amygdala indicating the emotional intensity and salience of a memory, and can then engage with the amygdala to reduce the emotional response. This mechanism allows an individual to react in a more rational and appropriate manner when faced with emotionally charged situations.\n\nIn summary, the amygdala&#x27;s role in modulating the emotional intensity of retrieved memories is crucial for engaging with the world in an adaptive and meaningful way. Through its interactions with the hippocampus and, most significantly, the prefrontal cortex, the amygdala influences our perception and response to memories, contributing to our emotional experience and behavior.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p><strong>翻译版本：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;美国联邦贸易委员会正在打击间谍软件，这些是能自行安装在互联网用户计算机上的计算机代码，用来跟踪或干扰他们的在线活动。\nQ: 哪个是这篇文章的最佳摘要？\n从以下选项中选择：\n(A). 世界\n(B). 体育\n(C). 商业\n(D). 科技\n我认为答案是&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;哦哦啊啊！*笑* 让我想想...哦哦啊啊！*笑* 这篇文章的最佳摘要是... *鼓声*... D！科技！耶！*彩带* 美国联邦贸易委员会正在讨论间谍软件，它就像一个小小的计算机病毒，可以偷偷观察你在电脑上做的事，但不是一个好心的秘密特工！*惊讶* 联邦贸易委员会想要阻止这些间谍软件做它们的坏事，所以他们正在对付它们！*欢呼* 哇哦！&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;比较和对比海马体和前额叶皮层在大脑中的作用，讨论它们在记忆处理和决策中的参与。&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类大脑是一个高度复杂的器官，负责多种认知功能，包括记忆处理和决策。海马体和前额叶皮层是两个在这些过程中的重要区域。尽管这两个结构在这些认知领域都发挥着重要作用，但它们各自的功能不同，并相互配合，帮助我们导航世界并做出明智的选择。\n\n海马体位于内侧颞叶，主要与记忆的形成、巩固和提取相关。具体来说，它在情景记忆中起着至关重要的作用，情景记忆包括自传性事件的存储和回忆，以及空间记忆，它涉及到空间信息的编码和提取。海马体对于新记忆的形成至关重要，并将这些记忆整合到现有的知识结构中。研究表明，海马体的损伤可能导致前向性健忘症，表现为无法形成新记忆，而已巩固的记忆仍然完好。\n\n相比之下，前额叶皮层位于大脑额叶的前部，主要涉及执行功能，包括更高层次的认知过程，如决策、计划、推理和抑制控制。前额叶皮层负责整合来自不同来源的信息，评估潜在结果，并选择最有利的行动方案。它还与工作记忆有关，工作记忆是指对信息的临时存储和操作，通常用于复杂的认知任务。前额叶皮层的损伤可能导致决策能力下降、冲动行为和判断力差。\n\n尽管海马体和前额叶皮层各自的功能不同，但它们是相互连接的，并且协同工作以促进记忆处理和决策。海马体向前额叶皮层提供情境信息和情景记忆，这些信息有助于决策过程。相反，前额叶皮层可以在记忆编码和提取过程中调节海马体的活动，影响记忆的显著性和组织。这种动态的相互作用使得个体能够根据过去的经验和情境信息调整决策策略。\n\n总之，海马体和前额叶皮层在记忆处理和决策中起着至关重要的作用，尽管它们各自的贡献不同。海马体主要与情景和空间记忆的形成、巩固和提取相关，而前额叶皮层则负责执行功能，包括决策、计划和工作记忆。两者之间的相互作用使得我们能够将过去的经验和情境信息结合起来，指导明智的决策和行为。&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;讨论前额叶皮层如何在记忆编码和提取过程中调节海马体的活动。&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前额叶皮层（PFC）和海马体之间的关系是动态的，它允许在记忆编码和提取过程中对海马体的活动进行调节。这种相互作用是通过直接和间接的神经通路连接两者，允许双向的交流。\n\n在记忆编码过程中，前额叶皮层通过自上而下的控制来调节海马体的活动。前额叶皮层可以根据任务的相关性，选择性地增强或抑制海马体对感觉信息的处理。这一过程称为“注意性调节”，它允许前额叶皮层引导海马体编码与任务相关的记忆，并抑制那些不相关的记忆。这对于形成目标导向的行为以及有效利用认知资源至关重要。\n\n除了注意性调节，前额叶皮层还通过“工作记忆”操作影响海马体。工作记忆是信息的临时存储系统，主要由前额叶皮层介导。在记忆编码过程中，前额叶皮层可以利用工作记忆为海马体提供即将编码的信息“预览”，从而帮助海马体更有效地准备并编码这些信息。\n\n在记忆提取过程中，前额叶皮层再次发挥调节作用。前额叶皮层被认为可以通过向海马体发送“提取线索”来启动提取过程。这些线索触发与记忆相关的神经模式的重新激活，从而实现记忆的提取。前额叶皮层还可以影响提取的重点，决定提取是广泛的（即回忆事件的总体内容）还是具体的（即回忆事件的细节）。\n\n此外，前额叶皮层还可以通过与杏仁体的连接调节提取记忆的情绪强度，杏仁体是与情绪处理相关的区域。这会影响对记忆的主观体验，从而改变人们对记忆的感知和反应。\n\n总之，前额叶皮层通过多种机制调节海马体在记忆编码和提取过程中的活动，包括注意性调节、工作记忆操作、提取启动和情绪调节。这些过程使得前额叶皮层能够引导海马体以一种适应性和高效的方式编码和提取记忆。&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是sharegpt格式的KTO数据集，归纳：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;conversations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;human&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类指令&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;模型回答&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;kto_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人类反馈 [true/false]（必填）&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;数据集名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;formatting&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sharegpt&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conversations&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;kto_tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kto_tag&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="六、alpaca预训练数据集"><a href="#六、alpaca预训练数据集" class="headerlink" title="六、alpaca预训练数据集"></a>六、alpaca预训练数据集</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;wiki_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wiki_demo.txt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;c4_demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c4_demo.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">wiki_demo.txt</span><br><span class="line">Anarchism is a political philosophy and movement that is sceptical of authority and rejects all involuntary...</span><br><span class="line"></span><br><span class="line">c4_demo.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Don’t think you need all the bells and whistles? No problem. McKinley Heating Service Experts Heating &amp; Air Conditioning offers basic air cleaners that work to improve the quality of the air in your home without breaking the bank. It is a low-cost solution that will ensure you and your family are living comfortably.\nIt’s a good idea to understand the efficiency rate of the filters, which measures what size of molecules can get through the filter. Basic air cleaners can filter some of the dust, dander and pollen that need to be removed. They are 85% efficient, and usually have a 6-inch cleaning surface.\nBasic air cleaners are not too expensive and do the job well. If you do want to hear more about upgrading from a basic air cleaner, let the NATE-certified experts at McKinley Heating Service Experts in Edmonton talk to you about their selection.\nEither way, now’s a perfect time to enhance and protect the indoor air quality in your home, for you and your loved ones.\nIf you want expert advice and quality service in Edmonton, give McKinley Heating Service Experts a call at 780-800-7092 to get your questions or concerns related to your HVAC system addressed.&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;To the apparent surprise of everyone, the Walt Disney Company has announced a deal to purchase Lucasfilm Ltd. According to the official press release, Disney has agreed to fork over $4.05 billion in cash and stock for George Lucas’ studio in a deal that brings together two of the world’s most important intellectual property libraries.\nAs you might expect, Disney is itching to take advantage of its new toys. “This transaction combines a world-class portfolio of content including Star Wars, one of the greatest family entertainment franchises of all time, with Disney’s unique and unparalleled creativity across multiple platforms, businesses, and markets to generate sustained growth and drive significant long-term value,” said Disney CEO Robert Iger in this afternoon’s announcement.\nUnder the terms of this agreement Disney will acquire control over all Lucasfilm iterations. This includes both its traditional film-making studio facilities, as well as the various technologies Lucasfilm has created over the years to further its various media properties. Thus, the gigantic Disney family now includes Lucasfilm itself, special effects house Industrial Light &amp; Magic, Skywalker Sound and LucasArts, the company’s video game creation division.\nThis acquisition alone would be huge news, but as if to pre-empt fan speculation on the future of Star Wars the same announcement also mentions that a new Star Wars movie is scheduled to appear in 2015. Though the vast majority of recent Star Wars media has been focused on the property’s various animated iterations and LEGO crossovers, this new film will be the first official cinematic continuation of George Lucas’ original Star Wars trilogy. Though very few details are offered on this film, it has officially been dubbed Star Wars: Episode VII, and barring any major catastrophes it should hit theaters at some point in 2015 (if we had to guess, we’d assume an early summer release in keeping with the tradition established by its predecessors).\nPerhaps even more intriguing however, is the announcement’s claim that Episode VII’s release will herald a new era in which new Star Wars movies hit theaters “every two to three years.” It specifically mentions Episodes VIII and IX by name, though offers no solid details on either film.\nWhile the effects of the move won’t be fully known for at least a few months, we can think of a number of a things this new union might change. For instance, currently Dark Horse Comics publishes all Star Wars comic books, but with Disney owning Marvel Comics we can’t see that agreement lasting for long. Likewise, both Disney and Lucasfilm have sizable divisions dedicated to creating video games based on their various media properties. Normally these companies have had to seek outside publishing agreements, but now that they’ve joined forces and massively expanded the number of games either company is capable of releasing in any given year, it makes a lot of sense for Disney to invest in its own games publishing wing.\nFinally, this agreement almost certainly heralds future crossovers between Disney and Lucasfilm characters. We don’t know any specifics, but it’s only a matter of time before we see toys depicting Mickey Mouse dressed as Darth Vader. Whether that sounds awesome or stomach-churningly disgusting is entirely up to your rapidly waning sense of childhood whimsy.\nUpdate: Scratch that last prediction. Apparently Disney characters dressed as Star Wars characters is already a thing.\nOur partnership with LucasFilm has produced over 20 yrs worth of stories. We have Star Wars for the near future, and hope for years to come.&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>由例子可见，预训练数据集只用于学习语言模型，目前llamafactory只支持alpaca格式的预训练集，归纳：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">dataset_info.json</span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;数据集名称&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;columns&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prompt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><p>llamafactory提供了通用能力评估和NLG评估，使用方法见<a href="https://llamafactory.readthedocs.io/zh-cn/latest/getting_started/eval.html#id1">链接</a>，这里解释下什么是通用能力评估以及什么是NLG评估</p>
<ul>
<li><p>通用能力评测关注大模型在多个任务上的泛化能力，常用于衡量大模型是否具备<strong>推理、数学、知识问答、代码生成等多方面能力</strong>。LLamafactory提供了mmlu，cmmlu, ceval三个常见数据集的自动评测脚本。</p>
<table>
<thead>
<tr>
<th>数据集</th>
<th>语言</th>
<th>任务类型</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>MMLU</strong></td>
<td>英文</td>
<td>多任务、多领域知识</td>
<td>评测大模型的英文知识与推理能力</td>
</tr>
<tr>
<td><strong>CMMU</strong></td>
<td>中文</td>
<td>多任务、多领域知识</td>
<td>评测大模型的中文知识与推理能力</td>
</tr>
<tr>
<td><strong>CEval</strong></td>
<td>中文</td>
<td>学术、专业知识</td>
<td>更专业的中文能力评测（涉及高难度任务）</td>
</tr>
</tbody></table>
</li>
<li><p>NLG方面提供了BLEU和ROUGE分数评价模型生成质量，<strong>BLEU</strong>（Bilingual Evaluation Understudy）：计算n-gram匹配率，常用于机器翻译评测。<strong>ROUGE</strong>（Recall-Oriented Understudy for Gisting Evaluation）：主要用于文本摘要任务，计算n-gram召回率。</p>
</li>
</ul>
<p>那如果想评估纵向领域的微调效果怎么办？</p>
<ul>
<li>用基准测试集（如 MMLU、CEval、MedQA）测准确率，提高数值指标</li>
<li>用自动指标（如 BLEU、BERTScore、FactScore）评估生成内容质量</li>
<li>结合人工评测+真实用户测试，确保专业领域的实际可用性</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ol>
<li><p>我看alpaca和sharegpt都有指令监督微调数据集和偏好数据集，那么我应该选哪个呢？</p>
<p>todo…</p>
</li>
<li><p>偏好数据集用于奖励模型训练、DPO训练、ORPO训练和SimPO训练，解释下这些术语以及Pre-train，SFT：</p>
<p>它们都是<strong>大模型训练的方法</strong>，可以理解为<strong>让 AI 变聪明的不同步骤</strong>。</p>
<p>我们可以把训练过程想象成<strong>培养一个优秀的学生</strong>，分为三个阶段：</p>
<ol>
<li><strong>基础学习</strong>（预训练 Pre-Training）</li>
<li><strong>学会听人话</strong>（SFT + 奖励建模 Reward Modeling）</li>
<li><strong>学会更符合人类喜好</strong>（PPO、DPO、KTO、ORPO、SimPO）</li>
</ol>
<hr>
<h3 id="Pre-Training（预训练）——-基础学习"><a href="#Pre-Training（预训练）——-基础学习" class="headerlink" title="Pre-Training（预训练）—— 基础学习"></a>Pre-Training（预训练）—— 基础学习</h3><blockquote>
<p>让 AI <strong>从零开始学习知识，相当于小孩上学</strong>。</p>
</blockquote>
<ul>
<li>AI 在<strong>大规模数据</strong>（比如书籍、论文、网站）上进行<strong>无监督学习</strong>，学习语法、常识、逻辑等。</li>
<li>这个阶段 AI <strong>还不会听人话</strong>，它只是学到了很多<strong>碎片化的知识</strong>。</li>
<li>例如：GPT-4、Llama-3 这些模型都经历了预训练阶段。</li>
</ul>
<p>📝 <strong>你可以理解成：AI 在上小学，疯狂看书，但不会对话。</strong></p>
<hr>
<h3 id="SFT（Supervised-Fine-Tuning，监督微调）——-学会听人话"><a href="#SFT（Supervised-Fine-Tuning，监督微调）——-学会听人话" class="headerlink" title="SFT（Supervised Fine-Tuning，监督微调）—— 学会听人话"></a>SFT（Supervised Fine-Tuning，监督微调）—— 学会听人话</h3><blockquote>
<p>让 AI <strong>按照人类的方式回答问题，相当于中学阶段的老师手把手教学</strong>。</p>
</blockquote>
<ul>
<li>用<strong>人类标注的数据</strong>（例如 ShareGPT、Alpaca）微调模型，让 AI <strong>学会按照人类的方式回答问题</strong>。</li>
<li>让 AI 更加<strong>符合特定任务</strong>，比如医学问答、法律咨询、编程助手等。</li>
<li>这个阶段 AI <strong>会听人话了，但还不一定懂得哪些回答是更好的</strong>。</li>
</ul>
<p>📝 <strong>相当于：AI 进入中学，老师告诉它哪些回答是正确的，但它还不能区分好坏回答。</strong></p>
<hr>
<h3 id="Reward-Modeling（奖励建模）——-训练-AI-评判好坏"><a href="#Reward-Modeling（奖励建模）——-训练-AI-评判好坏" class="headerlink" title="Reward Modeling（奖励建模）—— 训练 AI 评判好坏"></a>Reward Modeling（奖励建模）—— 训练 AI 评判好坏</h3><blockquote>
<p>让 AI <strong>知道哪些答案是好答案，哪些是坏答案，相当于 AI 参加考试，学习评分标准</strong>。</p>
</blockquote>
<ul>
<li>训练一个<strong>奖励模型（Reward Model, RM）</strong>，用来给 AI 的回答<strong>打分</strong>。</li>
<li>人类会对 AI 生成的回答<strong>进行比较</strong>（例如，哪种回答更好？），然后训练 RM 学习这个评分标准。</li>
<li><strong>Reward Model 并不会直接优化 AI，而是用来指导 AI 训练</strong>。</li>
</ul>
<p>📝 <strong>相当于：AI 在考试，学习如何给自己打分，知道什么样的回答会得高分。</strong></p>
<hr>
<h3 id="PPO（Proximal-Policy-Optimization，近端策略优化）——-让-AI-生成高分答案"><a href="#PPO（Proximal-Policy-Optimization，近端策略优化）——-让-AI-生成高分答案" class="headerlink" title="PPO（Proximal Policy Optimization，近端策略优化）—— 让 AI 生成高分答案"></a>PPO（Proximal Policy Optimization，近端策略优化）—— 让 AI 生成高分答案</h3><blockquote>
<p>让 AI <strong>使用强化学习（RL）优化自己的回答，使其更符合人类偏好，相当于 AI 根据分数改进自己</strong>。</p>
</blockquote>
<ul>
<li>先用 <strong>Reward Model（奖励模型）</strong> 给 AI 生成的回答打分。</li>
<li>然后用 PPO 让 AI <strong>调整自己的回答方式，让它更偏向高分回答</strong>。</li>
<li>这是 <strong>RLHF（基于人类反馈的强化学习）</strong> 的关键步骤，OpenAI 训练 ChatGPT 时用了 PPO。</li>
</ul>
<p>📝 <strong>相当于：AI 知道考试评分标准后，学会如何答题得高分，但有时候会“讨好”评分系统，回答变得保守。</strong></p>
<hr>
<h3 id="DPO（Direct-Preference-Optimization，直接偏好优化）——-让-AI-直接学会人类偏好"><a href="#DPO（Direct-Preference-Optimization，直接偏好优化）——-让-AI-直接学会人类偏好" class="headerlink" title="DPO（Direct Preference Optimization，直接偏好优化）—— 让 AI 直接学会人类偏好"></a>DPO（Direct Preference Optimization，直接偏好优化）—— 让 AI 直接学会人类偏好</h3><blockquote>
<p>让 AI <strong>不需要奖励模型，直接从人类选择的数据中学习偏好，相当于 AI 直接看答案，学会哪种更好</strong>。</p>
</blockquote>
<ul>
<li><strong>DPO 不需要 Reward Model</strong>，而是<strong>直接学习人类的选择</strong>（例如，给 AI 两个回答，选择更好的那个）。</li>
<li>DPO 比 PPO <strong>更简单、更稳定，不需要强化学习</strong>。</li>
<li>适用于偏好学习，例如对话风格优化、客服 AI 训练等。</li>
</ul>
<p>📝 <strong>相当于：AI 不用自己摸索评分标准，而是直接看人类的选择，学会什么样的回答更受欢迎。</strong></p>
<hr>
<h3 id="KTO（KL-regularized-Transformer-Optimization，KL-正则化-Transformer-优化）——-让-AI-优化偏好但不跑偏"><a href="#KTO（KL-regularized-Transformer-Optimization，KL-正则化-Transformer-优化）——-让-AI-优化偏好但不跑偏" class="headerlink" title="KTO（KL-regularized Transformer Optimization，KL 正则化 Transformer 优化）—— 让 AI 优化偏好但不跑偏"></a>KTO（KL-regularized Transformer Optimization，KL 正则化 Transformer 优化）—— 让 AI 优化偏好但不跑偏</h3><blockquote>
<p>让 AI <strong>在优化偏好的同时，不会跑得太远，相当于 AI 在考试中学会稳定发挥</strong>。</p>
</blockquote>
<ul>
<li><strong>KTO 是 DPO 的改进版</strong>，用 KL 散度约束优化过程，让 AI 在学习人类偏好的同时，不会偏离原来的知识太远。</li>
<li>这样 AI <strong>既能学到人类偏好，又不会丢掉原有的知识</strong>。</li>
</ul>
<p>📝 <strong>相当于：AI 在改进答案时，不会把自己搞糊涂，确保稳步提升。</strong></p>
<hr>
<h3 id="ORPO（Offline-Reinforcement-Preference-Optimization，离线强化偏好优化）——-用现成数据优化-AI"><a href="#ORPO（Offline-Reinforcement-Preference-Optimization，离线强化偏好优化）——-用现成数据优化-AI" class="headerlink" title="ORPO（Offline Reinforcement Preference Optimization，离线强化偏好优化）—— 用现成数据优化 AI"></a>ORPO（Offline Reinforcement Preference Optimization，离线强化偏好优化）—— 用现成数据优化 AI</h3><blockquote>
<p>让 AI <strong>用已有的评分数据训练，而不是在线试错，相当于 AI 只看老师批改好的试卷学习</strong>。</p>
</blockquote>
<ul>
<li><strong>ORPO 不让 AI 自己试错，而是用已有的评分数据来优化 AI</strong>。</li>
<li>适合<strong>医学、法律等不能乱试错的场景</strong>，保证 AI 输出的答案可靠。</li>
</ul>
<p>📝 <strong>相当于：AI 只学习老师批改好的试卷，不自己试错，以免出危险的答案。</strong></p>
<hr>
<h3 id="SimPO（Simple-Preference-Optimization，简单偏好优化）——-更简单的-DPO"><a href="#SimPO（Simple-Preference-Optimization，简单偏好优化）——-更简单的-DPO" class="headerlink" title="SimPO（Simple Preference Optimization，简单偏好优化）—— 更简单的 DPO"></a>SimPO（Simple Preference Optimization，简单偏好优化）—— 更简单的 DPO</h3><blockquote>
<p>让 AI <strong>用更简单的方式学习人类偏好，相当于 AI 直接模仿优秀答案，不用复杂训练</strong>。</p>
</blockquote>
<ul>
<li>SimPO <strong>比 DPO 计算量更小，更快</strong>，适用于小规模模型微调。</li>
<li>适用于<strong>快速优化 AI 在某些领域的表现</strong>，比如让 AI 更懂编程、医学等。</li>
</ul>
<p>📝 <strong>相当于：AI 直接看好答案，快速调整，不进行复杂计算。</strong></p>
<hr>
<h3 id="总结（用简单的话对比这些概念）"><a href="#总结（用简单的话对比这些概念）" class="headerlink" title="总结（用简单的话对比这些概念）"></a>总结（用简单的话对比这些概念）</h3><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
<th>是否用奖励模型</th>
<th>是否用强化学习</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Pre-Training</strong></td>
<td>让 AI 学习基础知识</td>
<td>❌ 否</td>
<td>❌ 否</td>
</tr>
<tr>
<td><strong>SFT（监督微调）</strong></td>
<td>让 AI 学会听人话</td>
<td>❌ 否</td>
<td>❌ 否</td>
</tr>
<tr>
<td><strong>Reward Modeling</strong></td>
<td>让 AI 学会评判好坏</td>
<td>✅ 是</td>
<td>❌ 否</td>
</tr>
<tr>
<td><strong>PPO</strong></td>
<td>让 AI 根据评分优化回答</td>
<td>✅ 是</td>
<td>✅ 是（强化学习）</td>
</tr>
<tr>
<td><strong>DPO</strong></td>
<td>让 AI 直接学习人类偏好</td>
<td>❌ 否</td>
<td>❌ 否</td>
</tr>
<tr>
<td><strong>KTO</strong></td>
<td>让 AI 优化偏好但不跑偏</td>
<td>❌ 否</td>
<td>❌ 否</td>
</tr>
<tr>
<td><strong>ORPO</strong></td>
<td>用已有评分数据训练 AI</td>
<td>❌ 否</td>
<td>❌ 否</td>
</tr>
<tr>
<td><strong>SimPO</strong></td>
<td>让 AI 低成本学习偏好</td>
<td>❌ 否</td>
<td>❌ 否</td>
</tr>
</tbody></table>
<hr>
<h3 id="你应该怎么选？"><a href="#你应该怎么选？" class="headerlink" title="你应该怎么选？"></a>你应该怎么选？</h3><ul>
<li><strong>想训练大模型</strong> → 先 <strong>Pre-Training → SFT → PPO（RLHF）</strong></li>
<li><strong>想让 AI 优化回答但不搞复杂训练</strong> → 选 <strong>DPO、SimPO、KTO</strong></li>
<li><strong>如果数据已经有评分，想稳定优化</strong> → 选 <strong>ORPO</strong></li>
</ul>
</li>
<li><p>再详细解释下MMLU、CMMU、CEval</p>
<p><strong>MMLU（Massive Multitask Language Understanding）</strong></p>
<ul>
<li><p>用途：评测模型在<strong>多任务语言理解</strong>上的表现，包括<strong>知识问答、推理、数学、历史、法律、医学等57个子任务</strong>。</p>
</li>
<li><p>特点：</p>
<p>数据集涵盖<strong>小学到大学水平</strong>的各种领域知识。</p>
<p>采用**四选一（Multiple Choice）**的测试方式，评估模型在不同知识领域的准确率。</p>
<p>通常使用<strong>5-shot 或 zero-shot</strong>（即模型是否需要少量示例学习）。</p>
</li>
<li><p>适用场景：</p>
<p>评估大模型的<strong>世界知识和推理能力</strong>。</p>
<p>对比不同模型的多任务理解能力（如 GPT-4、LLaMA-2、Qwen 等）。</p>
</li>
</ul>
<p><strong>CMMU（Chinese Massive Multitask Language Understanding）</strong></p>
<ul>
<li><p>用途：MMLU 的<strong>中文版本</strong>，测试模型在<strong>中文多任务理解</strong>上的表现。</p>
</li>
<li><p>特点：</p>
<p>设计思路类似 MMLU，但数据经过<strong>中文优化</strong>，涵盖中国背景知识。</p>
<p>适用于<strong>评估中文大模型</strong>（如 ChatGLM、Baichuan、Qwen）。</p>
<p>也采用<strong>四选一</strong>的评测方式。</p>
</li>
<li><p>适用场景：</p>
<p>评测大模型在<strong>中文任务</strong>（如历史、地理、数学、法律、医学等）上的表现。</p>
<p>对比不同大模型在<strong>中文理解能力</strong>方面的优劣。</p>
</li>
</ul>
<p><strong>CEval（Chinese Evaluation Benchmark）</strong></p>
<ul>
<li><p><strong>用途</strong>：专门为<strong>中文大模型</strong>设计的<strong>权威测试集</strong>，涵盖<strong>学术、专业和通用能力测试</strong>。</p>
</li>
<li><p>特点：</p>
<p>涵盖<strong>52个任务</strong>，包含**基础知识（数学、物理）、人文社科（历史、法律）、工程技术（计算机、电子）**等多个领域。</p>
<p>任务难度从<strong>小学到大学水平</strong>。</p>
<p>也是<strong>四选一</strong>的选择题形式。</p>
</li>
<li><p>适用场景：</p>
<p>评测大模型在<strong>不同中文任务</strong>上的泛化能力。</p>
<p>适用于国内大模型的<strong>对比测试</strong>。</p>
</li>
</ul>
</li>
</ol>
<h2 id="Gradio运行LLamaFactory（TODO）"><a href="#Gradio运行LLamaFactory（TODO）" class="headerlink" title="Gradio运行LLamaFactory（TODO）"></a>Gradio运行LLamaFactory（TODO）</h2><p>运行下面命令，指定使用第一个卡（我这本身就只有一个卡，运行在7860端口，参考链接3）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 GRADIO_SERVER_PORT=7860 llamafactory-cli webui</span><br></pre></td></tr></table></figure>

<p>我实际使用以下命令也没问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llamafactory-cli webui</span><br></pre></td></tr></table></figure>

<img src="/2025/02/18/LLamaFactory%E5%BE%AE%E8%B0%83Qwen2-5VL/image-20250218181054901.png" class="" title="image-20250218181054901">

<p>参考链接3，更改一点配置项：</p>
<ul>
<li>语言-&gt;zh</li>
<li>模型名称-&gt;Qwen2.5-VL-7B-Instruct</li>
<li>模型路径-&gt;&#x2F;home&#x2F;chr&#x2F;桌面&#x2F;llamafactory&#x2F;Qwen2.5-VL-7B-Instruct</li>
<li>数据集-&gt;alpaca_zh_demo，可点击<strong>预览数据集</strong>查看数据集</li>
<li>梯度累积-&gt;4</li>
<li>预热步数-&gt;4</li>
<li>LoRA缩放系数-&gt;256</li>
</ul>
<p>可点击<strong>预览命令</strong>查看命令（具体含义<a href="https://llamafactory.readthedocs.io/zh-cn/latest/getting_started/sft.html">参考</a>），点击开始，这个时候会出个问题。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://zhuanlan.zhihu.com/p/695287607">https://zhuanlan.zhihu.com/p/695287607</a></li>
<li><a href="https://llamafactory.readthedocs.io/zh-cn/latest/getting_started/installation.html#">https://llamafactory.readthedocs.io/zh-cn/latest/getting_started/installation.html#</a></li>
<li><a href="https://www.bilibili.com/video/BV1UvF5eLEyb/?vd_source=075a061948e76c87e2ee8754e264056e">https://www.bilibili.com/video/BV1UvF5eLEyb/?vd_source=075a061948e76c87e2ee8754e264056e</a></li>
<li><a href="https://github.com/hiyouga/LLaMA-Factory/blob/main/data/README_zh.md">https://github.com/hiyouga/LLaMA-Factory/blob/main/data/README_zh.md</a></li>
<li><a href="https://llamafactory.readthedocs.io/zh-cn/latest/getting_started/inference.html">https://llamafactory.readthedocs.io/zh-cn/latest/getting_started/inference.html</a></li>
</ol>
]]></content>
      <categories>
        <category>code</category>
        <category>theory</category>
      </categories>
      <tags>
        <tag>Qwen2.5</tag>
        <tag>LLamaFactory</tag>
        <tag>Qwen2.5VL</tag>
      </tags>
  </entry>
  <entry>
    <title>conda常用命令</title>
    <url>/2025/01/22/conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>大致按日常使用频率来介绍conda的常用命令。</p>
<h5 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">conda create -n ENV_NAME python=<span class="number">3</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建名为<code>ENV_NAME</code>的新环境，并指定<code>python版本</code>为<code>3.9</code>。</li>
</ul>
<h5 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">conda activate ENV_NAME</span><br></pre></td></tr></table></figure>

<ul>
<li>激活你的<code>ENV_NAME</code>环境。</li>
</ul>
<h5 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h5><h6 id="使用pip安装"><a href="#使用pip安装" class="headerlink" title="使用pip安装"></a>使用pip安装</h6><ul>
<li><p>安装单个包：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install PACKAGE_NAME</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装依赖包列表</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>这里的<code>-r</code>是选项<code>--requirement</code>的缩写，表示告诉<code>pip</code>从一个指定的文件中读取需要安装的依赖包列表。</p>
</li>
</ul>
<h6 id="使用conda包管理安装"><a href="#使用conda包管理安装" class="headerlink" title="使用conda包管理安装"></a>使用conda包管理安装</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">conda install PACKAGE_NAME</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>PACKAGE_NAME</code>包</li>
</ul>
<h5 id="列出所有环境"><a href="#列出所有环境" class="headerlink" title="列出所有环境"></a>列出所有环境</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure>

<h5 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">conda remove -n ENV_NAME --all</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>fastapi+request构建语音识别微服务</title>
    <url>/2025/02/05/fastapi-request%E6%9E%84%E5%BB%BA%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍如何使用<strong>fastapi+request</strong>构建<strong>HTTP微服务</strong>，给出两个示例，首先是基础的例子用以展示基础用法，然后搭配<strong>silero vad</strong>和<strong>funasr</strong>实现语音识别微服务，并实现类似于<b>关键词识别(KWS)</b>的功能，通过将汉字转化为拼音实现更高的匹配率。</p>
<span id="more"></span>

<hr>
<h3 id="一、基础用法"><a href="#一、基础用法" class="headerlink" title="一、基础用法"></a>一、基础用法</h3><p>Python发送HTTP请求可以使用request库，这是一个简单易用的HTTP库，FastAPI和Flask都是Python的Web框架，用于构建HTTP服务器，FastAPI基于ASGI(Asynchronous Server Gateway Interface,异步服务器网关接口）原生支持async&#x2F;await，所以可以同时处理多个请求，提高并发能力，搭配<code>uvicorn</code>作为高性能ASGI服务器；而Flask基于WSGI(同步网关接口)，一次只能处理一个请求。更具体的对比见下表。</p>
<table>
<thead>
<tr>
<th align="center"><strong>特点</strong></th>
<th align="center"><strong>Flask</strong> 🐍</th>
<th align="center"><strong>FastAPI</strong> 🚀</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>性能</strong></td>
<td align="center">较慢（基于 WSGI，同步）</td>
<td align="center"><strong>非常快</strong>（基于 ASGI，异步）</td>
</tr>
<tr>
<td align="center"><strong>异步支持</strong></td>
<td align="center">需要手动用 <code>gevent</code>、<code>asyncio</code></td>
<td align="center"><strong>原生支持 <code>async/await</code></strong></td>
</tr>
<tr>
<td align="center"><strong>数据校验</strong></td>
<td align="center">需要手写校验逻辑（配合 <code>marshmallow</code> 或 <code>pydantic</code>）</td>
<td align="center"><strong>内置 <code>Pydantic</code> 自动校验数据</strong></td>
</tr>
<tr>
<td align="center"><strong>API 文档</strong></td>
<td align="center">需要额外工具，如 <code>Flasgger</code></td>
<td align="center"><strong>自动生成 Swagger 和 Redoc</strong></td>
</tr>
<tr>
<td align="center"><strong>学习成本</strong></td>
<td align="center">简单，上手快</td>
<td align="center"><strong>稍高，但开发效率更高</strong></td>
</tr>
<tr>
<td align="center"><strong>适用场景</strong></td>
<td align="center">传统 Web、简单 API</td>
<td align="center"><strong>高性能 API，微服务，异步应用</strong></td>
</tr>
</tbody></table>
<p>所以我选择FastAPI，客户端代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 FastAPI 实例</span></span><br><span class="line">app = FastAPI(title=<span class="string">&quot;Basic FastAPI Example&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义请求数据模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    email: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>  <span class="comment"># 可选字段</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># GET 接口，带路径参数</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">user_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">f&quot;获取用户信息&quot;</span>, <span class="string">&quot;user_id&quot;</span>: user_id&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># GET 接口，带查询参数</span></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/search/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_users</span>(<span class="params">name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>, age: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;搜索用户&quot;</span>, <span class="string">&quot;name&quot;</span>: name, <span class="string">&quot;age&quot;</span>: age&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># POST 接口，接收 JSON 请求体</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/users/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">user: User</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;用户已创建&quot;</span>, <span class="string">&quot;user&quot;</span>: user&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 FastAPI 服务器（直接运行 `python server.py`）</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个时候就可以打开：</p>
<ul>
<li><strong>Swagger UI</strong>: <a href="http://192.168.0.138:8000/docs">http://192.168.0.138:8000/docs</a></li>
<li><strong>Redoc 文档</strong>: <a href="http://192.168.0.138:8000/redoc">http://192.168.0.138:8000/redoc</a></li>
</ul>
<p>注意，<code>url</code>根据自己情况设置。</p>
<p>客户端代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&quot;http://0.0.0.0:8000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 GET 请求（路径参数）</span></span><br><span class="line">response = requests.get(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/users/123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;GET /users/123:&quot;</span>, response.json())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 GET 请求（查询参数）</span></span><br><span class="line">params = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/search/&quot;</span>, params=params)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;GET /search:&quot;</span>, response.json())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 POST 请求（JSON 请求体）</span></span><br><span class="line">user_data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;bob@example.com&quot;</span>&#125;</span><br><span class="line">response = requests.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/users/&quot;</span>, json=user_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;POST /users:&quot;</span>, response.json())</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET /users/<span class="number">123</span>: &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;获取用户信息&#x27;</span>, <span class="string">&#x27;user_id&#x27;</span>: <span class="number">123</span>&#125;</span><br><span class="line">GET /search: &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;搜索用户&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">POST /users: &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;用户已创建&#x27;</span>, <span class="string">&#x27;user&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;bob@example.com&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、微服务用法"><a href="#二、微服务用法" class="headerlink" title="二、微服务用法"></a>二、微服务用法</h3><p>本案例准备实现：</p>
<ul>
<li>客户端：通过silero vad判断有效语音，有则进行base64编码后发送(HTTP)到服务端进行语音识别。</li>
<li>服务端：是一个微服务，重点在于ASR服务，顺便实现一个KWS功能。</li>
</ul>
<p>服务端代码，<a href="https://github.com/modelscope/FunASR">参考</a>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> funasr <span class="keyword">import</span> AutoModel</span><br><span class="line"><span class="keyword">from</span> funasr.utils.postprocess_utils <span class="keyword">import</span> rich_transcription_postprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = AutoModel(</span><br><span class="line">    model=<span class="string">&quot;iic/SenseVoiceSmall&quot;</span>,</span><br><span class="line">    vad_model=<span class="string">&quot;fsmn-vad&quot;</span>,</span><br><span class="line">    vad_kwargs=&#123;<span class="string">&quot;max_single_segment_time&quot;</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    disable_update=<span class="literal">True</span>,</span><br><span class="line">    device=<span class="string">&quot;cuda:0&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建FASTAPI实例</span></span><br><span class="line">app = FastAPI(title=<span class="string">&quot;Sensevoice+KWS&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioData</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    audio_base64: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/asr/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asr_endpoint</span>(<span class="params">audio_data: AudioData</span>):</span><br><span class="line">    audio_bytes = base64.b64decode(audio_data.audio_base64)</span><br><span class="line"></span><br><span class="line">    res = model.generate(</span><br><span class="line">        <span class="built_in">input</span>=audio_bytes,</span><br><span class="line">        cache=&#123;&#125;,</span><br><span class="line">        language=<span class="string">&quot;auto&quot;</span>,  <span class="comment"># &quot;zn&quot;, &quot;en&quot;, &quot;yue&quot;, &quot;ja&quot;, &quot;ko&quot;, &quot;nospeech&quot;</span></span><br><span class="line">        use_itn=<span class="literal">True</span>,</span><br><span class="line">        batch_size_s=<span class="number">60</span>,</span><br><span class="line">        merge_vad=<span class="literal">True</span>,</span><br><span class="line">        merge_length_s=<span class="number">15</span>,</span><br><span class="line">    )</span><br><span class="line">    text = rich_transcription_postprocess(res[<span class="number">0</span>][<span class="string">&quot;text&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;transcription&quot;</span>: text&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关于<strong>silero vad</strong>的使用示例，请参考<a href="https://caihaoran-00.github.io/2025/02/07/silerovadonnx%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/">silero_vad onnx方式使用示例</a>，对其进行修改，得到客户端代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">torch.set_num_threads(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Silero VAD 模型</span></span><br><span class="line">model, utils = torch.hub.load(repo_or_dir=<span class="string">&#x27;snakers4/silero-vad&#x27;</span>,</span><br><span class="line">                              model=<span class="string">&#x27;silero_vad&#x27;</span>,</span><br><span class="line">                              trust_repo=<span class="literal">True</span>,</span><br><span class="line">                              onnx=<span class="literal">True</span>,</span><br><span class="line">                              <span class="comment"># force_reload=True</span></span><br><span class="line">                              )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 录音参数</span></span><br><span class="line">FORMAT = pyaudio.paFloat32</span><br><span class="line">CHANNELS = <span class="number">1</span></span><br><span class="line">SAMPLE_RATE = <span class="number">16000</span></span><br><span class="line">num_samples = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 PyAudio</span></span><br><span class="line">audio = pyaudio.PyAudio()</span><br><span class="line">stream = audio.<span class="built_in">open</span>(<span class="built_in">format</span>=FORMAT,</span><br><span class="line">                    channels=CHANNELS,</span><br><span class="line">                    rate=SAMPLE_RATE,</span><br><span class="line">                    <span class="built_in">input</span>=<span class="literal">True</span>,</span><br><span class="line">                    frames_per_buffer=num_samples)</span><br><span class="line"></span><br><span class="line">audio_record_queue = Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&quot;http://192.168.0.138:8000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_audio_to_server</span>(<span class="params">audio_fragment</span>):</span><br><span class="line">    audio_base64 = base64.b64encode(audio_fragment).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;audio_base64&#x27;</span>: audio_base64,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/asr/&quot;</span>, json=data)</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VADContext</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 threshold=<span class="number">0.5</span>,</span></span><br><span class="line"><span class="params">                 min_speech_duration_ms=<span class="number">64</span>,</span></span><br><span class="line"><span class="params">                 min_silence_duration_ms=<span class="number">480</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.threshold = threshold</span><br><span class="line">        <span class="variable language_">self</span>.min_speech_frames = <span class="built_in">int</span>(min_speech_duration_ms * SAMPLE_RATE / <span class="number">1000</span> / num_samples)</span><br><span class="line">        <span class="variable language_">self</span>.min_silence_frames = <span class="built_in">int</span>(min_silence_duration_ms * SAMPLE_RATE / <span class="number">1000</span> / num_samples)</span><br><span class="line">        <span class="variable language_">self</span>.speech_frame_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.silence_frame_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.is_speech = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.was_speech = <span class="literal">False</span>  <span class="comment"># 跟踪上一帧是否是语音</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, confidence</span>):</span><br><span class="line">        <span class="variable language_">self</span>.was_speech = <span class="variable language_">self</span>.is_speech  <span class="comment"># 保存上一帧的状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_speech:</span><br><span class="line">            <span class="keyword">if</span> confidence &gt;= <span class="variable language_">self</span>.threshold:</span><br><span class="line">                <span class="variable language_">self</span>.speech_frame_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.speech_frame_count &gt;= <span class="variable language_">self</span>.min_speech_frames:</span><br><span class="line">                    <span class="variable language_">self</span>.is_speech = <span class="literal">True</span></span><br><span class="line">                    <span class="variable language_">self</span>.silence_frame_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.speech_frame_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> confidence &lt;= <span class="variable language_">self</span>.threshold - <span class="number">0.15</span>:</span><br><span class="line">                <span class="variable language_">self</span>.silence_frame_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.silence_frame_count &gt;= <span class="variable language_">self</span>.min_silence_frames:</span><br><span class="line">                    <span class="variable language_">self</span>.is_speech = <span class="literal">False</span></span><br><span class="line">                    <span class="variable language_">self</span>.speech_frame_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.silence_frame_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.is_speech</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_speech_end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否是语音结束&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.was_speech <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_speech</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recording_and_vad_thread</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recording...\n&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    vad_context = VADContext(</span><br><span class="line">        threshold=<span class="number">0.5</span>,</span><br><span class="line">        min_speech_duration_ms=<span class="number">0</span>,</span><br><span class="line">        min_silence_duration_ms=<span class="number">480</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = stream.read(num_samples)</span><br><span class="line">        audio_chunk = np.frombuffer(data, dtype=np.float32)</span><br><span class="line">        speech_prob = model(torch.from_numpy(audio_chunk.copy()), SAMPLE_RATE).item()</span><br><span class="line">        is_speech = vad_context.update(speech_prob)</span><br><span class="line">        <span class="keyword">if</span> is_speech:</span><br><span class="line">            audio_chunk_int16 = (audio_chunk * <span class="number">32767</span>).astype(np.int16)</span><br><span class="line">            audio_record_queue.put(audio_chunk_int16)</span><br><span class="line">        <span class="keyword">elif</span> vad_context.is_speech_end():</span><br><span class="line">            audio_record_queue.put(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动录音线程</span></span><br><span class="line">recording_thread = threading.Thread(target=recording_and_vad_thread, daemon=<span class="literal">True</span>)</span><br><span class="line">recording_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_audio</span>():</span><br><span class="line">    audio_chunks = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = audio_record_queue.get()</span><br><span class="line">        <span class="keyword">if</span> chunk <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> audio_chunks:</span><br><span class="line">                audio_data = np.concatenate(audio_chunks)</span><br><span class="line">                audio_data_bytes = audio_data.tobytes()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 发送到ASR服务器</span></span><br><span class="line">                result = send_audio_to_server(audio_data_bytes)</span><br><span class="line">                <span class="keyword">if</span> result:</span><br><span class="line">                    asr_text = result[<span class="string">&#x27;res&#x27;</span>]</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\nres: <span class="subst">&#123;asr_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                audio_chunks.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            audio_chunks.append(chunk)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_audio()</span><br></pre></td></tr></table></figure>

<img src="/2025/02/05/fastapi-request%E6%9E%84%E5%BB%BA%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20250208153324529.png" class="" title="image-20250208153324529">

<p>效果还行，但对于<strong>锄禾日当午</strong>的<strong>锄</strong>老是识别不到，我认为是这个VAD的问题（不知道webrtcvad会不会有这个问题）,解决方案</p>
<ul>
<li>识别到人声时，将前面不被认为是人声的一个或几个（可配置）512段拼接在人生端之前</li>
</ul>
<p>另外，我目前的代码<code>min_speech_duration_ms</code>配置的是<code>0</code>，这会引入一个问题</p>
<ul>
<li>有声段太短也会发送到服务器进行处理，但这时候就不一定能得到有效结果</li>
</ul>
<p>应当将此值设置大一些，如<code>64</code>，但在当前代码情况下启用该配置会加重首字吞字的问题，故终极解决方案：</p>
<ul>
<li>将<code>min_speech_duration_ms</code>配置为64（按需或按试验设置）</li>
<li>64ms代表两个512样本点段，所以需要保存这两段，识别到人声时需将这两端拼接在人声前</li>
<li>在这两段512样本点段之前的段也需要按需拼接在语音开始处。</li>
</ul>
<p>好的，目标明确，开干：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">torch.set_num_threads(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Silero VAD 模型</span></span><br><span class="line">model, utils = torch.hub.load(repo_or_dir=<span class="string">&#x27;snakers4/silero-vad&#x27;</span>,</span><br><span class="line">                              model=<span class="string">&#x27;silero_vad&#x27;</span>,</span><br><span class="line">                              trust_repo=<span class="literal">True</span>,</span><br><span class="line">                              onnx=<span class="literal">True</span>,</span><br><span class="line">                              <span class="comment"># force_reload=True</span></span><br><span class="line">                              )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 录音参数</span></span><br><span class="line">FORMAT = pyaudio.paFloat32</span><br><span class="line">CHANNELS = <span class="number">1</span></span><br><span class="line">SAMPLE_RATE = <span class="number">16000</span></span><br><span class="line">num_samples = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 PyAudio</span></span><br><span class="line">audio = pyaudio.PyAudio()</span><br><span class="line">stream = audio.<span class="built_in">open</span>(<span class="built_in">format</span>=FORMAT,</span><br><span class="line">                    channels=CHANNELS,</span><br><span class="line">                    rate=SAMPLE_RATE,</span><br><span class="line">                    <span class="built_in">input</span>=<span class="literal">True</span>,</span><br><span class="line">                    frames_per_buffer=num_samples)</span><br><span class="line"></span><br><span class="line">audio_record_queue = Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BASE_URL = <span class="string">&quot;http://192.168.0.138:8000&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateManage</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.threshold = <span class="number">0.5</span></span><br><span class="line">        <span class="variable language_">self</span>.min_speech_duration_ms = <span class="number">64</span></span><br><span class="line">        <span class="variable language_">self</span>.min_silence_duration_ms = <span class="number">480</span></span><br><span class="line">        <span class="variable language_">self</span>.pre_chunk_add = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">state_manage = StateManage()</span><br><span class="line"></span><br><span class="line">pre_speech_buffer = collections.deque(maxlen=state_manage.min_speech_duration_ms // <span class="number">32</span> + state_manage.pre_chunk_add)</span><br><span class="line"><span class="built_in">print</span>(state_manage.min_speech_duration_ms // <span class="number">32</span> + state_manage.pre_chunk_add)</span><br><span class="line">first_chunk_detected = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_audio_to_server</span>(<span class="params">audio_fragment</span>):</span><br><span class="line">    audio_base64 = base64.b64encode(audio_fragment).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;audio_base64&#x27;</span>: audio_base64,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(<span class="string">f&quot;<span class="subst">&#123;BASE_URL&#125;</span>/asr/&quot;</span>, json=data)</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VADContext</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 threshold=<span class="number">0.5</span>,</span></span><br><span class="line"><span class="params">                 min_speech_duration_ms=<span class="number">64</span>,</span></span><br><span class="line"><span class="params">                 min_silence_duration_ms=<span class="number">480</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.threshold = threshold</span><br><span class="line">        <span class="variable language_">self</span>.min_speech_frames = <span class="built_in">int</span>(min_speech_duration_ms * SAMPLE_RATE / <span class="number">1000</span> / num_samples)</span><br><span class="line">        <span class="variable language_">self</span>.min_silence_frames = <span class="built_in">int</span>(min_silence_duration_ms * SAMPLE_RATE / <span class="number">1000</span> / num_samples)</span><br><span class="line">        <span class="variable language_">self</span>.speech_frame_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.silence_frame_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.is_speech = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.was_speech = <span class="literal">False</span>  <span class="comment"># 跟踪上一帧是否是语音</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, confidence</span>):</span><br><span class="line">        <span class="variable language_">self</span>.was_speech = <span class="variable language_">self</span>.is_speech  <span class="comment"># 保存上一帧的状态</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_speech:</span><br><span class="line">            <span class="keyword">if</span> confidence &gt;= <span class="variable language_">self</span>.threshold:</span><br><span class="line">                <span class="variable language_">self</span>.speech_frame_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.speech_frame_count &gt;= <span class="variable language_">self</span>.min_speech_frames:</span><br><span class="line">                    <span class="variable language_">self</span>.is_speech = <span class="literal">True</span></span><br><span class="line">                    <span class="variable language_">self</span>.silence_frame_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.speech_frame_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> confidence &lt;= <span class="variable language_">self</span>.threshold - <span class="number">0.15</span>:</span><br><span class="line">                <span class="variable language_">self</span>.silence_frame_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.silence_frame_count &gt;= <span class="variable language_">self</span>.min_silence_frames:</span><br><span class="line">                    <span class="variable language_">self</span>.is_speech = <span class="literal">False</span></span><br><span class="line">                    <span class="variable language_">self</span>.speech_frame_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.silence_frame_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.is_speech</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_speech_end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否是语音结束&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.was_speech <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_speech</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recording_and_vad_thread</span>():</span><br><span class="line">    <span class="keyword">global</span> first_chunk_detected</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recording...\n&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    vad_context = VADContext(</span><br><span class="line">        threshold=state_manage.threshold,</span><br><span class="line">        min_speech_duration_ms=state_manage.min_speech_duration_ms,</span><br><span class="line">        min_silence_duration_ms=state_manage.min_silence_duration_ms,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = stream.read(num_samples)</span><br><span class="line">        audio_chunk = np.frombuffer(data, dtype=np.float32)</span><br><span class="line">        speech_prob = model(torch.from_numpy(audio_chunk.copy()), SAMPLE_RATE).item()</span><br><span class="line">        is_speech = vad_context.update(speech_prob)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 放入缓冲区</span></span><br><span class="line">        pre_speech_buffer.append(audio_chunk)</span><br><span class="line">        <span class="keyword">if</span> is_speech:</span><br><span class="line">            <span class="comment"># 如果是语音的第一块</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> first_chunk_detected:</span><br><span class="line">                <span class="keyword">while</span> pre_speech_buffer:</span><br><span class="line">                    pre_chunk = pre_speech_buffer.popleft()</span><br><span class="line">                    audio_record_queue.put((pre_chunk * <span class="number">32767</span>).astype(np.int16))</span><br><span class="line"></span><br><span class="line">            audio_chunk_int16 = (audio_chunk * <span class="number">32767</span>).astype(np.int16)</span><br><span class="line">            audio_record_queue.put(audio_chunk_int16)</span><br><span class="line">        <span class="keyword">elif</span> vad_context.is_speech_end():</span><br><span class="line">            audio_record_queue.put(<span class="literal">None</span>)</span><br><span class="line">            first_chunk_detected = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动录音线程</span></span><br><span class="line">recording_thread = threading.Thread(target=recording_and_vad_thread, daemon=<span class="literal">True</span>)</span><br><span class="line">recording_thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_audio</span>():</span><br><span class="line">    audio_chunks = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        chunk = audio_record_queue.get()</span><br><span class="line">        <span class="keyword">if</span> chunk <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> audio_chunks:</span><br><span class="line">                audio_data = np.concatenate(audio_chunks)</span><br><span class="line">                audio_data_bytes = audio_data.tobytes()</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 发送到ASR服务器</span></span><br><span class="line">                result = send_audio_to_server(audio_data_bytes)</span><br><span class="line">                <span class="keyword">if</span> result:</span><br><span class="line">                    asr_text = result[<span class="string">&#x27;res&#x27;</span>]</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\nres: <span class="subst">&#123;asr_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">                audio_chunks.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            audio_chunks.append(chunk)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_audio()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2025/02/05/fastapi-request%E6%9E%84%E5%BB%BA%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%BE%AE%E6%9C%8D%E5%8A%A1/image-20250208170903482.png" class="" title="image-20250208170903482">

<p>可看出效果还是不错的，一些<strong>小细节</strong>：</p>
<ul>
<li>通过<code>pre_chunk_add</code>控制添加在语音段前方的段数，目前设置的是4</li>
<li>通过deque，而不是list来管理前方段数，因为<code>deque.popleft()</code>比<code>list.pop(0)</code>快， <code>list.pop(0)</code> <strong>会导致 O(n) 复杂度</strong>，而 <code>deque.popleft()</code> <strong>只需 O(1) 时间</strong>。<strong><code>deque</code> 可以设定 <code>maxlen</code></strong>，超出长度时会自动删除最早的元素，防止无限增长，占用过多内存</li>
<li>通过<code>first_chunk_detected</code>判断是否是第一次检测到语音块（针对单段语音）</li>
<li>使用<code>None</code>作为当前段语音的结束标志</li>
</ul>
<p>服务端和客户端都是用同步方式，后续有需要再改成异步形式。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p><a href="https://github.com/modelscope/FunASR">https://github.com/modelscope/FunASR</a></p>
</li>
<li><p><a href="https://caihaoran-00.github.io/2025/02/07/silerovadonnx%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/">https://caihaoran-00.github.io/2025/02/07/silerovadonnx%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>funasr</tag>
        <tag>fastapi</tag>
        <tag>senseVoice</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2025/01/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文梳理一些常用的git命令，以<strong>使用场景</strong>为切入点进行git指令介绍。</p>
<span id="more"></span>

<h2 id="一、本地仓库-远程仓库"><a href="#一、本地仓库-远程仓库" class="headerlink" title="一、本地仓库-&gt;远程仓库"></a>一、本地仓库-&gt;远程仓库</h2><h3 id="1-初始化本地仓库"><a href="#1-初始化本地仓库" class="headerlink" title="1.初始化本地仓库"></a>1.初始化本地仓库</h3><ul>
<li><p>创建一个项目文件夹，比如我创建了一个<code>agent_langgraph</code>文件夹</p>
</li>
<li><p>进入这个文件夹，命令行运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">hint: <span class="title">Using</span> &#x27;<span class="title">master</span>&#x27; <span class="title">as</span> <span class="title">the</span> <span class="title">name</span> <span class="title">for</span> <span class="title">the</span> <span class="title">initial</span> <span class="title">branch</span>. <span class="title">This</span> <span class="title">default</span> <span class="title">branch</span> <span class="title">name</span></span></span><br><span class="line"><span class="function"><span class="title">hint</span>: <span class="title">is</span> <span class="title">subject</span> <span class="title">to</span> <span class="title">change</span>. <span class="title">To</span> <span class="title">configure</span> <span class="title">the</span> <span class="title">initial</span> <span class="title">branch</span> <span class="title">name</span> <span class="title">to</span> <span class="title">use</span> <span class="title">in</span> <span class="title">all</span></span></span><br><span class="line"><span class="function"><span class="title">hint</span>: <span class="title">of</span> <span class="title">your</span> <span class="title">new</span> <span class="title">repositories</span>, <span class="title">which</span> <span class="title">will</span> <span class="title">suppress</span> <span class="title">this</span> <span class="title">warning</span>, <span class="title">call</span>:</span></span><br><span class="line"><span class="function"><span class="title">hint</span>:</span></span><br><span class="line"><span class="function"><span class="title">hint</span>:   <span class="title">git</span> <span class="title">config</span> --<span class="title">global</span> <span class="title">init.defaultBranch</span> &lt;<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="function"><span class="title">hint</span>:</span></span><br><span class="line"><span class="function"><span class="title">hint</span>: <span class="title">Names</span> <span class="title">commonly</span> <span class="title">chosen</span> <span class="title">instead</span> <span class="title">of</span> &#x27;<span class="title">master</span>&#x27; <span class="title">are</span> &#x27;<span class="title">main</span>&#x27;, &#x27;<span class="title">trunk</span>&#x27; <span class="title">and</span></span></span><br><span class="line"><span class="function"><span class="title">hint</span>: &#x27;<span class="title">development</span>&#x27;. <span class="title">The</span> <span class="title">just</span>-<span class="title">created</span> <span class="title">branch</span> <span class="title">can</span> <span class="title">be</span> <span class="title">renamed</span> <span class="title">via</span> <span class="title">this</span> <span class="title">command</span>:</span></span><br><span class="line"><span class="function"><span class="title">hint</span>:</span></span><br><span class="line"><span class="function"><span class="title">hint</span>:   <span class="title">git</span> <span class="title">branch</span> -<span class="title">m</span> &lt;<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="function"><span class="title">Initialized</span> <span class="title">empty</span> <span class="title">Git</span> <span class="title">repository</span> <span class="title">in</span> <span class="title">E</span>:/<span class="title">chr_git</span>/<span class="title">agent_langgraph</span>/.<span class="title">git</span>/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-创建文件并提交到本地仓库"><a href="#2-创建文件并提交到本地仓库" class="headerlink" title="2.创建文件并提交到本地仓库"></a>2.创建文件并提交到本地仓库</h3><p>先创建几个项目文件：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> # 基于langgraph的agent应用 &gt; README.<span class="built_in">md</span></span><br><span class="line"><span class="built_in">echo</span> &quot;<span class="built_in">print</span>(&#x27;Hello, LangGraph!&#x27;)&quot; &gt; main.py</span><br></pre></td></tr></table></figure>

<p>查看当前状态：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        README.md</span><br><span class="line">        main.py</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure>

<p>将这些文件加入Git的<code>暂存区</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>再次查看状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   README.md</span><br><span class="line">        new file:   main.py</span><br></pre></td></tr></table></figure>

<p>提交到Git仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;Initial commit: add README and main.py&quot;</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[master (root-commit) e1b1d5b] Initial commit: add README and main.py</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line"> create mode 100644 main.py</span><br></pre></td></tr></table></figure>

<p>注意，到这里只是在<strong>本地创建和管理</strong>这个Git仓库，并没有把项目上传到<code>Github</code>上。如果想让项目出现在你的<code>Github</code>账户里，还需要执行一些额外步骤，将本地仓库推送到Github。</p>
<h3 id="3-本地仓库-远程仓库"><a href="#3-本地仓库-远程仓库" class="headerlink" title="3. 本地仓库-&gt;远程仓库"></a>3. 本地仓库-&gt;远程仓库</h3><p>先在<code>Github</code>上创建一个远程仓库：</p>
<ul>
<li>登录你的<code>Github</code>账户，点击右上角的<code>+</code>按钮，选择<code>New repository</code></li>
<li>填写项目名称，如<code>agent_langgraph</code>，可在此界面添加项目描述(Description)，选择项目是公开可见(Public)还是仅你指定的人可见(Private)，选择初始化仓库时是否增加README文件，选择是否添加<code>.gitignore</code>模板，用于模板列表中选择不跟踪的文件，这里选择<code>Python</code>，最后还可以选择许可证(license)。、</li>
<li>点击<code>Create repository</code>以创建仓库</li>
</ul>
<p>现在就可以将本地仓库与Github远程仓库关联了，在你的本地项目目录下运行:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/&lt;your_username&gt;/agent_langgraph.git</span><br><span class="line"></span><br><span class="line">如</span><br><span class="line"></span><br><span class="line">git remote add origin https://github.com/caihaoran-<span class="number">00</span>/agent_langgraph</span><br></pre></td></tr></table></figure>

<p>检查关联是否成功：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">origin  https://github.com/caihaoran-<span class="number">00</span>/agent_langgraph (fetch)</span><br><span class="line">origin  https://github.com/caihaoran-<span class="number">00</span>/agent_langgraph (push)</span><br></pre></td></tr></table></figure>

<p>查看本地分支名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">* master</span><br></pre></td></tr></table></figure>

<p>推送代码到远程仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">warning: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">Enumerating</span> <span class="title">objects</span>: 4, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Counting</span> <span class="title">objects</span>: 100% (4/4), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Delta</span> <span class="title">compression</span> <span class="title">using</span> <span class="title">up</span> <span class="title">to</span> 16 <span class="title">threads</span></span></span><br><span class="line"><span class="function"><span class="title">Compressing</span> <span class="title">objects</span>: 100% (2/2), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Writing</span> <span class="title">objects</span>: 100% (4/4), 335 <span class="title">bytes</span> | 335.00 <span class="title">KiB</span>/<span class="title">s</span>, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Total</span> 4 (<span class="title">delta</span> 0), <span class="title">reused</span> 0 (<span class="title">delta</span> 0), <span class="title">pack</span>-<span class="title">reused</span> 0</span></span><br><span class="line"><span class="function"><span class="title">remote</span>:</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Create</span> <span class="title">a</span> <span class="title">pull</span> <span class="title">request</span> <span class="title">for</span> &#x27;<span class="title">master</span>&#x27; <span class="title">on</span> <span class="title">GitHub</span> <span class="title">by</span> <span class="title">visiting</span>:</span></span><br><span class="line"><span class="function"><span class="title">remote</span>:      <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">caihaoran</span>-00/<span class="title">agent_langgraph</span>/<span class="title">pull</span>/<span class="title">new</span>/<span class="title">master</span></span></span><br><span class="line"><span class="function"><span class="title">remote</span>:</span></span><br><span class="line"><span class="function"><span class="title">To</span> <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">caihaoran</span>-00/<span class="title">agent_langgraph</span></span></span><br><span class="line"><span class="function"> * [<span class="title">new</span> <span class="title">branch</span>]      <span class="title">master</span> -&gt; <span class="title">master</span></span></span><br><span class="line"><span class="function"><span class="title">branch</span> &#x27;<span class="title">master</span>&#x27; <span class="title">set</span> <span class="title">up</span> <span class="title">to</span> <span class="title">track</span> &#x27;<span class="title">origin</span>/<span class="title">master</span>&#x27;.</span></span><br></pre></td></tr></table></figure>

<p>好，推送成功了，打开我们的<code>git仓库</code>看看</p>
<img src="/2025/01/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20250205113431936.png" class="" title="image-20250205113431936">

<p>咦，怎么没有呢？我们发现现在是两个分支了(2 Branches)，点击<code>main</code>切换到<code>master</code>分支，</p>
<img src="/2025/01/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/image-20250205113617249.png" class="" title="image-20250205113617249">

<p>哦，在这里啊，这是怎么回事呢，回到我们的第一个命令<code>git init</code>的输出，原来一开始就建议我们使用<code>main</code>而不是<code>master</code>作为默认分支了，首先运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure>

<p>让所有新仓库用<code>main</code>作为默认分支，然后重命名本地<code>master</code>分支为<code>main</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git branch -m master main</span><br></pre></td></tr></table></figure>

<p>将本地<code>main</code>和远程<code>main</code>关联：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">warning: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">To</span> <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">caihaoran</span>-00/<span class="title">agent_langgraph</span></span></span><br><span class="line"><span class="function"> ! [<span class="title">rejected</span>]        <span class="title">main</span> -&gt; <span class="title">main</span> (<span class="title">fetch</span> <span class="title">first</span>)</span></span><br><span class="line"><span class="function"><span class="title">error</span>: <span class="title">failed</span> <span class="title">to</span> <span class="title">push</span> <span class="title">some</span> <span class="title">refs</span> <span class="title">to</span> &#x27;<span class="title">https</span>://<span class="title">github.com</span>/<span class="title">caihaoran</span>-00/<span class="title">agent_langgraph</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">hint</span>: <span class="title">Updates</span> <span class="title">were</span> <span class="title">rejected</span> <span class="title">because</span> <span class="title">the</span> <span class="title">remote</span> <span class="title">contains</span> <span class="title">work</span> <span class="title">that</span> <span class="title">you</span> <span class="title">do</span></span></span><br><span class="line"><span class="function"><span class="title">hint</span>: <span class="title">not</span> <span class="title">have</span> <span class="title">locally</span>. <span class="title">This</span> <span class="title">is</span> <span class="title">usually</span> <span class="title">caused</span> <span class="title">by</span> <span class="title">another</span> <span class="title">repository</span> <span class="title">pushing</span></span></span><br><span class="line"><span class="function"><span class="title">hint</span>: <span class="title">to</span> <span class="title">the</span> <span class="title">same</span> <span class="title">ref</span>. <span class="title">You</span> <span class="title">may</span> <span class="title">want</span> <span class="title">to</span> <span class="title">first</span> <span class="title">integrate</span> <span class="title">the</span> <span class="title">remote</span> <span class="title">changes</span></span></span><br><span class="line"><span class="function"><span class="title">hint</span>: (<span class="title">e.g</span>., &#x27;<span class="title">git</span> <span class="title">pull</span> ...&#x27;) <span class="title">before</span> <span class="title">pushing</span> <span class="title">again</span>.</span></span><br><span class="line"><span class="function"><span class="title">hint</span>: <span class="title">See</span> <span class="title">the</span> &#x27;<span class="title">Note</span> <span class="title">about</span> <span class="title">fast</span>-<span class="title">forwards</span>&#x27; <span class="title">in</span> &#x27;<span class="title">git</span> <span class="title">push</span> --<span class="title">help</span>&#x27; <span class="title">for</span> <span class="title">details</span>.</span></span><br></pre></td></tr></table></figure>

<p>这是因为创建远程<code>main</code>分支的时候添加了<code>.gitignore</code>文件，但本地<code>main</code>分支并没有同步远程的更新，所以<code>Git</code>拒绝了你的推送，执行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin main</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">remote: <span class="title">Enumerating</span> <span class="title">objects</span>: 3, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Counting</span> <span class="title">objects</span>: 100% (3/3), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Compressing</span> <span class="title">objects</span>: 100% (2/2), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">remote</span>: <span class="title">Total</span> 3 (<span class="title">delta</span> 0), <span class="title">reused</span> 0 (<span class="title">delta</span> 0), <span class="title">pack</span>-<span class="title">reused</span> 0 (<span class="title">from</span> 0)</span></span><br><span class="line"><span class="function"><span class="title">Unpacking</span> <span class="title">objects</span>: 100% (3/3), 2.32 <span class="title">KiB</span> | 198.00 <span class="title">KiB</span>/<span class="title">s</span>, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">From</span> <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">caihaoran</span>-00/<span class="title">agent_langgraph</span></span></span><br><span class="line"><span class="function"> * <span class="title">branch</span>            <span class="title">main</span>       -&gt; <span class="title">FETCH_HEAD</span></span></span><br><span class="line"><span class="function"> * [<span class="title">new</span> <span class="title">branch</span>]      <span class="title">main</span>       -&gt; <span class="title">origin</span>/<span class="title">main</span></span></span><br><span class="line"><span class="function"><span class="title">Successfully</span> <span class="title">rebased</span> <span class="title">and</span> <span class="title">updated</span> <span class="title">refs</span>/<span class="title">heads</span>/<span class="title">main</span>.</span></span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">warning: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">Enumerating</span> <span class="title">objects</span>: 5, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Counting</span> <span class="title">objects</span>: 100% (5/5), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Delta</span> <span class="title">compression</span> <span class="title">using</span> <span class="title">up</span> <span class="title">to</span> 16 <span class="title">threads</span></span></span><br><span class="line"><span class="function"><span class="title">Compressing</span> <span class="title">objects</span>: 100% (2/2), <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Writing</span> <span class="title">objects</span>: 100% (4/4), 405 <span class="title">bytes</span> | 405.00 <span class="title">KiB</span>/<span class="title">s</span>, <span class="title">done</span>.</span></span><br><span class="line"><span class="function"><span class="title">Total</span> 4 (<span class="title">delta</span> 0), <span class="title">reused</span> 0 (<span class="title">delta</span> 0), <span class="title">pack</span>-<span class="title">reused</span> 0</span></span><br><span class="line"><span class="function"><span class="title">To</span> <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">caihaoran</span>-00/<span class="title">agent_langgraph</span></span></span><br><span class="line"><span class="function">   <span class="title">a8dd2f9</span>..<span class="title">d26a2dd</span>  <span class="title">main</span> -&gt; <span class="title">main</span></span></span><br><span class="line"><span class="function"><span class="title">branch</span> &#x27;<span class="title">main</span>&#x27; <span class="title">set</span> <span class="title">up</span> <span class="title">to</span> <span class="title">track</span> &#x27;<span class="title">origin</span>/<span class="title">main</span>&#x27;.</span></span><br></pre></td></tr></table></figure>

<p>OK!成功了，看下远程仓库也确实推送上去了，最后删除掉刚才的<code>master</code>分支：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git push origin --delete master</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">warning: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span>-<span class="title">core</span> <span class="title">was</span> <span class="title">renamed</span> <span class="title">to</span> <span class="title">git</span>-<span class="title">credential</span>-<span class="title">manager</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">see</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">rename</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span></span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ----------------- <span class="title">SECURITY</span> <span class="title">WARNING</span> ----------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: | <span class="title">TLS</span> <span class="title">certificate</span> <span class="title">verification</span> <span class="title">has</span> <span class="title">been</span> <span class="title">disabled</span>! |</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: ---------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="title">warning</span>: <span class="title">HTTPS</span> <span class="title">connections</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">secure</span>. <span class="title">See</span> <span class="title">https</span>://<span class="title">aka.ms</span>/<span class="title">gcm</span>/<span class="title">tlsverify</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span>.</span></span><br><span class="line"><span class="function"><span class="title">To</span> <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">caihaoran</span>-00/<span class="title">agent_langgraph</span></span></span><br><span class="line"><span class="function"> - [<span class="title">deleted</span>]         <span class="title">master</span></span></span><br></pre></td></tr></table></figure>

<p>检查下远程仓库，确实删除掉了，这些<code>warning</code>怎么解决呢？</p>
<p>这理由两方面警告：</p>
<ul>
<li><p><code>git-credential-manager-core</code>被重命名为<code>git-credential-manager</code></p>
<p>升级<a href="https://git-scm.com/downloads/win">git</a>，然后<code>git --version</code>查看是否升级成功，再</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper manager</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> # 基于langgraph的agent应用示例 &gt; README.<span class="built_in">md</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Modified README&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>最终输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Enumerating objects: <span class="number">5</span>, done.</span><br><span class="line">Counting objects: <span class="number">100</span>% (<span class="number">5</span>/<span class="number">5</span>), done.</span><br><span class="line">Delta compression using up to <span class="number">16</span> threads</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">348</span> bytes | <span class="number">348</span>.<span class="number">00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">0</span> (from <span class="number">0</span>)</span><br><span class="line">To https://github.com/caihaoran-<span class="number">00</span>/agent_langgraph</span><br><span class="line">   d26a2dd..ca9d0de  main -&gt; main</span><br></pre></td></tr></table></figure>

<p>没有警告了，完美。</p>
</li>
</ul>
<p>但是发现readme文件显示乱码了，通过任意编辑器打开readme文件，选择<code>UTF-8</code>格式保存，再：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Modified README&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<hr>
<h2 id="二、远程仓库-本地仓库（推荐）"><a href="#二、远程仓库-本地仓库（推荐）" class="headerlink" title="二、远程仓库-&gt;本地仓库（推荐）"></a>二、远程仓库-&gt;本地仓库（推荐）</h2><h3 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1.创建远程仓库"></a>1.创建远程仓库</h3><p>第二个案例我们从新建远程仓库看起，与案例一大同小异，首先创建远程仓库，名称为<code>agent</code>。</p>
<h3 id="2-本地仓库文件创建"><a href="#2-本地仓库文件创建" class="headerlink" title="2. 本地仓库文件创建"></a>2. 本地仓库文件创建</h3><p>克隆这个仓库到本地：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/caihaoran-<span class="number">00</span>/agent.git</span><br></pre></td></tr></table></figure>

<p>然后进入这个文件夹，在本地新建几个文件：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> # 原生的agent应用 &gt; README.<span class="built_in">md</span></span><br><span class="line"><span class="built_in">echo</span> &quot;<span class="built_in">print</span>(&#x27;Hello, agent!&#x27;)&quot; &gt; main.py</span><br></pre></td></tr></table></figure>

<p>然后可以运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>查看下状态，输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">On branch main</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with &#x27;origin/main&#x27;.</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git <span class="built_in">restore</span> &lt;file&gt;...&quot; to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"><span class="function">        modified:   <span class="title">README.md</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Untracked</span> <span class="title">files</span>:</span></span><br><span class="line"><span class="function">  (<span class="title">use</span> &quot;<span class="title">git</span> <span class="title">add</span> &lt;<span class="title">file</span>&gt;...&quot; <span class="title">to</span> <span class="title">include</span> <span class="title">in</span> <span class="title">what</span> <span class="title">will</span> <span class="title">be</span> <span class="title">committed</span>)</span></span><br><span class="line"><span class="function">        <span class="title">main.py</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">no</span> <span class="title">changes</span> <span class="title">added</span> <span class="title">to</span> <span class="title">commit</span> (<span class="title">use</span> &quot;<span class="title">git</span> <span class="title">add</span>&quot; <span class="title">and</span>/<span class="title">or</span> &quot;<span class="title">git</span> <span class="title">commit</span> -<span class="title">a</span>&quot;)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-本地仓库-远程仓库-1"><a href="#3-本地仓库-远程仓库-1" class="headerlink" title="3. 本地仓库-&gt;远程仓库"></a>3. 本地仓库-&gt;远程仓库</h3><p>运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit: add README and main.py&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>最终输出：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Enumerating objects: <span class="number">6</span>, done.</span><br><span class="line">Counting objects: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), done.</span><br><span class="line">Delta compression using up to <span class="number">16</span> threads</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), <span class="number">355</span> bytes | <span class="number">355</span>.<span class="number">00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">4</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">0</span> (from <span class="number">0</span>)</span><br><span class="line">To https://github.com/caihaoran-<span class="number">00</span>/agent.git</span><br><span class="line">   <span class="number">43</span>b6c82..<span class="number">765</span>f15b  main -&gt; main</span><br></pre></td></tr></table></figure>

<p>好了，是不是要比案例一要简单一些呢。</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/01/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo主题配置及美化之Next</title>
    <url>/2025/01/14/hexo%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96%E4%B9%8Bnext/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面介绍了Hexo + Github Pages环境的搭建和简单的走了一遍总体发布流程，本文介绍：</p>
<ul>
<li>使用<a href="https://github.com/theme-next/hexo-theme-next">Next</a>主题进行页面美化</li>
<li>对站点配置文件（.&#x2F;_config.yml）和主题配置文件（.&#x2F;themes&#x2F;next&#x2F;_config.yml）的部分配置进行使用和介绍</li>
</ul>
<p>关于markdown文件的撰写，下次文章介绍。</p>
<hr>
<span id="more"></span>

<h2 id="1-安装Next主题"><a href="#1-安装Next主题" class="headerlink" title="1.安装Next主题"></a>1.安装Next主题</h2><ul>
<li><p>与上文的yilia主题一样，在<code>blog</code>目录下运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<code>blog/_config.yml</code>文件，拉到倒数第二项的theme配置部分，修改如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">theme: <span class="title">next</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>（可选）此时即可本地运行看下效果：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>scheme</code>，配置如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line"><span class="function">scheme: <span class="title">Gemini</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本地看下效果：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="2-页面美化"><a href="#2-页面美化" class="headerlink" title="2.页面美化"></a>2.页面美化</h2><h3 id="1-站点title"><a href="#1-站点title" class="headerlink" title="1.站点title"></a>1.站点title</h3><ul>
<li><p>打开<code>blog/_config.yml</code>文件，开头部分：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line"><span class="function">title: <span class="title">Chr</span>&#x27;<span class="title">s</span> <span class="title">Blog</span></span></span><br><span class="line"><span class="function"><span class="title">subtitle</span>: &#x27;<span class="title">Record</span> <span class="title">and</span> <span class="title">Share</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">description</span>: &#x27;<span class="title">Welcome</span> <span class="title">to</span> <span class="title">my</span> <span class="title">little</span> <span class="title">world</span>&#x27;</span></span><br><span class="line"><span class="function"><span class="title">keywords</span>: <span class="title">Hexo</span>,<span class="title">langgraph</span>,<span class="title">ASR</span>,<span class="title">LLM</span>,<span class="title">TTS</span></span></span><br><span class="line"><span class="function"><span class="title">author</span>: <span class="title">Chr</span></span></span><br><span class="line"><span class="function"><span class="title">language</span>: <span class="title">zh</span>-<span class="title">CN</span></span></span><br><span class="line"><span class="function"><span class="title">timezone</span>: &#x27;<span class="title">Asia</span>/<span class="title">Shanghai</span>&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-导航栏"><a href="#2-导航栏" class="headerlink" title="2.导航栏"></a>2.导航栏</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>menu</code>：	</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">menu:</span></span><br><span class="line"><span class="function">  <span class="title">home</span>: / || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">home</span></span></span><br><span class="line"><span class="function">  <span class="title">about</span>: /<span class="title">about</span>/ || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">user</span></span></span><br><span class="line"><span class="function">  <span class="title">tags</span>: /<span class="title">tags</span>/ || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">tags</span></span></span><br><span class="line"><span class="function">  <span class="title">categories</span>: /<span class="title">categories</span>/ || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">th</span></span></span><br><span class="line"><span class="function">  <span class="title">archives</span>: /<span class="title">archives</span>/ || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">archive</span></span></span><br><span class="line"><span class="function">  #<span class="title">schedule</span>: /<span class="title">schedule</span>/ || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">calendar</span></span></span><br><span class="line"><span class="function">  #<span class="title">sitemap</span>: /<span class="title">sitemap.xml</span> || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">sitemap</span></span></span><br><span class="line"><span class="function">  #<span class="title">commonweal</span>: /404/ || <span class="title">fa</span> <span class="title">fa</span>-<span class="title">heartbeat</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>此时导航栏显示了，但点进去会无法访问，运行：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">n</span> page <span class="string">&quot;about&quot;</span></span><br><span class="line">hexo <span class="built_in">n</span> page <span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo <span class="built_in">n</span> page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>即会在<code>blog/source</code>文件加下新建<code>about</code>、<code>tags</code>、<code>categories</code>文件夹，每个文件夹下包含一个<code>index.md</code>文件。</p>
</li>
<li><p>此时依旧不行，需要打开各<code>index.md</code>，<code>分别</code>添加对应的<code>type</code>到头信息处，如：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="function">title: <span class="title">categories</span></span></span><br><span class="line"><span class="function"><span class="title">date</span>: 2025-01-14 18:02:22</span></span><br><span class="line"><span class="function"><span class="title">type</span>: <span class="title">categories</span></span></span><br><span class="line"><span class="function">---</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-网页底部powered-By-Hexo"><a href="#3-网页底部powered-By-Hexo" class="headerlink" title="3.网页底部powered By Hexo"></a>3.网页底部powered By Hexo</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>powered</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Powered by Hexo &amp; NexT</span><br><span class="line"><span class="function">  powered: <span class="title">false</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-代码高亮"><a href="#4-代码高亮" class="headerlink" title="4.代码高亮"></a>4.代码高亮</h3><ul>
<li><p>打开<code>blog/_config.yml</code>文件，搜索<code>highlight</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">highlight:</span></span><br><span class="line"><span class="function">  <span class="title">enable</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">line_number</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">auto_detect</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">tab_replace</span>: &#x27;&#x27;</span></span><br><span class="line"><span class="function">  <span class="title">wrap</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">hljs</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function"><span class="title">prismjs</span>:</span></span><br><span class="line"><span class="function">  <span class="title">preprocess</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">line_number</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">tab_replace</span>: &#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-代码段一键复制"><a href="#5-代码段一键复制" class="headerlink" title="5.代码段一键复制"></a>5.代码段一键复制</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>codeblock</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">codeblock:</span></span><br><span class="line"><span class="function">  # <span class="title">Code</span> <span class="title">Highlight</span> <span class="title">theme</span></span></span><br><span class="line"><span class="function">  # <span class="title">All</span> <span class="title">available</span> <span class="title">themes</span>: <span class="title">https</span>://<span class="title">theme</span>-<span class="title">next.js.org</span>/<span class="title">highlight</span>/</span></span><br><span class="line"><span class="function">  <span class="title">theme</span>:</span></span><br><span class="line"><span class="function">    <span class="title">light</span>: <span class="title">github</span>-<span class="title">dark</span></span></span><br><span class="line"><span class="function">    <span class="title">dark</span>: <span class="title">github</span>-<span class="title">dark</span></span></span><br><span class="line"><span class="function">  <span class="title">prism</span>:</span></span><br><span class="line"><span class="function">    <span class="title">light</span>: <span class="title">prism</span></span></span><br><span class="line"><span class="function">    <span class="title">dark</span>: <span class="title">prism</span>-<span class="title">dark</span></span></span><br><span class="line"><span class="function">  # <span class="title">Add</span> <span class="title">copy</span> <span class="title">button</span> <span class="title">on</span> <span class="title">codeblock</span></span></span><br><span class="line"><span class="function">  <span class="title">copy_button</span>:</span></span><br><span class="line"><span class="function">    <span class="title">enable</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">    # <span class="title">Available</span> <span class="title">values</span>: <span class="title">default</span> | <span class="title">flat</span> | <span class="title">mac</span></span></span><br><span class="line"><span class="function">    <span class="title">style</span>: <span class="title">mac</span></span></span><br><span class="line"><span class="function">  # <span class="title">Fold</span> <span class="title">code</span> <span class="title">block</span></span></span><br><span class="line"><span class="function">  <span class="title">fold</span>:</span></span><br><span class="line"><span class="function">    <span class="title">enable</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function">    <span class="title">height</span>: 500</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可在<a href="https://theme-next.js.org/highlight/">这里</a>查看代码高亮主题，选择心仪主题。</p>
</blockquote>
</li>
</ul>
<h3 id="6-显示浏览进度"><a href="#6-显示浏览进度" class="headerlink" title="6.显示浏览进度"></a>6.显示浏览进度</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>back2top</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">back2top:</span></span><br><span class="line"><span class="function">  <span class="title">enable</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  # <span class="title">Back</span> <span class="title">to</span> <span class="title">top</span> <span class="title">in</span> <span class="title">sidebar</span>.</span></span><br><span class="line"><span class="function">  <span class="title">sidebar</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  # <span class="title">Scroll</span> <span class="title">percent</span> <span class="title">label</span> <span class="title">in</span> <span class="title">b2t</span> <span class="title">button</span>.</span></span><br><span class="line"><span class="function">  <span class="title">scrollpercent</span>: <span class="title">true</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-本地搜索"><a href="#7-本地搜索" class="headerlink" title="7.本地搜索"></a>7.本地搜索</h3><ul>
<li><p>安装<code>hexo-generator-searchdb</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<code>blog/_config.yml</code>文件，添加以下代码到末尾：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">search:</span></span><br><span class="line"><span class="function"><span class="title">path</span>: <span class="title">search.xml</span></span></span><br><span class="line"><span class="function"><span class="title">field</span>: <span class="title">post</span></span></span><br><span class="line"><span class="function"><span class="title">format</span>: <span class="title">html</span></span></span><br><span class="line"><span class="function"><span class="title">limit</span>: 10000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>local_search</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">local_search:</span></span><br><span class="line"><span class="function">  <span class="title">enable</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  # <span class="title">Show</span> <span class="title">top</span> <span class="title">n</span> <span class="title">results</span> <span class="title">per</span> <span class="title">article</span>, <span class="title">show</span> <span class="title">all</span> <span class="title">results</span> <span class="title">by</span> <span class="title">setting</span> <span class="title">to</span> -1</span></span><br><span class="line"><span class="function">  <span class="title">top_n_per_article</span>: 1</span></span><br><span class="line"><span class="function">  # <span class="title">Unescape</span> <span class="title">html</span> <span class="title">strings</span> <span class="title">to</span> <span class="title">the</span> <span class="title">readable</span> <span class="title">one</span>.</span></span><br><span class="line"><span class="function">  <span class="title">unescape</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function">  # <span class="title">Preload</span> <span class="title">the</span> <span class="title">search</span> <span class="title">data</span> <span class="title">when</span> <span class="title">the</span> <span class="title">page</span> <span class="title">loads</span>.</span></span><br><span class="line"><span class="function">  <span class="title">preload</span>: <span class="title">false</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-文章字数、阅读时长和访客量、文章阅读量"><a href="#8-文章字数、阅读时长和访客量、文章阅读量" class="headerlink" title="8.文章字数、阅读时长和访客量、文章阅读量"></a>8.文章字数、阅读时长和访客量、文章阅读量</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>busuanzi_count</code>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">busuanzi_count:</span></span><br><span class="line"><span class="function">  <span class="title">enable</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">total_visitors</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">total_visitors_icon</span>: <span class="title">fa</span> <span class="title">fa</span>-<span class="title">user</span></span></span><br><span class="line"><span class="function">  <span class="title">total_views</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">total_views_icon</span>: <span class="title">fa</span> <span class="title">fa</span>-<span class="title">eye</span></span></span><br><span class="line"><span class="function">  <span class="title">post_views</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">  <span class="title">post_views_icon</span>: <span class="title">far</span> <span class="title">fa</span>-<span class="title">eye</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：本地<code>hexo s</code>查看效果时网页底部的访客量和文章阅读量的统计会不正确（很大），但<code>hexo g</code>部署在<code>GitHub Pages</code>上就没问题了。</p>
</blockquote>
</li>
</ul>
<h3 id="9-阅读全文"><a href="#9-阅读全文" class="headerlink" title="9.阅读全文"></a>9.阅读全文</h3><ul>
<li>直接在md文件中添加<code>&lt;!--more--&gt;</code>即可控制摘要内容，即控制Read More（阅读全文）的位置，可添加前言对文章进行总结提炼，详情可点击阅读全文。</li>
</ul>
<h3 id="10-插入图片"><a href="#10-插入图片" class="headerlink" title="10.插入图片"></a>10.插入图片</h3><ul>
<li>插入图片上碰到了一个问题，在<code>typora</code>上图片是正常显示的，但无论是<code>hexo s</code>还是<code>hexo d</code>都无法显示，参考<a href="https://blog.csdn.net/lengcs/article/details/143816877">这个博客</a>解决了问题。</li>
</ul>
<h3 id="11-公式支持"><a href="#11-公式支持" class="headerlink" title="11.公式支持"></a>11.公式支持</h3><ul>
<li><p>打开<code>blog/themes/next/_config.yml</code>，搜索<code>math</code>，设置如下即可：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">math:</span></span><br><span class="line"><span class="function">  # <span class="title">Default</span> (<span class="title">false</span>) <span class="title">will</span> <span class="title">load</span> <span class="title">mathjax</span> / <span class="title">katex</span> <span class="title">script</span> <span class="title">on</span> <span class="title">demand</span>.</span></span><br><span class="line"><span class="function">  # <span class="title">That</span> <span class="title">is</span> <span class="title">it</span> <span class="title">only</span> <span class="title">render</span> <span class="title">those</span> <span class="title">page</span> <span class="title">which</span> <span class="title">has</span> `<span class="title">mathjax</span>: <span class="title">true</span>` <span class="title">in</span> <span class="title">front</span>-<span class="title">matter</span>.</span></span><br><span class="line"><span class="function">  # <span class="title">If</span> <span class="title">you</span> <span class="title">set</span> <span class="title">it</span> <span class="title">to</span> <span class="title">true</span>, <span class="title">it</span> <span class="title">will</span> <span class="title">load</span> <span class="title">mathjax</span> / <span class="title">katex</span> <span class="title">script</span> <span class="title">EVERY</span> <span class="title">PAGE</span>.</span></span><br><span class="line"><span class="function">  <span class="title">every_page</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">mathjax</span>:</span></span><br><span class="line"><span class="function">    <span class="title">enable</span>: <span class="title">true</span></span></span><br><span class="line"><span class="function">    # <span class="title">Available</span> <span class="title">values</span>: <span class="title">none</span> | <span class="title">ams</span> | <span class="title">all</span></span></span><br><span class="line"><span class="function">    <span class="title">tags</span>: <span class="title">none</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">katex</span>:</span></span><br><span class="line"><span class="function">    <span class="title">enable</span>: <span class="title">false</span></span></span><br><span class="line"><span class="function">    # <span class="title">See</span>: <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">KaTeX</span>/<span class="title">KaTeX</span>/<span class="title">tree</span>/<span class="title">master</span>/<span class="title">contrib</span>/<span class="title">copy</span>-<span class="title">tex</span></span></span><br><span class="line"><span class="function">    <span class="title">copy_tex</span>: <span class="title">false</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-加粗"><a href="#12-加粗" class="headerlink" title="12 加粗"></a>12 加粗</h3><ul>
<li><p>在markdown文件中加粗使用<code>**A**</code>即可，但在网页上并没有显示加粗，我目前是用：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;A&lt;/b&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-TODO"><a href="#13-TODO" class="headerlink" title="13 TODO"></a>13 TODO</h3><hr>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://blog.csdn.net/Bennnnnnn/article/details/128000842">https://blog.csdn.net/Bennnnnnn/article/details/128000842</a></p>
</li>
<li><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93644533">https://blog.csdn.net/mqdxiaoxiao/article/details/93644533</a></p>
</li>
<li><p><a href="https://blog.csdn.net/lengcs/article/details/143816877">https://blog.csdn.net/lengcs/article/details/143816877</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>langgraph介绍及demo</title>
    <url>/2025/02/10/langgraph%E4%BB%8B%E7%BB%8D%E5%8F%8Ademo/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在现代大模型应用开发中，构建能够处理复杂任务和多步骤推理的 Agent 是一个重要需求。<strong>LangGraph</strong> 是一个基于 LangChain 的框架，专门设计用于构建和编排复杂的 Agent 工作流。它通过图（Graph）结构定义任务流程，支持循环、分支、并行等复杂逻辑，是开发高效、灵活 Agent 应用的理想选择。</p>
<p>本文将介绍 LangGraph 的核心概念，并通过几个基础示例展示如何使用它构建 Agent 应用。</p>
<span id="more"></span>

<hr>
<h2 id="Langgraph"><a href="#Langgraph" class="headerlink" title="Langgraph"></a>Langgraph</h2><p>LangGraph 是一个基于图的框架，用于定义和运行复杂的 Agent 工作流。它的核心思想是将任务分解为多个节点（Node），并通过边（Edge）连接这些节点，形成一个有向图。每个节点可以执行特定的任务（如调用 API、生成文本、处理数据等），而边则定义了任务的执行顺序和条件分支。</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ol>
<li><strong>节点（Node）</strong>：任务的基本单元，每个节点执行特定的功能</li>
<li><strong>边（Edge）</strong>：连接节点的路径，定义任务的执行顺序</li>
<li><strong>图（Graph）</strong>：由节点和边组成的工作流</li>
<li><strong>条件分支（Conditional Edge）</strong>：根据条件决定下一步执行的节点</li>
<li><strong>循环（Cycle）</strong>：支持循环执行某些节点。</li>
</ol>
<hr>
<h2 id="LangGraph-的优势"><a href="#LangGraph-的优势" class="headerlink" title="LangGraph 的优势"></a>LangGraph 的优势</h2><ul>
<li><strong>灵活性</strong>：支持复杂的工作流设计，包括分支、循环和并行任务。</li>
<li><strong>模块化</strong>：将任务分解为多个节点，便于维护和扩展。</li>
<li><strong>高效性</strong>：通过图结构优化任务执行顺序，减少冗余计算。</li>
<li><strong>易用性</strong>：与 LangChain 无缝集成，提供丰富的工具和模块。</li>
</ul>
<hr>
<h2 id="示例1：构建基本聊天机器人"><a href="#示例1：构建基本聊天机器人" class="headerlink" title="示例1：构建基本聊天机器人"></a>示例1：构建基本聊天机器人</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">https://langchain-ai.github.io/langgraph/tutorials/introduction/#part-1-build-a-basic-chatbot</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.graph.message <span class="keyword">import</span> add_messages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="built_in">list</span>, add_messages]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用局域网本地部署模型</span></span><br><span class="line"><span class="comment"># llm = ChatOpenAI(model_name=&quot;Qwen&quot;,</span></span><br><span class="line"><span class="comment">#                    openai_api_key=&#x27;Empty&#x27;,</span></span><br><span class="line"><span class="comment">#                    openai_api_base=&#x27;http://192.168.0.138:8000/v1&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置大模型参数</span></span><br><span class="line">LLM_CONFIG = &#123;</span><br><span class="line">    <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;sk-*******&quot;</span>,</span><br><span class="line">    <span class="string">&quot;base_url&quot;</span>: <span class="string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;qwen2.5-7b-instruct&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化大模型</span></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    model=LLM_CONFIG[<span class="string">&quot;model&quot;</span>],</span><br><span class="line">    openai_api_key=LLM_CONFIG[<span class="string">&quot;api_key&quot;</span>],</span><br><span class="line">    openai_api_base=LLM_CONFIG[<span class="string">&quot;base_url&quot;</span>],</span><br><span class="line">    streaming=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chatbot</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [llm.invoke(state[<span class="string">&quot;messages&quot;</span>])]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The first argument is the unique node name</span></span><br><span class="line"><span class="comment"># The second argument is the function or object that will be called whenever</span></span><br><span class="line"><span class="comment"># the node is used.</span></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;chatbot&quot;</span>, chatbot)</span><br><span class="line">graph_builder.set_entry_point(<span class="string">&quot;chatbot&quot;</span>)    <span class="comment"># graph_builder.add_edge(START, &quot;chatbot&quot;)</span></span><br><span class="line">graph_builder.set_finish_point(<span class="string">&quot;chatbot&quot;</span>)   <span class="comment"># graph_builder.add_edge(&quot;chatbot&quot;, END)</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream_graph_updates</span>(<span class="params">user_input: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;user&quot;</span>, user_input)]&#125;):</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> event.values():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Assistant:&quot;</span>, value[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;User: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input.lower() <span class="keyword">in</span> [<span class="string">&quot;quit&quot;</span>, <span class="string">&quot;exit&quot;</span>, <span class="string">&quot;q&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        stream_graph_updates(user_input)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># fallback if input() is not available</span></span><br><span class="line">        user_input = <span class="string">&quot;What do you know about LangGraph?&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;User: &quot;</span> + user_input)</span><br><span class="line">        stream_graph_updates(user_input)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<img src="/2025/02/10/langgraph%E4%BB%8B%E7%BB%8D%E5%8F%8Ademo/image-20250211153745222.png" class="" title="image-20250211153745222">



<hr>
<h2 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h2><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ol>
<li><p><strong>ReAct</strong></p>
<p>ReAct（Reasoning + Acting）是Agent的一种常见实现方式，现在主流的LLM Agent绝大多数都是基于ReAct。通过循环的推理（Reasoning）和行动（Acting）机制来执行任务。ReAct 的提出是为了解决传统语言模型只能生成文本的局限性，使其能够通过与外部环境的交互，完成更复杂的任务。</p>
<p> <strong>ReAct 的关键特点：</strong></p>
<ol>
<li>结合 <strong>思维链（CoT, Chain of Thought）</strong> 推理，提升决策能力。</li>
<li>让 Agent <strong>能动态调用工具（如 API、数据库、Python 代码）</strong>，避免局限于训练数据。</li>
<li>通过循环执行，适用于 <strong>多步骤任务（如搜索、计算、规划）</strong></li>
</ol>
</li>
<li><p>思维链（Chain of Thought, CoT）</p>
<p><strong>思维链（Chain of Thought, CoT）</strong> 是一种用于增强大语言模型推理能力的技术。它的核心思想是让模型在生成最终答案之前，先生成一系列中间推理步骤，从而模拟人类的思考过程。通过这种方式，模型能够更好地解决复杂的逻辑推理、数学计算和多步骤问题。</p>
<p>思维链的<strong>优势</strong>：</p>
<ul>
<li>提高复杂任务的<strong>准确性</strong>，通过显式生成中间步骤，模型能够更好地处理需要多步推理的任务</li>
<li>增强<strong>可解释性</strong>，思维链展示了模型的推理过程，使结果更具可解释性</li>
<li>支持<strong>动态调整</strong>，如果中间步骤出错，可以更容易地定位和修正问题</li>
<li>适用于<strong>多种任务</strong>，包括数学计算、逻辑推理、常识推理、多步骤问题解决等</li>
</ul>
<p>思维链的实现方法：</p>
<ol>
<li><p>提示词工程（Prompt Engineering）</p>
<p>通过在输入提示中明确要求模型生成思维链，引导模型分步推理。</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">小明有 <span class="number">5</span> 个苹果，他吃了 <span class="number">2</span> 个，又买了 <span class="number">3</span> 个，他现在有多少个苹果？</span><br><span class="line">请一步步思考并给出最终答案。</span><br></pre></td></tr></table></figure>
</li>
<li><p>Few-Shot</p>
<p>在输入提示中提供少量示例，展示如何生成思维链</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">问题：小明有 <span class="number">3</span> 个苹果，他吃了 <span class="number">1</span> 个，又买了 <span class="number">2</span> 个，他现在有多少个苹果？</span><br><span class="line">思考过程：</span><br><span class="line"><span class="number">1.</span> 小明一开始有 <span class="number">3</span> 个苹果。</span><br><span class="line"><span class="number">2.</span> 他吃了 <span class="number">1</span> 个，剩下 <span class="number">3</span> - <span class="number">1</span> = <span class="number">2</span> 个。</span><br><span class="line"><span class="number">3.</span> 他又买了 <span class="number">2</span> 个，现在有 <span class="number">2</span> + <span class="number">2</span> = <span class="number">4</span> 个。</span><br><span class="line"><span class="number">4.</span> 所以，小明现在有 <span class="number">4</span> 个苹果。</span><br><span class="line"></span><br><span class="line">问题：小明有 <span class="number">5</span> 个苹果，他吃了 <span class="number">2</span> 个，又买了 <span class="number">3</span> 个，他现在有多少个苹果？</span><br><span class="line">思考过程：</span><br></pre></td></tr></table></figure>
</li>
<li><p>微调模型</p>
<p>在特定任务上微调模型，使其学会生成思维链，这种方法需要大量的标注数据（包括问题和对应的思维链）</p>
</li>
</ol>
</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://langchain-ai.github.io/langgraph/#langgraph-platform">https://langchain-ai.github.io/langgraph/#langgraph-platform</a></li>
<li><a href="https://langchain-ai.github.io/langgraph/tutorials/introduction/#requirements">https://langchain-ai.github.io/langgraph/tutorials/introduction/#requirements</a></li>
</ol>
]]></content>
      <categories>
        <category>code</category>
        <category>theory</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>langgraph</tag>
        <tag>langchain</tag>
        <tag>agent</tag>
        <tag>ReAct</tag>
        <tag>CoT</tag>
      </tags>
  </entry>
  <entry>
    <title>silero_vad onnx方式使用示例</title>
    <url>/2025/02/07/silerovadonnx%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>语音活动检测（VAD, Voice Activity Detection）是语音处理中的重要技术，它用于检测音频流中是否存在语音信号。VAD 在语音识别、语音通信、语音增强等应用中起到了关键作用。例如，在语音助手、语音转写、降噪等任务中，VAD 可以帮助系统忽略无声片段，提高处理效率。</p>
<p><strong>Silero VAD</strong> 是一个轻量级、性能优异的 VAD 模型，它基于深度学习，可高效检测实时音频中的语音活动。本文将介绍如何使用 <strong>Silero VAD</strong> 进行实时语音检测，并给出一个简单的实现示例。</p>
<span id="more"></span>

<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">torch.set_num_threads(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Silero VAD 模型</span></span><br><span class="line">model, utils = torch.hub.load(repo_or_dir=<span class="string">&#x27;snakers4/silero-vad&#x27;</span>,</span><br><span class="line">                              model=<span class="string">&#x27;silero_vad&#x27;</span>,</span><br><span class="line">                              trust_repo=<span class="literal">True</span>,</span><br><span class="line">                              onnx=<span class="literal">True</span>,</span><br><span class="line">                              <span class="comment"># force_reload=True</span></span><br><span class="line">                              )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 录音参数</span></span><br><span class="line">FORMAT = pyaudio.paFloat32</span><br><span class="line">CHANNELS = <span class="number">1</span></span><br><span class="line">SAMPLE_RATE = <span class="number">16000</span></span><br><span class="line">num_samples = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 PyAudio</span></span><br><span class="line">audio = pyaudio.PyAudio()</span><br><span class="line">stream = audio.<span class="built_in">open</span>(<span class="built_in">format</span>=FORMAT,</span><br><span class="line">                    channels=CHANNELS,</span><br><span class="line">                    rate=SAMPLE_RATE,</span><br><span class="line">                    <span class="built_in">input</span>=<span class="literal">True</span>,</span><br><span class="line">                    frames_per_buffer=num_samples)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采集和vad处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_recording_and_vad</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recording...\n&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = stream.read(num_samples)</span><br><span class="line">        audio_chunk = np.frombuffer(data, dtype=np.float32)</span><br><span class="line">        speech_prob = model(torch.from_numpy(audio_chunk.copy()), SAMPLE_RATE).item()</span><br><span class="line">        <span class="keyword">if</span> speech_prob &gt; <span class="number">0.5</span>:</span><br><span class="line">            <span class="built_in">print</span>(speech_prob, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_recording_and_vad()</span><br></pre></td></tr></table></figure>

<p>也可以把录音放在单独线程里：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">torch.set_num_threads(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 Silero VAD 模型</span></span><br><span class="line">model, utils = torch.hub.load(repo_or_dir=<span class="string">&#x27;snakers4/silero-vad&#x27;</span>,</span><br><span class="line">                              model=<span class="string">&#x27;silero_vad&#x27;</span>,</span><br><span class="line">                              trust_repo=<span class="literal">True</span>,</span><br><span class="line">                              onnx=<span class="literal">True</span>,</span><br><span class="line">                              <span class="comment"># force_reload=True</span></span><br><span class="line">                              )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 录音参数</span></span><br><span class="line">FORMAT = pyaudio.paFloat32</span><br><span class="line">CHANNELS = <span class="number">1</span></span><br><span class="line">SAMPLE_RATE = <span class="number">16000</span></span><br><span class="line">num_samples = <span class="number">512</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 PyAudio</span></span><br><span class="line">audio = pyaudio.PyAudio()</span><br><span class="line">stream = audio.<span class="built_in">open</span>(<span class="built_in">format</span>=FORMAT,</span><br><span class="line">                    channels=CHANNELS,</span><br><span class="line">                    rate=SAMPLE_RATE,</span><br><span class="line">                    <span class="built_in">input</span>=<span class="literal">True</span>,</span><br><span class="line">                    frames_per_buffer=num_samples)</span><br><span class="line"></span><br><span class="line">audio_queue = Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 录音线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_recording</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recording...\n&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = stream.read(num_samples)</span><br><span class="line">        audio_chunk = np.frombuffer(data, dtype=np.float32)</span><br><span class="line">        audio_queue.put(audio_chunk)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vad_process</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting VAD...\n&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        audio_chunk = audio_queue.get()</span><br><span class="line">        speech_prob = model(torch.from_numpy(audio_chunk.copy()), SAMPLE_RATE).item()</span><br><span class="line">        <span class="keyword">if</span> speech_prob &gt; <span class="number">0.5</span>:</span><br><span class="line">            <span class="built_in">print</span>(speech_prob, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    threading.Thread(target=start_recording, daemon=<span class="literal">True</span>).start()</span><br><span class="line">    vad_process()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="/2025/02/07/silerovadonnx%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/image-20250207172346401.png" class="" title="image-20250207172346401">

<h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><p>该示例展示了如何使用 <strong>Silero VAD</strong> 进行实时语音检测，主要包括以下步骤：</p>
<ol>
<li><strong>加载 Silero VAD 模型</strong><ul>
<li>使用 <code>torch.hub.load</code> 下载并加载模型。</li>
<li>设置 <code>onnx=True</code> 以使用 ONNX 版本的模型，提高推理速度。</li>
</ul>
</li>
<li><strong>初始化音频流</strong><ul>
<li>采用 <code>pyaudio</code> 进行音频采集，设置 <strong>采样率 16kHz</strong>，每次读取 <strong>512 个样本</strong>。</li>
<li>使用 <code>Queue</code> 作为音频缓冲队列，实现<strong>生产者-消费者模型</strong>。</li>
</ul>
</li>
<li><strong>录音线程</strong> (<code>start_recording</code>)<ul>
<li>从麦克风采集音频数据并存入 <code>Queue</code>，实现<strong>非阻塞录音</strong>。</li>
</ul>
</li>
<li><strong>VAD 处理线程</strong> (<code>vad_process</code>)<ul>
<li>从 <code>Queue</code> 获取音频块，输入 <strong>Silero VAD 模型</strong> 进行预测。</li>
<li><code>speech_prob &gt; 0.5</code> 表示当前帧检测到语音，并打印语音置信度。</li>
</ul>
</li>
<li><strong>多线程运行</strong><ul>
<li>录音和 VAD 处理分别运行在<strong>不同的线程</strong>，保证实时性。</li>
</ul>
</li>
</ol>
<h3 id="一些小细节"><a href="#一些小细节" class="headerlink" title="一些小细节"></a>一些小细节</h3><ul>
<li><strong>Silero VAD</strong>输入的数据是<code>float</code>型，每次处理<code>512</code>个样本点（<code>16000kHz</code>采样率下）</li>
<li>注释掉<code>force_reload</code>以保证每次运行代码时不会从新下载模型文件（虽然不大）</li>
<li><code>audio_chunk</code>是只读数据，所以需要<code>audio_chunk.copy()</code>复制一份进行操作，不然会有警告，另外也可以使用<code>torch.tensor(audio_chunk)</code></li>
<li>关于依赖项可查看参考链接。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本示例展示了 <strong>Silero VAD</strong> 在 <strong>实时语音检测</strong> 中的基本用法。通过 <strong>PyAudio 录音 + Silero VAD 语音检测</strong>，可以实现实时 VAD 应用，如：</p>
<ul>
<li>语音助手唤醒</li>
<li>语音聊天的端点检测</li>
<li>噪音环境中的语音活动检测</li>
</ul>
<p>如果需要进一步优化，可以考虑：</p>
<ul>
<li><strong>结合 WebSocket 或 HTTP 服务，实现远程语音检测</strong></li>
<li><strong>使用 GPU 加速，提升推理速度</strong></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://github.com/snakers4/silero-vad/wiki/Examples-and-Dependencies#examples">https://github.com/snakers4/silero-vad/wiki/Examples-and-Dependencies#examples</a></li>
<li><a href="https://github.com/snakers4/silero-vad">https://github.com/snakers4/silero-vad</a></li>
</ol>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>VAD</tag>
        <tag>silero vad</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 hexo+GitHub Pages 0成本托管博客</title>
    <url>/2025/01/13/win10Hex+githubpages0%E6%88%90%E6%9C%AC%E6%89%98%E7%AE%A1%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><h3 id="1-安装Node-js和npm"><a href="#1-安装Node-js和npm" class="headerlink" title="1.安装Node.js和npm"></a>1.安装Node.js和npm</h3><ul>
<li><p>下载并安装<a href="https://nodejs.org/zh-cn">Node.js</a>（自带npm工具）</p>
</li>
<li><p>安装完成后，验证是否成功：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h3><ul>
<li><p>下载并安装Git</p>
</li>
<li><p>验证安装是否成功：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="2-初始化Hexo博客"><a href="#2-初始化Hexo博客" class="headerlink" title="2.初始化Hexo博客"></a>2.初始化Hexo博客</h2><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h3><p>终端运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装Hexo，验证安装是否成功：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<h3 id="2-创建Hexo项目"><a href="#2-创建Hexo项目" class="headerlink" title="2.创建Hexo项目"></a>2.创建Hexo项目</h3><p>在你想存放博客的目录下运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">npm instal</span><br></pre></td></tr></table></figure>

<blockquote>
<p>blog是你的博客文件夹的名称，随意命名。</p>
</blockquote>
<h3 id="3-启动本地预览"><a href="#3-启动本地预览" class="headerlink" title="3.启动本地预览"></a>3.启动本地预览</h3><p>在blog目录下运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>打开浏览器，访问<code>http://localhost:4000</code>，即可看到默认的博客页面。</p>
<hr>
<h2 id="3-配置GitHub-Pages"><a href="#3-配置GitHub-Pages" class="headerlink" title="3.配置GitHub Pages"></a>3.配置GitHub Pages</h2><h3 id="1-创建GitHub仓库"><a href="#1-创建GitHub仓库" class="headerlink" title="1.创建GitHub仓库"></a>1.创建GitHub仓库</h3><ul>
<li>登录你的GitHub，创建一个新仓库，命名为username.github.io(username替换为你的GitHub用户名)</li>
<li>这个仓库名是固定格式，GitHub Pages会自动识别并托管网页。</li>
</ul>
<h3 id="2-安装Hexo部署插件"><a href="#2-安装Hexo部署插件" class="headerlink" title="2.安装Hexo部署插件"></a>2.安装Hexo部署插件</h3><p>在blog目录下运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="3-修改Hexo配置"><a href="#3-修改Hexo配置" class="headerlink" title="3.修改Hexo配置"></a>3.修改Hexo配置</h3><p>打开blog&#x2F;_config.yml文件，拉到最后的deploy配置部分，修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<ul>
<li>repo填写你刚才创建的GitHub仓库地址</li>
<li>如果你的仓库主分支是master，将branch改为master。</li>
</ul>
<h3 id="4-首次部署"><a href="#4-首次部署" class="headerlink" title="4.首次部署"></a>4.首次部署</h3><p>运行以下命令，将博客部署到GitHub Pages:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>即可打开<code>https://username.github.io</code>查看你的博客。</p>
<hr>
<h2 id="4-自定义主题"><a href="#4-自定义主题" class="headerlink" title="4.自定义主题"></a>4.自定义主题</h2><h3 id="1-选择主题"><a href="#1-选择主题" class="headerlink" title="1.选择主题"></a>1.选择主题</h3><ul>
<li><p>以<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a>为例，在blog文件夹下运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开blog&#x2F;_config.yml文件，拉到倒数第二项的theme配置部分，修改如下：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">theme: <span class="title">yilia</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>（可选）本地预览，运行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署到GitHub Pages:</p>
<ul>
<li><p>如果运行了本地预览，仅需Ctrl + C 结束掉本地预览，再运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>若未运行本地预览，需运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-写博客和更新"><a href="#5-写博客和更新" class="headerlink" title="5.写博客和更新"></a>5.写博客和更新</h2><h3 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1.新建文章"></a>1.新建文章</h3><p>在blog目录下运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo new &quot;你的文章标题&quot;</span><br></pre></td></tr></table></figure>

<p>这会在<code>source/_posts</code> 文件夹下生成一个 <code>你的文章标题.md</code> 文件，你可以用任何文本编辑器编辑。</p>
<h3 id="2-本地预览"><a href="#2-本地预览" class="headerlink" title="2.本地预览"></a>2.本地预览</h3><p>运行以下命令本地查看效果：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h3 id="3-发布更新到GitHub-Pages"><a href="#3-发布更新到GitHub-Pages" class="headerlink" title="3.发布更新到GitHub Pages"></a>3.发布更新到GitHub Pages</h3><p>每次修改或新增内容后运行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型应用开发之agent介绍</title>
    <url>/2025/02/10/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8Bagent%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="什么是Agent"><a href="#什么是Agent" class="headerlink" title="什么是Agent"></a>什么是Agent</h2><p>Agent（智能体，代理），是指一种能够模拟人类思考和行为来自动执行程序，以解决复杂问题的程序或系统。在大模型应用开发中，Agent是指能够感知环境、做出决策并执行动作的智能实体。通常基于大模型构建，具备自然语言处理、推理、规划等能力。Agent的核心目标是通过与环境的交互完成特定任务或解决复杂问题。OpenAI将AI Agent定义为“以大语言模型为大脑驱动的系统，具备<strong>自主理解</strong>、<strong>感受</strong>、<strong>规划</strong>、<strong>记忆</strong>和<strong>使用工具</strong>的能力，能够自动化执行完成复杂任务的系统。”</p>
<p>Agent与LLM的区别：可以把LLM理解为人的大脑，LLM思考方案，agent最终使用工具完成特定任务。</p>
<h2 id="Agent架构图"><a href="#Agent架构图" class="headerlink" title="Agent架构图"></a>Agent架构图</h2><img src="/2025/02/10/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8Bagent%E4%BB%8B%E7%BB%8D/image-20250210102002343.png" class="" title="image-20250210102002343">

<ul>
<li>感知：Agent通过输入（如文本、图像、声音等）感知环境。</li>
</ul>
<img src="/2025/02/10/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E4%B9%8Bagent%E4%BB%8B%E7%BB%8D/image-20250210102630576.png" class="" title="image-20250210102630576">

<p>大模型Agent技术架构主要包括规划（Planning）、记忆（Memory）、工具（Tools）和行动（Action)）四个关键部分</p>
<ul>
<li><strong>规划（Planning）</strong>：规划是大模型Agent的思维模式，负责将任务拆解为更小、更可管理的子任务，并评估工具的执行能力。通过大模型提示工程，如ReAct、CoT推理模式，可赋予Agent类似于人类的思维方式，精确拆解复杂任务，分布执行。基于感知到的信息，Agent利用大模型的推理能力做出规划决策</li>
<li><strong>记忆（Memory）</strong>：记忆即信息存储与回忆。Agent模拟人类，设有短期记忆和长期记忆。短期记忆存储会话上下文，助力多轮对话；长期记忆存储用户特征、业务数据，实现向量数据库的速存速查</li>
<li><strong>工具（Tools）</strong>：工具是Agent感知环境、执行决策的重要手段。通过配备多样工具并赋权，如API调用业务信息、插件扩展大模型能力等，Agent可以更加灵活地应对复杂任务</li>
<li><strong>行动（Action）</strong>：行动是Agent将规划与记忆转化为实际输出的过程。Agent依托规划与记忆，执行具体行动，包括与外部互动或工具调用，实现输入至输出的转化。</li>
</ul>
<p><strong>一个典型的Agent系统架构包括以下模块</strong>：</p>
<ol>
<li><strong>输入模块</strong>：接收用户输入或环境信息（如文本、语音、图像等）</li>
<li><strong>理解模块</strong>：利用大模型对输入进行理解和分析（如意图识别、实体提取）</li>
<li><strong>推理模块</strong>：基于理解结果进行推理和决策（如生成回复、规划任务）</li>
<li><strong>执行模块</strong>：执行决策结果（如调用API、生成文本、控制设备）</li>
<li><strong>记忆模块</strong>：存储历史交互信息，支持上下文理解和长期记忆</li>
<li><strong>学习模块</strong>：通过反馈优化Agent的行为（如强化学习、在线学习）</li>
</ol>
<h3 id="一个具体的问题"><a href="#一个具体的问题" class="headerlink" title="一个具体的问题"></a>一个具体的问题</h3><p>Q:长沙今天白天和晚上温差是多少？</p>
<p>针对上述问题，你会怎么解决？</p>
<ul>
<li>查询今天天气情况，获取白天温度和晚上温度-&gt;天气查询工具</li>
<li>白天温度-晚上温度-&gt;计算器工具</li>
</ul>
<h2 id="如何开发AI-Agent"><a href="#如何开发AI-Agent" class="headerlink" title="如何开发AI Agent"></a>如何开发AI Agent</h2><p>分为两大类：</p>
<ol>
<li><p>基于python</p>
<ul>
<li>结合langchain等大模型应用开发框架</li>
<li>不使用大模型应用开发框架</li>
</ul>
</li>
<li><p>基于Dify、Coze、AutoGen等Agent开发管理平台，通过拖拉拽的方式快速生成一个Agent。</p>
</li>
</ol>
<p>下面我将用这三种方法分别实现上述的一个具体的问题：</p>
<h3 id="基于langgraph"><a href="#基于langgraph" class="headerlink" title="基于langgraph"></a>基于langgraph</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://www.bilibili.com/video/BV1dxm6YPEDB/?spm_id_from=333.337.search-card.all.click&vd_source=075a061948e76c87e2ee8754e264056e">https://www.bilibili.com/video/BV1dxm6YPEDB/?spm_id_from=333.337.search-card.all.click&amp;vd_source=075a061948e76c87e2ee8754e264056e</a></li>
<li><a href="https://www.cnblogs.com/edisonchou/p/-/quick-start-on-ai-agent-by-sk">https://www.cnblogs.com/edisonchou/p/-/quick-start-on-ai-agent-by-sk</a></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>theory</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>agent</tag>
      </tags>
  </entry>
  <entry>
    <title>说话人确认之CAM++</title>
    <url>/2025/02/11/%E8%AF%B4%E8%AF%9D%E4%BA%BA%E7%A1%AE%E8%AE%A4%E4%B9%8BCAM/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说话人确认，又名说话人验证（SV, Speaker Verification）、声纹认证、语音认证、说话人认证，是声纹识别的一个子任务，主要用于确认某个人的身份，即<strong>这个人是不是那个人</strong>。验证采用<strong>1:1对比</strong>，即用户提供的语音与已注册的声纹模版进行匹配，以决定是否通过认证。</p>
<p>本文以3D-speaker中的CAM++（ERES2Net V2也类似）为例，实验说话人确认效果。</p>
<span id="more"></span>

<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>打开<a href="https://modelscope.cn/models?page=1&tabKey=task&tasks=speaker-verification&type=audio">这个页面</a>：</p>
<img src="/2025/02/11/%E8%AF%B4%E8%AF%9D%E4%BA%BA%E7%A1%AE%E8%AE%A4%E4%B9%8BCAM/image-20250211173755013.png" class="" title="image-20250211173755013">

<p>点击上图所示箭头，往下拉可看到示例：</p>
<img src="/2025/02/11/%E8%AF%B4%E8%AF%9D%E4%BA%BA%E7%A1%AE%E8%AE%A4%E4%B9%8BCAM/image-20250211173929098.png" class="" title="image-20250211173929098">

<p>我们实操下：</p>
<ul>
<li><p>首先准备下环境（缺啥安啥）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install modelscope addict datasets simplejson sortedcontainers</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modelscope.pipelines <span class="keyword">import</span> pipeline</span><br><span class="line">sv_pipeline = pipeline(</span><br><span class="line">    task=<span class="string">&#x27;speaker-verification&#x27;</span>,</span><br><span class="line">    model=<span class="string">&#x27;iic/speech_campplus_sv_zh_en_16k-common_advanced&#x27;</span>,</span><br><span class="line">    model_revision=<span class="string">&#x27;v1.0.0&#x27;</span></span><br><span class="line">)</span><br><span class="line">speaker1_a_wav = <span class="string">&#x27;https://modelscope.cn/api/v1/models/iic/speech_campplus_sv_zh_en_16k-common_advanced/repo?Revision=master&amp;FilePath=examples/speaker1_a_cn_16k.wav&#x27;</span></span><br><span class="line">speaker1_b_wav = <span class="string">&#x27;https://modelscope.cn/api/v1/models/iic/speech_campplus_sv_zh_en_16k-common_advanced/repo?Revision=master&amp;FilePath=examples/speaker1_b_cn_16k.wav&#x27;</span></span><br><span class="line">speaker2_a_wav = <span class="string">&#x27;https://modelscope.cn/api/v1/models/iic/speech_campplus_sv_zh_en_16k-common_advanced/repo?Revision=master&amp;FilePath=examples/speaker2_a_cn_16k.wav&#x27;</span></span><br><span class="line"><span class="comment"># 相同说话人语音</span></span><br><span class="line">result = sv_pipeline([speaker1_a_wav, speaker1_b_wav])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 不同说话人语音</span></span><br><span class="line">result = sv_pipeline([speaker1_a_wav, speaker2_a_wav])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 可以自定义得分阈值来进行识别，阈值越高，判定为同一人的条件越严格</span></span><br><span class="line">result = sv_pipeline([speaker1_a_wav, speaker2_a_wav], thr=<span class="number">0.33</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 可以传入output_emb参数，输出结果中就会包含提取到的说话人embedding</span></span><br><span class="line">result = sv_pipeline([speaker1_a_wav, speaker2_a_wav], output_emb=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&#x27;embs&#x27;</span>], result[<span class="string">&#x27;outputs&#x27;</span>])</span><br><span class="line"><span class="comment"># 可以传入save_dir参数，提取到的说话人embedding会存储在save_dir目录中</span></span><br><span class="line">result = sv_pipeline([speaker1_a_wav, speaker2_a_wav], save_dir=<span class="string">&#x27;savePath/&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\Anaconda3\envs\langchain\python.exe E:\chr_git\langchain_t\langgraph\sv_cam.py </span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">39</span>,<span class="number">106</span> - modelscope - INFO - Use user-specified model revision: v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line">Downloading Model to directory: C:\Users\<span class="built_in">chr</span>\.cache\modelscope\hub\iic\speech_campplus_sv_zh_en_16k-common_advanced</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">40</span>,<span class="number">208</span> - modelscope - INFO - Use user-specified model revision: v1<span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">40</span>,<span class="number">494</span> - modelscope - INFO - Got <span class="number">9</span> files, start to download ...</span><br><span class="line">Processing <span class="number">9</span> items:   <span class="number">0</span>%|          | <span class="number">0.00</span>/<span class="number">9.00</span> [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?it/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/<span class="number">26.7</span>M [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line">Downloading [config.yaml]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/<span class="number">537</span> [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [dingding.jpg]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/180k [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [quickstart.md]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/<span class="number">1.53</span>k [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [README.md]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/<span class="number">5.83</span>k [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [examples/speaker1_a_cn_16k.wav]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/116k [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [examples/speaker1_b_cn_16k.wav]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/153k [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [examples/speaker2_a_cn_16k.wav]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/166k [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [quickstart.md]: <span class="number">100</span>%|██████████| <span class="number">1.53</span>k/<span class="number">1.53</span>k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">3.96</span>kB/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [config.yaml]: <span class="number">100</span>%|██████████| <span class="number">537</span>/<span class="number">537</span> [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">1.32</span>kB/s]</span><br><span class="line">Processing <span class="number">9</span> items:  <span class="number">11</span>%|█         | <span class="number">1.00</span>/<span class="number">9.00</span> [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:03, <span class="number">2.43</span>it/s]</span><br><span class="line"></span><br><span class="line">Downloading [structure.png]:   <span class="number">0</span>%|          | <span class="number">0.00</span>/279k [<span class="number">00</span>:<span class="number">00</span>&lt;?, ?B/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [README.md]: <span class="number">100</span>%|██████████| <span class="number">5.83</span>k/<span class="number">5.83</span>k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">13.0</span>kB/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [examples/speaker1_a_cn_16k.wav]: <span class="number">100</span>%|██████████| 116k/116k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, 225kB/s]</span><br><span class="line">Processing <span class="number">9</span> items:  <span class="number">44</span>%|████▍     | <span class="number">4.00</span>/<span class="number">9.00</span> [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">8.67</span>it/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [examples/speaker2_a_cn_16k.wav]: <span class="number">100</span>%|██████████| 166k/166k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, 311kB/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [examples/speaker2_a_cn_16k.wav]: <span class="number">100</span>%|██████████| 166k/166k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, 311kB/s]</span><br><span class="line">Downloading [examples/speaker1_b_cn_16k.wav]: <span class="number">100</span>%|██████████| 153k/153k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, 287kB/s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading [dingding.jpg]: <span class="number">100</span>%|██████████| 180k/180k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, 273kB/s]</span><br><span class="line">Processing <span class="number">9</span> items:  <span class="number">78</span>%|███████▊  | <span class="number">7.00</span>/<span class="number">9.00</span> [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">12.7</span>it/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:   <span class="number">4</span>%|▎         | <span class="number">1.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">19</span>, <span class="number">1.38</span>MB/s]</span><br><span class="line"></span><br><span class="line">Downloading [structure.png]: <span class="number">100</span>%|██████████| 279k/279k [<span class="number">00</span>:<span class="number">00</span>&lt;<span class="number">00</span>:<span class="number">00</span>, 466kB/s]</span><br><span class="line"></span><br><span class="line">Downloading [campplus_cn_en_common.pt]:   <span class="number">7</span>%|▋         | <span class="number">2.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:01&lt;<span class="number">00</span>:<span class="number">12</span>, <span class="number">2.02</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">11</span>%|█         | <span class="number">3.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:01&lt;<span class="number">00</span>:<span class="number">11</span>, <span class="number">2.14</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">15</span>%|█▍        | <span class="number">4.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:01&lt;<span class="number">00</span>:09, <span class="number">2.49</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">19</span>%|█▊        | <span class="number">5.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:02&lt;<span class="number">00</span>:06, <span class="number">3.35</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">22</span>%|██▏       | <span class="number">6.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:02&lt;<span class="number">00</span>:08, <span class="number">2.69</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">26</span>%|██▌       | <span class="number">7.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:02&lt;<span class="number">00</span>:07, <span class="number">2.59</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">30</span>%|██▉       | <span class="number">8.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:03&lt;<span class="number">00</span>:07, <span class="number">2.51</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">34</span>%|███▎      | <span class="number">9.00</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:03&lt;<span class="number">00</span>:07, <span class="number">2.43</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">37</span>%|███▋      | <span class="number">10.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:04&lt;<span class="number">00</span>:07, <span class="number">2.45</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">41</span>%|████      | <span class="number">11.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:04&lt;<span class="number">00</span>:05, <span class="number">2.87</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">45</span>%|████▍     | <span class="number">12.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:04&lt;<span class="number">00</span>:05, <span class="number">2.67</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">49</span>%|████▊     | <span class="number">13.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:05&lt;<span class="number">00</span>:05, <span class="number">2.57</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">52</span>%|█████▏    | <span class="number">14.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:05&lt;<span class="number">00</span>:05, <span class="number">2.54</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">56</span>%|█████▌    | <span class="number">15.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:05&lt;<span class="number">00</span>:03, <span class="number">3.16</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">60</span>%|█████▉    | <span class="number">16.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:06&lt;<span class="number">00</span>:04, <span class="number">2.80</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">64</span>%|██████▎   | <span class="number">17.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:06&lt;<span class="number">00</span>:03, <span class="number">2.58</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">67</span>%|██████▋   | <span class="number">18.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:07&lt;<span class="number">00</span>:03, <span class="number">2.50</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">71</span>%|███████   | <span class="number">19.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:07&lt;<span class="number">00</span>:02, <span class="number">3.22</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">75</span>%|███████▍  | <span class="number">20.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:07&lt;<span class="number">00</span>:02, <span class="number">3.34</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">79</span>%|███████▊  | <span class="number">21.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:08&lt;<span class="number">00</span>:02, <span class="number">2.49</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">82</span>%|████████▏ | <span class="number">22.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:09&lt;<span class="number">00</span>:03, <span class="number">1.50</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">90</span>%|████████▉ | <span class="number">24.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:<span class="number">10</span>&lt;<span class="number">00</span>:01, <span class="number">2.41</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">93</span>%|█████████▎| <span class="number">25.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:<span class="number">10</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">2.10</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]:  <span class="number">97</span>%|█████████▋| <span class="number">26.0</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:<span class="number">11</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">2.05</span>MB/s]</span><br><span class="line">Downloading [campplus_cn_en_common.pt]: <span class="number">100</span>%|██████████| <span class="number">26.7</span>M/<span class="number">26.7</span>M [<span class="number">00</span>:<span class="number">11</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">2.40</span>MB/s]</span><br><span class="line">Processing <span class="number">9</span> items: <span class="number">100</span>%|██████████| <span class="number">9.00</span>/<span class="number">9.00</span> [<span class="number">00</span>:<span class="number">11</span>&lt;<span class="number">00</span>:<span class="number">00</span>, <span class="number">1.30</span>s/it]</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">177</span> - modelscope - INFO - Download model <span class="string">&#x27;iic/speech_campplus_sv_zh_en_16k-common_advanced&#x27;</span> successfully.</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">409</span> - modelscope - INFO - initiate model <span class="keyword">from</span> C:\Users\<span class="built_in">chr</span>\.cache\modelscope\hub\iic\speech_campplus_sv_zh_en_16k-common_advanced</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">410</span> - modelscope - INFO - initiate model <span class="keyword">from</span> location C:\Users\<span class="built_in">chr</span>\.cache\modelscope\hub\iic\speech_campplus_sv_zh_en_16k-common_advanced.</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">414</span> - modelscope - INFO - initialize model <span class="keyword">from</span> C:\Users\<span class="built_in">chr</span>\.cache\modelscope\hub\iic\speech_campplus_sv_zh_en_16k-common_advanced</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">422</span> - modelscope - INFO - cuda <span class="keyword">is</span> <span class="keyword">not</span> available, using cpu instead.</span><br><span class="line">D:\Anaconda3\envs\langchain\lib\site-packages\modelscope\models\audio\sv\DTDNN.py:<span class="number">201</span>: FutureWarning: You are using `torch.load` <span class="keyword">with</span> `weights_only=<span class="literal">False</span>` (the current default value), which uses the default pickle module implicitly. It <span class="keyword">is</span> possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md<span class="comment">#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don&#x27;t have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.</span></span><br><span class="line">  torch.load(</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">673</span> - modelscope - WARNING - No preprocessor field found <span class="keyword">in</span> cfg.</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">673</span> - modelscope - WARNING - No val key <span class="keyword">and</span> <span class="built_in">type</span> key found <span class="keyword">in</span> preprocessor domain of configuration.json file.</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">673</span> - modelscope - WARNING - Cannot find available config to build preprocessor at mode inference, current config: &#123;<span class="string">&#x27;model_dir&#x27;</span>: <span class="string">&#x27;C:\\Users\\chr\\.cache\\modelscope\\hub\\iic\\speech_campplus_sv_zh_en_16k-common_advanced&#x27;</span>&#125;. trying to build by task <span class="keyword">and</span> model information.</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">673</span> - modelscope - WARNING - No preprocessor key (<span class="string">&#x27;cam++-sv&#x27;</span>, <span class="string">&#x27;speaker-verification&#x27;</span>) found <span class="keyword">in</span> PREPROCESSOR_MAP, skip building preprocessor.</span><br><span class="line"><span class="number">2025</span>-02-<span class="number">11</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">52</span>,<span class="number">677</span> - modelscope - INFO - cuda <span class="keyword">is</span> <span class="keyword">not</span> available, using cpu instead.</span><br><span class="line">&#123;<span class="string">&#x27;score&#x27;</span>: <span class="number">0.66675</span>, <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;score&#x27;</span>: <span class="number">0.06705</span>, <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;no&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;score&#x27;</span>: <span class="number">0.06705</span>, <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;no&#x27;</span>&#125;</span><br><span class="line">[[ <span class="number">5.17292559e-01</span>  <span class="number">3.51756930e-01</span> -<span class="number">5.19109607e-01</span>  <span class="number">1.04136956e+00</span></span><br><span class="line">  -<span class="number">8.84463251e-01</span>  <span class="number">1.86093241e-01</span> -<span class="number">7.06084728e-01</span> -<span class="number">1.14493757e-01</span></span><br><span class="line">  -<span class="number">4.59557921e-02</span>  <span class="number">8.43211293e-01</span> -<span class="number">4.84604180e-01</span>  <span class="number">7.73771107e-01</span></span><br><span class="line">   <span class="number">5.21692932e-01</span> -<span class="number">6.00100309e-02</span>  <span class="number">5.60589850e-01</span> -<span class="number">2.14882836e-01</span></span><br><span class="line">  -<span class="number">4.54094410e-02</span>  <span class="number">1.47872639e+00</span> -<span class="number">5.22940993e-01</span> -<span class="number">2.57876813e-01</span></span><br><span class="line">  -<span class="number">9.69329894e-01</span> -<span class="number">4.64182615e-01</span>  <span class="number">8.96886945e-01</span> -<span class="number">8.14425230e-01</span></span><br><span class="line">  -<span class="number">4.68755901e-01</span>  <span class="number">9.49460089e-01</span>  <span class="number">1.12195504e+00</span> -<span class="number">1.54829323e-02</span></span><br><span class="line">  -<span class="number">1.00103891e+00</span>  <span class="number">2.16494590e-01</span> -<span class="number">5.27387917e-01</span>  <span class="number">1.17877491e-01</span></span><br><span class="line">  -<span class="number">2.15744048e-01</span>  <span class="number">3.73795688e-01</span> -<span class="number">1.35419041e-01</span>  <span class="number">1.53922290e-01</span></span><br><span class="line">  -<span class="number">1.19627900e-01</span> -<span class="number">5.01048803e-01</span>  <span class="number">5.88355064e-02</span> -<span class="number">3.22206885e-01</span></span><br><span class="line">  -<span class="number">5.98066866e-01</span>  <span class="number">7.55107403e-03</span>  <span class="number">1.73359513e-02</span>  <span class="number">1.94534451e-01</span></span><br><span class="line">   <span class="number">2.74982810e-01</span>  <span class="number">8.69932890e-01</span>  <span class="number">1.19620025e-01</span> -<span class="number">2.21478686e-01</span></span><br><span class="line">  -<span class="number">7.24950612e-01</span>  <span class="number">9.44164038e-01</span> -<span class="number">1.06343377e+00</span>  <span class="number">3.97718161e-01</span></span><br><span class="line">   <span class="number">8.16908181e-02</span>  <span class="number">3.06026936e-01</span>  <span class="number">4.76752698e-01</span> -<span class="number">9.23305750e-03</span></span><br><span class="line">  -<span class="number">8.83808494e-01</span> -<span class="number">6.84341550e-01</span> -<span class="number">7.87354589e-01</span> -<span class="number">3.96643579e-01</span></span><br><span class="line">   <span class="number">9.05797243e-01</span>  <span class="number">1.10675704e+00</span>  <span class="number">5.30054748e-01</span> -<span class="number">3.84964705e-01</span></span><br><span class="line">   <span class="number">2.64517397e-01</span>  <span class="number">1.62003934e-01</span>  <span class="number">7.51856685e-01</span> -<span class="number">2.92150199e-01</span></span><br><span class="line">  -<span class="number">2.36718655e-01</span> -<span class="number">2.30451941e-01</span> -<span class="number">5.44483185e-01</span> -<span class="number">9.03511643e-02</span></span><br><span class="line">  -<span class="number">4.38859731e-01</span> -<span class="number">4.57940936e-01</span>  <span class="number">1.22628438e+00</span>  <span class="number">8.45105052e-01</span></span><br><span class="line">  -<span class="number">3.02865386e-01</span> -<span class="number">1.12381375e+00</span> -<span class="number">9.06042695e-01</span> -<span class="number">7.30945691e-02</span></span><br><span class="line">   <span class="number">7.12829977e-02</span>  <span class="number">5.69367051e-01</span>  <span class="number">3.02581012e-01</span>  <span class="number">4.60172236e-01</span></span><br><span class="line">  -<span class="number">3.80096495e-01</span>  <span class="number">5.49874485e-01</span>  <span class="number">4.31633592e-02</span> -<span class="number">1.28434777e-01</span></span><br><span class="line">  -<span class="number">3.43303561e-01</span> -<span class="number">1.93311483e-01</span> -<span class="number">3.29556495e-01</span> -<span class="number">4.82387066e-01</span></span><br><span class="line">  -<span class="number">6.99172556e-01</span>  <span class="number">9.15286541e-02</span> -<span class="number">7.82371938e-01</span>  <span class="number">2.61282325e-01</span></span><br><span class="line">  -<span class="number">5.33845603e-01</span>  <span class="number">1.07789731e+00</span> -<span class="number">4.53783393e-01</span> -<span class="number">1.72081560e-01</span></span><br><span class="line">  -<span class="number">1.39055848e-02</span>  <span class="number">2.54161805e-02</span>  <span class="number">6.15289286e-02</span> -<span class="number">1.92653209e-01</span></span><br><span class="line">   <span class="number">1.19427991e+00</span> -<span class="number">3.27776909e-01</span> -<span class="number">8.29883754e-01</span>  <span class="number">6.54659748e-01</span></span><br><span class="line">   <span class="number">2.49716938e-01</span>  <span class="number">8.99712503e-01</span>  <span class="number">3.86061668e-01</span>  <span class="number">1.30253151e-01</span></span><br><span class="line">   <span class="number">8.22714567e-01</span> -<span class="number">3.76180500e-01</span>  <span class="number">1.74437940e-01</span> -<span class="number">5.13129532e-01</span></span><br><span class="line">  -<span class="number">4.34209645e-01</span>  <span class="number">9.74657416e-01</span> -<span class="number">1.05046511e+00</span> -<span class="number">1.09075785e-01</span></span><br><span class="line">  -<span class="number">2.31605679e-01</span>  <span class="number">5.99238396e-01</span> -<span class="number">1.51118135e+00</span>  <span class="number">7.44090855e-01</span></span><br><span class="line">  -<span class="number">1.90891251e-01</span> -<span class="number">4.40841556e-01</span>  <span class="number">1.02210104e+00</span> -<span class="number">2.54133761e-01</span></span><br><span class="line">   <span class="number">8.02177846e-01</span> -<span class="number">8.05513710e-02</span>  <span class="number">4.17059243e-01</span> -<span class="number">9.72769558e-02</span></span><br><span class="line">  -<span class="number">9.29510295e-02</span> -<span class="number">3.53281915e-01</span>  <span class="number">2.89921045e-01</span> -<span class="number">2.42230371e-01</span></span><br><span class="line">  -<span class="number">6.14224136e-01</span>  <span class="number">7.31607139e-01</span>  <span class="number">7.88372993e-01</span> -<span class="number">2.74549931e-01</span></span><br><span class="line">  -<span class="number">4.67905670e-01</span>  <span class="number">1.52577460e-01</span>  <span class="number">1.48346639e+00</span> -<span class="number">6.66111171e-01</span></span><br><span class="line">   <span class="number">2.17945620e-01</span> -<span class="number">7.95153007e-02</span>  <span class="number">1.85961217e-01</span>  <span class="number">1.15073085e-01</span></span><br><span class="line">   <span class="number">3.58417809e-01</span> -<span class="number">6.94913507e-01</span> -<span class="number">2.00562179e-01</span> -<span class="number">1.54712462e+00</span></span><br><span class="line">   <span class="number">9.81292009e-01</span>  <span class="number">8.26795280e-01</span>  <span class="number">7.15665519e-02</span> -<span class="number">9.62617457e-01</span></span><br><span class="line">   <span class="number">5.09188056e-01</span> -<span class="number">4.38147187e-02</span>  <span class="number">1.20770991e-01</span>  <span class="number">6.51952267e-01</span></span><br><span class="line">   <span class="number">2.24566415e-01</span> -<span class="number">6.61961317e-01</span> -<span class="number">7.10181653e-01</span> -<span class="number">6.14712238e-02</span></span><br><span class="line">   <span class="number">8.87019038e-01</span> -<span class="number">2.26258770e-01</span>  <span class="number">2.09042192e-01</span> -<span class="number">4.44577336e-02</span></span><br><span class="line">   <span class="number">5.74253201e-01</span>  <span class="number">2.51746982e-01</span>  <span class="number">9.16980624e-01</span> -<span class="number">9.91094634e-02</span></span><br><span class="line">  -<span class="number">1.21540618e+00</span> -<span class="number">5.14432073e-01</span> -<span class="number">6.20832205e-01</span>  <span class="number">5.94622552e-01</span></span><br><span class="line">  -<span class="number">3.11303854e-01</span>  <span class="number">5.03932536e-01</span>  <span class="number">4.79328573e-01</span>  <span class="number">8.39833319e-02</span></span><br><span class="line">  -<span class="number">6.90203846e-01</span> -<span class="number">4.30748940e-01</span> -<span class="number">4.96636212e-01</span> -<span class="number">5.60464203e-01</span></span><br><span class="line">   <span class="number">1.27690360e-01</span> -<span class="number">5.91111362e-01</span>  <span class="number">6.79141521e-01</span> -<span class="number">1.45777613e-01</span></span><br><span class="line">   <span class="number">4.13525581e-01</span>  <span class="number">5.22236824e-01</span>  <span class="number">4.90390390e-01</span>  <span class="number">8.48809719e-01</span>]</span><br><span class="line"> [ <span class="number">3.15564185e-01</span>  <span class="number">4.57967043e-01</span> -<span class="number">4.94653881e-01</span>  <span class="number">6.57682896e-01</span></span><br><span class="line">  -<span class="number">4.51911688e-01</span> -<span class="number">5.90668023e-01</span> -<span class="number">4.62758869e-01</span>  <span class="number">8.63914073e-01</span></span><br><span class="line">   <span class="number">8.74602020e-01</span>  <span class="number">3.85936528e-01</span> -<span class="number">3.78984511e-01</span>  <span class="number">5.50751984e-02</span></span><br><span class="line">  -<span class="number">4.65507030e-01</span> -<span class="number">8.40046555e-02</span> -<span class="number">5.19473851e-03</span>  <span class="number">1.10222042e-01</span></span><br><span class="line">  -<span class="number">6.22997403e-01</span> -<span class="number">7.10828304e-01</span>  <span class="number">3.81044805e-01</span> -<span class="number">8.32391381e-02</span></span><br><span class="line">   <span class="number">2.97066033e-01</span>  <span class="number">3.62760156e-01</span> -<span class="number">2.54004717e-01</span>  <span class="number">5.34730077e-01</span></span><br><span class="line">  -<span class="number">9.28971231e-01</span>  <span class="number">1.34461880e-01</span> -<span class="number">6.27328813e-01</span> -<span class="number">1.30564496e-01</span></span><br><span class="line">   <span class="number">8.80748332e-02</span> -<span class="number">7.82362044e-01</span> -<span class="number">4.40445215e-01</span>  <span class="number">8.15549135e-01</span></span><br><span class="line">  -<span class="number">1.85342640e-01</span> -<span class="number">5.37359416e-01</span>  <span class="number">6.61574423e-01</span>  <span class="number">7.33562648e-01</span></span><br><span class="line">   <span class="number">1.96874350e-01</span>  <span class="number">2.51633137e-01</span> -<span class="number">5.20558178e-01</span>  <span class="number">3.16209406e-01</span></span><br><span class="line">  -<span class="number">2.16073051e-01</span>  <span class="number">7.34751105e-01</span>  <span class="number">2.39810407e-01</span> -<span class="number">2.94980928e-02</span></span><br><span class="line">  -<span class="number">2.09395558e-01</span>  <span class="number">8.97269487e-01</span>  <span class="number">9.30367827e-01</span>  <span class="number">1.29151270e-01</span></span><br><span class="line">  -<span class="number">4.42958087e-01</span>  <span class="number">5.96124351e-01</span> -<span class="number">1.33888125e-02</span> -<span class="number">1.97758794e-01</span></span><br><span class="line">  -<span class="number">1.19977486e+00</span>  <span class="number">3.11827540e-01</span>  <span class="number">1.02562070e+00</span>  <span class="number">2.68472373e-01</span></span><br><span class="line">   <span class="number">2.87927538e-01</span> -<span class="number">1.93298161e-02</span> -<span class="number">6.61130130e-01</span> -<span class="number">1.50255144e-01</span></span><br><span class="line">  -<span class="number">2.03645170e-01</span> -<span class="number">3.59881043e-01</span>  <span class="number">4.36608911e-01</span>  <span class="number">8.33720744e-01</span></span><br><span class="line">   <span class="number">5.38385570e-01</span> -<span class="number">5.74404895e-01</span>  <span class="number">1.07515907e+00</span>  <span class="number">9.43793476e-01</span></span><br><span class="line">   <span class="number">7.93444753e-01</span>  <span class="number">1.82356954e-01</span> -<span class="number">1.03665091e-01</span>  <span class="number">7.72922933e-02</span></span><br><span class="line">   <span class="number">1.46000326e-01</span>  <span class="number">3.47233146e-01</span> -<span class="number">4.96966898e-01</span>  <span class="number">3.10336739e-01</span></span><br><span class="line">  -<span class="number">2.02182326e-02</span> -<span class="number">3.96373332e-01</span>  <span class="number">4.41722274e-02</span> -<span class="number">6.83741868e-01</span></span><br><span class="line">   <span class="number">1.38280725e+00</span>  <span class="number">7.01525509e-01</span>  <span class="number">1.23545921e+00</span> -<span class="number">9.07853723e-01</span></span><br><span class="line">  -<span class="number">6.90056920e-01</span>  <span class="number">4.35101867e-01</span> -<span class="number">2.04400703e-01</span> -<span class="number">7.76575983e-01</span></span><br><span class="line">  -<span class="number">1.36691511e+00</span> -<span class="number">6.62955493e-02</span> -<span class="number">3.98840904e-01</span>  <span class="number">8.06303442e-01</span></span><br><span class="line">  -<span class="number">4.37378556e-01</span> -<span class="number">9.84914899e-02</span>  <span class="number">8.84133279e-02</span> -<span class="number">8.12064528e-01</span></span><br><span class="line">   <span class="number">1.07465684e-02</span> -<span class="number">4.01330411e-01</span>  <span class="number">6.80235505e-01</span>  <span class="number">7.63685465e-01</span></span><br><span class="line">   <span class="number">1.58732682e-01</span>  <span class="number">3.67013425e-01</span>  <span class="number">3.19862068e-02</span> -<span class="number">2.44175047e-01</span></span><br><span class="line">   <span class="number">2.53655404e-01</span>  <span class="number">9.12933707e-01</span> -<span class="number">4.69770804e-02</span>  <span class="number">6.44307971e-01</span></span><br><span class="line">   <span class="number">1.49383228e-02</span>  <span class="number">2.61292070e-01</span> -<span class="number">6.32562160e-01</span> -<span class="number">3.49105418e-01</span></span><br><span class="line">  -<span class="number">4.75405365e-01</span> -<span class="number">6.52082801e-01</span>  <span class="number">5.21956563e-01</span>  <span class="number">9.67081189e-02</span></span><br><span class="line">  -<span class="number">1.32706627e-01</span> -<span class="number">2.04909891e-01</span>  <span class="number">3.35076064e-01</span> -<span class="number">6.14212632e-01</span></span><br><span class="line">   <span class="number">1.15394831e+00</span>  <span class="number">1.23360729e+00</span> -<span class="number">2.94713438e-01</span>  <span class="number">5.84973454e-01</span></span><br><span class="line">  -<span class="number">3.37145239e-01</span>  <span class="number">1.29075080e-01</span>  <span class="number">9.09939706e-02</span> -<span class="number">8.49090099e-01</span></span><br><span class="line">   <span class="number">5.97871602e-01</span>  <span class="number">4.67231959e-01</span>  <span class="number">7.34776258e-04</span>  <span class="number">5.30537724e-01</span></span><br><span class="line">  -<span class="number">9.21570659e-02</span> -<span class="number">3.04171085e-01</span> -<span class="number">5.05705416e-01</span> -<span class="number">2.09868699e-01</span></span><br><span class="line">   <span class="number">2.11636186e-01</span>  <span class="number">7.23479390e-01</span> -<span class="number">2.44709343e-01</span> -<span class="number">6.41815186e-01</span></span><br><span class="line">  -<span class="number">2.89389044e-01</span>  <span class="number">5.78832030e-01</span> -<span class="number">1.12853718e+00</span>  <span class="number">9.20033813e-01</span></span><br><span class="line">  -<span class="number">5.97535789e-01</span> -<span class="number">2.32375890e-01</span>  <span class="number">1.47983253e-01</span>  <span class="number">1.73475608e-01</span></span><br><span class="line">   <span class="number">1.11372106e-01</span> -<span class="number">1.11495459e+00</span> -<span class="number">5.47205508e-01</span> -<span class="number">5.25614560e-01</span></span><br><span class="line">   <span class="number">7.83065557e-02</span>  <span class="number">3.37094992e-01</span> -<span class="number">4.04473186e-01</span> -<span class="number">3.56748551e-01</span></span><br><span class="line">  -<span class="number">1.10799873e+00</span> -<span class="number">1.43664896e-01</span> -<span class="number">1.92755520e-01</span> -<span class="number">5.26487410e-01</span></span><br><span class="line">   <span class="number">1.35022593e+00</span>  <span class="number">1.07109398e-02</span>  <span class="number">9.16564941e-01</span>  <span class="number">3.09872508e-01</span></span><br><span class="line">  -<span class="number">3.61863613e-01</span>  <span class="number">9.91901100e-01</span>  <span class="number">4.22148585e-01</span>  <span class="number">5.31754851e-01</span></span><br><span class="line">   <span class="number">1.30577040e+00</span> -<span class="number">2.45162472e-02</span> -<span class="number">3.92629087e-01</span>  <span class="number">2.64692843e-01</span></span><br><span class="line">  -<span class="number">1.76238507e-01</span>  <span class="number">1.78861052e-01</span>  <span class="number">4.46414322e-01</span> -<span class="number">6.35122657e-01</span></span><br><span class="line">   <span class="number">4.95202839e-02</span>  <span class="number">5.47002256e-03</span> -<span class="number">2.41250843e-01</span>  <span class="number">1.43662542e-01</span></span><br><span class="line">  -<span class="number">3.43859792e-01</span> -<span class="number">5.02784669e-01</span> -<span class="number">5.02928913e-01</span> -<span class="number">1.25779867e-01</span></span><br><span class="line">   <span class="number">2.29348108e-01</span> -<span class="number">2.40141839e-01</span> -<span class="number">1.79208696e-01</span> -<span class="number">2.16224715e-02</span></span><br><span class="line">   <span class="number">7.27228999e-01</span>  <span class="number">4.39823978e-02</span>  <span class="number">5.71268380e-01</span>  <span class="number">3.78142953e-01</span>]] &#123;<span class="string">&#x27;score&#x27;</span>: <span class="number">0.06705</span>, <span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;no&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同时也出现个新文件夹包含说话人的embedding：</p>
</li>
</ul>
<img src="/2025/02/11/%E8%AF%B4%E8%AF%9D%E4%BA%BA%E7%A1%AE%E8%AE%A4%E4%B9%8BCAM/image-20250211175900335.png" class="" title="image-20250211175900335">

<p>好，目前看下来还不错，用实际的录音测试下效果：</p>
<p>准备了五条音频：</p>
<img src="/2025/02/11/%E8%AF%B4%E8%AF%9D%E4%BA%BA%E7%A1%AE%E8%AE%A4%E4%B9%8BCAM/image-20250211181501480.png" class="" title="image-20250211181501480">

<p>两条中文（zh），两条英文（en），一条先中后英，设计几组实验：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> modelscope.pipelines <span class="keyword">import</span> pipeline</span><br><span class="line">sv_pipeline = pipeline(</span><br><span class="line">    task=<span class="string">&#x27;speaker-verification&#x27;</span>,</span><br><span class="line">    model=<span class="string">&#x27;iic/speech_campplus_sv_zh_en_16k-common_advanced&#x27;</span>,</span><br><span class="line">    model_revision=<span class="string">&#x27;v1.0.0&#x27;</span></span><br><span class="line">)</span><br><span class="line">en1 = <span class="string">&quot;en.wav&quot;</span></span><br><span class="line">en2 = <span class="string">&quot;en2.wav&quot;</span></span><br><span class="line">zh1 = <span class="string">&quot;zh.wav&quot;</span></span><br><span class="line">zh2 = <span class="string">&quot;zh2.wav&quot;</span></span><br><span class="line">zh_en = <span class="string">&quot;zh_en.wav&quot;</span></span><br><span class="line"></span><br><span class="line">result = sv_pipeline([zh1, zh2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;zh1-zh2=<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">result = sv_pipeline([zh1, en1])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;zh1-en1=<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">result = sv_pipeline([zh2, en2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;zh2-en2=<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">result = sv_pipeline([en1, en2])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;en1-en2=<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">result = sv_pipeline([en1, zh1])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;en1-zh1=<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">result = sv_pipeline([en1, zh_en])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;en1-zh_en=<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">result = sv_pipeline([zh1, zh_en])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;zh1-zh_en=<span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>对比项</th>
<th>分数</th>
</tr>
</thead>
<tbody><tr>
<td>zh1-zh2</td>
<td>0.72488</td>
</tr>
<tr>
<td>zh1-en1</td>
<td>0.5038</td>
</tr>
<tr>
<td>zh2-en2</td>
<td>0.4602</td>
</tr>
<tr>
<td>en1-en2</td>
<td>0.77959</td>
</tr>
<tr>
<td>en1-zh1</td>
<td>0.5038</td>
</tr>
<tr>
<td>en1-zh_en</td>
<td>0.67625</td>
</tr>
<tr>
<td>zh1-zh_en</td>
<td>0.71017</td>
</tr>
</tbody></table>
<p>从上表可以看出：</p>
<ul>
<li>zh1-en1与en1-zh1分数一样（0.5038），故与顺序无关</li>
<li>同语言情况下比跨语言情况得分明显要高</li>
<li>双语情况下比同语言情况得分略低一点</li>
</ul>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>完事，万事俱备，制作个微服务玩玩，<a href="https://caihaoran-00.github.io/2025/02/05/fastapi-request%E6%9E%84%E5%BB%BA%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E5%BE%AE%E6%9C%8D%E5%8A%A1/">参考</a>：</p>
<p>服务端代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> funasr <span class="keyword">import</span> AutoModel</span><br><span class="line"><span class="keyword">from</span> funasr.utils.postprocess_utils <span class="keyword">import</span> rich_transcription_postprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = AutoModel(</span><br><span class="line">    model=<span class="string">&quot;iic/SenseVoiceSmall&quot;</span>,</span><br><span class="line">    vad_model=<span class="string">&quot;fsmn-vad&quot;</span>,</span><br><span class="line">    vad_kwargs=&#123;<span class="string">&quot;max_single_segment_time&quot;</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    disable_update=<span class="literal">True</span>,</span><br><span class="line">    device=<span class="string">&quot;cuda:0&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建FASTAPI实例</span></span><br><span class="line">app = FastAPI(title=<span class="string">&quot;Sensevoice+KWS&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioData</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    audio_base64: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/asr/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asr_endpoint</span>(<span class="params">audio_data: AudioData</span>):</span><br><span class="line">    audio_bytes = base64.b64decode(audio_data.audio_base64)</span><br><span class="line"></span><br><span class="line">    res = model.generate(</span><br><span class="line">        <span class="built_in">input</span>=audio_bytes,</span><br><span class="line">        cache=&#123;&#125;,</span><br><span class="line">        language=<span class="string">&quot;auto&quot;</span>,  <span class="comment"># &quot;zn&quot;, &quot;en&quot;, &quot;yue&quot;, &quot;ja&quot;, &quot;ko&quot;, &quot;nospeech&quot;</span></span><br><span class="line">        use_itn=<span class="literal">True</span>,</span><br><span class="line">        batch_size_s=<span class="number">60</span>,</span><br><span class="line">        merge_vad=<span class="literal">True</span>,</span><br><span class="line">        merge_length_s=<span class="number">15</span>,</span><br><span class="line">    )</span><br><span class="line">    text = rich_transcription_postprocess(res[<span class="number">0</span>][<span class="string">&quot;text&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;transcription&quot;</span>: text&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Speaker Verification</tag>
        <tag>SV</tag>
        <tag>CAM++</tag>
        <tag>ERES2NET(V2)</tag>
      </tags>
  </entry>
</search>
